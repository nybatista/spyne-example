!function(Q){function F(F){for(var B,t,e=F[0],i=F[1],a=F[2],I=0,c=[];I<e.length;I++)t=e[I],U[t]&&c.push(U[t][0]),U[t]=0;for(B in i)Object.prototype.hasOwnProperty.call(i,B)&&(Q[B]=i[B]);for(l&&l(F);c.length;)c.shift()();return s.push.apply(s,a||[]),n()}function n(){for(var Q,F=0;F<s.length;F++){for(var n=s[F],B=!0,e=1;e<n.length;e++){var i=n[e];0!==U[i]&&(B=!1)}B&&(s.splice(F--,1),Q=t(t.s=n[0]))}return Q}var B={},U={1:0},s=[];function t(F){if(B[F])return B[F].exports;var n=B[F]={i:F,l:!1,exports:{}};return Q[F].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=Q,t.c=B,t.d=function(Q,F,n){t.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:n})},t.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},t.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return t.d(F,"a",F),F},t.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},t.p="";var e=window.webpackJsonp=window.webpackJsonp||[],i=e.push.bind(e);e.push=F,e=e.slice();for(var a=0;a<e.length;a++)F(e[a]);var l=i;s.push([329,0]),n()}({29:function(module,exports,__webpack_require__){var factory;window,factory=function(__WEBPACK_EXTERNAL_MODULE_ramda__,__WEBPACK_EXTERNAL_MODULE_rxjs__){return function(Q){var F={};function n(B){if(F[B])return F[B].exports;var U=F[B]={i:B,l:!1,exports:{}};return Q[B].call(U.exports,U,U.exports,n),U.l=!0,U.exports}return n.m=Q,n.c=F,n.d=function(Q,F,B){n.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:B})},n.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},n.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return n.d(F,"a",F),F},n.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},n.p="",n(n.s="./src/spyne/spyne.js")}({"./node_modules/data.validation/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/data.validation/lib/index.js ***!
  \***************************************************/
/*! no static exports found */function node_modulesDataValidationLibIndexJs(module,exports,__webpack_require__){eval('// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the "Software"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = __webpack_require__(/*! ./validation */ "./node_modules/data.validation/lib/validation.js")//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL25vZGVfbW9kdWxlcy9kYXRhLnZhbGlkYXRpb24vbGliL2luZGV4LmpzP2FkY2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9kYXRhLnZhbGlkYXRpb24vbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTQgUXVpbGRyZWVuIE1vdHRhIDxxdWlsZHJlZW5AZ21haWwuY29tPlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4vLyBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlc1xuLy8gKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLFxuLy8gaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSxcbi8vIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsXG4vLyBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuLy8gc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbi8vIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4vLyBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4vLyBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4vLyBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdmFsaWRhdGlvbicpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/data.validation/lib/index.js\n')},"./node_modules/data.validation/lib/validation.js":
/*!********************************************************!*\
  !*** ./node_modules/data.validation/lib/validation.js ***!
  \********************************************************/
/*! no static exports found */function node_modulesDataValidationLibValidationJs(module,exports){eval("// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * @module lib/validation\n */\nmodule.exports = Validation\n\n// -- Aliases ----------------------------------------------------------\nvar clone         = Object.create\nvar unimplemented = function(){ throw new Error('Not implemented.') }\nvar noop          = function(){ return this                         }\n\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The `Validation[α, β]` is a disjunction that's more appropriate for\n * validating inputs, or any use case where you want to aggregate failures. Not\n * only does the `Validation` provide a better terminology for working with\n * such cases (`Failure` and `Success` versus `Failure` and `Success`), it also\n * allows one to easily aggregate failures and successes as an Applicative\n * Functor.\n *\n * @class\n * @summary\n * Validation[α, β] <: Applicative[β]\n *                   , Functor[β]\n *                   , Show\n *                   , Eq\n */\nfunction Validation() { }\n\nFailure.prototype = clone(Validation.prototype)\nfunction Failure(a) {\n  this.value = a\n}\n\nSuccess.prototype = clone(Validation.prototype)\nfunction Success(a) {\n  this.value = a\n}\n\n// -- Constructors -----------------------------------------------------\n\n/**\n * Constructs a new `Validation[α, β]` structure holding a `Failure` value.\n *\n * @summary a → Validation[α, β]\n */\nValidation.Failure = function(a) {\n  return new Failure(a)\n}\nValidation.prototype.Failure = Validation.Failure\n\n/**\n * Constructs a new `Etiher[α, β]` structure holding a `Success` value.\n *\n * @summary β → Validation[α, β]\n */\nValidation.Success = function(a) {\n  return new Success(a)\n}\nValidation.prototype.Success = Validation.Success\n\n\n// -- Conversions ------------------------------------------------------\n\n/**\n * Constructs a new `Validation[α, β]` structure from a nullable type.\n *\n * Takes the `Failure` case if the value is `null` or `undefined`. Takes the\n * `Success` case otherwise.\n *\n * @summary α → Validation[α, α]\n */\nValidation.fromNullable = function(a) {\n  return a != null?       new Success(a)\n  :      /* otherwise */  new Failure(a)\n}\nValidation.prototype.fromNullable = Validation.fromNullable\n\n/**\n * Constructs a new `Either[α, β]` structure from a `Validation[α, β]` type.\n *\n * @summary Either[α, β] → Validation[α, β]\n */\nValidation.fromEither = function(a) {\n  return a.fold(Validation.Failure, Validation.Success)\n}\n\n\n// -- Predicates -------------------------------------------------------\n\n/**\n * True if the `Validation[α, β]` contains a `Failure` value.\n *\n * @summary Boolean\n */\nValidation.prototype.isFailure = false\nFailure.prototype.isFailure    = true\n\n/**\n * True if the `Validation[α, β]` contains a `Success` value.\n *\n * @summary Boolean\n */\nValidation.prototype.isSuccess = false\nSuccess.prototype.isSuccess    = true\n\n\n// -- Applicative ------------------------------------------------------\n\n/**\n * Creates a new `Validation[α, β]` instance holding the `Success` value `b`.\n *\n * `b` can be any value, including `null`, `undefined` or another\n * `Validation[α, β]` structure.\n *\n * @summary β → Validation[α, β]\n */\nValidation.of = function(a) {\n  return new Success(a)\n}\nValidation.prototype.of = Validation.of\n\n\n/**\n * Applies the function inside the `Success` case of the `Validation[α, β]` structure\n * to another applicative type.\n *\n * The `Validation[α, β]` should contain a function value, otherwise a `TypeError`\n * is thrown.\n *\n * @method\n * @summary (@Validation[α, β → γ], f:Applicative[_]) => f[β] → f[γ]\n */\nValidation.prototype.ap = unimplemented\n\nFailure.prototype.ap = function(b) {\n  return b.isFailure?     this.Failure(this.value.concat(b.value))\n  :      /* otherwise */  this\n}\n\nSuccess.prototype.ap = function(b) {\n  return b.isFailure?     b\n  :      /* otherwise */  b.map(this.value)\n}\n\n\n// -- Functor ----------------------------------------------------------\n\n/**\n * Transforms the `Success` value of the `Validation[α, β]` structure using a regular\n * unary function.\n *\n * @method\n * @summary (@Validation[α, β]) => (β → γ) → Validation[α, γ]\n */\nValidation.prototype.map = unimplemented\nFailure.prototype.map    = noop\n\nSuccess.prototype.map = function(f) {\n  return this.of(f(this.value))\n}\n\n\n// -- Show -------------------------------------------------------------\n\n/**\n * Returns a textual representation of the `Validation[α, β]` structure.\n *\n * @method\n * @summary (@Validation[α, β]) => Void → String\n */\nValidation.prototype.toString = unimplemented\n\nFailure.prototype.toString = function() {\n  return 'Validation.Failure(' + this.value + ')'\n}\n\nSuccess.prototype.toString = function() {\n  return 'Validation.Success(' + this.value + ')'\n}\n\n\n// -- Eq ---------------------------------------------------------------\n\n/**\n * Tests if an `Validation[α, β]` structure is equal to another `Validation[α, β]`\n * structure.\n *\n * @method\n * @summary (@Validation[α, β]) => Validation[α, β] → Boolean\n */\nValidation.prototype.isEqual = unimplemented\n\nFailure.prototype.isEqual = function(a) {\n  return a.isFailure && (a.value === this.value)\n}\n\nSuccess.prototype.isEqual = function(a) {\n  return a.isSuccess && (a.value === this.value)\n}\n\n\n// -- Extracting and recovering ----------------------------------------\n\n/**\n * Extracts the `Success` value out of the `Validation[α, β]` structure, if it\n * exists. Otherwise throws a `TypeError`.\n *\n * @method\n * @summary (@Validation[α, β]) => Void → β         :: partial, throws\n * @see {@link module:lib/validation~Validation#getOrElse} — A getter that can handle failures.\n * @see {@link module:lib/validation~Validation#merge} — The convergence of both values.\n * @throws {TypeError} if the structure has no `Success` value.\n */\nValidation.prototype.get = unimplemented\n\nFailure.prototype.get = function() {\n  throw new TypeError(\"Can't extract the value of a Failure(a).\")\n}\n\nSuccess.prototype.get = function() {\n  return this.value\n}\n\n\n/**\n * Extracts the `Success` value out of the `Validation[α, β]` structure. If the\n * structure doesn't have a `Success` value, returns the given default.\n *\n * @method\n * @summary (@Validation[α, β]) => β → β\n */\nValidation.prototype.getOrElse = unimplemented\n\nFailure.prototype.getOrElse = function(a) {\n  return a\n}\n\nSuccess.prototype.getOrElse = function(_) {\n  return this.value\n}\n\n\n/**\n * Transforms a `Failure` value into a new `Validation[α, β]` structure. Does nothing\n * if the structure contain a `Success` value.\n *\n * @method\n * @summary (@Validation[α, β]) => (α → Validation[γ, β]) → Validation[γ, β]\n */\nValidation.prototype.orElse = unimplemented\nSuccess.prototype.orElse    = noop\n\nFailure.prototype.orElse = function(f) {\n  return f(this.value)\n}\n\n\n/**\n * Returns the value of whichever side of the disjunction that is present.\n *\n * @summary (@Validation[α, α]) => Void → α\n */\nValidation.prototype.merge = function() {\n  return this.value\n}\n\n\n// -- Folds and Extended Transformations -------------------------------\n\n/**\n * Applies a function to each case in this data structure.\n *\n * @method\n * @summary (@Validation[α, β]) => (α → γ), (β → γ) → γ\n */\nValidation.prototype.fold = unimplemented\n\nFailure.prototype.fold = function(f, _) {\n  return f(this.value)\n}\n\nSuccess.prototype.fold = function(_, g) {\n  return g(this.value)\n}\n\n/**\n * Catamorphism.\n * \n * @method\n * @summary (@Validation[α, β]) => { Success: α → γ, Failure: α → γ } → γ\n */\nValidation.prototype.cata = unimplemented\n\nFailure.prototype.cata = function(pattern) {\n  return pattern.Failure(this.value)\n}\n\nSuccess.prototype.cata = function(pattern) {\n  return pattern.Success(this.value)\n}\n\n\n/**\n * Swaps the disjunction values.\n *\n * @method\n * @summary (@Validation[α, β]) => Void → Validation[β, α]\n */\nValidation.prototype.swap = unimplemented\n\nFailure.prototype.swap = function() {\n  return this.Success(this.value)\n}\n\nSuccess.prototype.swap = function() {\n  return this.Failure(this.value)\n}\n\n\n/**\n * Maps both sides of the disjunction.\n *\n * @method\n * @summary (@Validation[α, β]) => (α → γ), (β → δ) → Validation[γ, δ]\n */\nValidation.prototype.bimap = unimplemented\n\nFailure.prototype.bimap = function(f, _) {\n  return this.Failure(f(this.value))\n}\n\nSuccess.prototype.bimap = function(_, g) {\n  return this.Success(g(this.value))\n}\n\n\n/**\n * Maps the failure side of the disjunction.\n *\n * @method\n * @summary (@Validation[α, β]) => (α → γ) → Validation[γ, β]\n */\nValidation.prototype.failureMap = unimplemented\nSuccess.prototype.failureMap    = noop\n\nFailure.prototype.failureMap = function(f) {\n  return this.Failure(f(this.value))\n}\n\n/**\n * Maps the failure side of the disjunction.\n *\n * @method\n * @deprecated in favour of {@link module:lib/validation~Validation#failureMap}\n * @summary (@Validation[α, β]) => (α → γ) → Validation[γ, β]\n */\nValidation.prototype.leftMap = Validation.prototype.failureMap\nSuccess.prototype.leftMap    = Success.prototype.failureMap\nFailure.prototype.leftMap    = Failure.prototype.failureMap\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/data.validation/lib/validation.js\n")},"./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! no static exports found */function node_modulesWhatwgFetchFetchJs(module,exports){eval("(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/whatwg-fetch/fetch.js\n")},"./src/spyne/channels/channel-route.js":
/*!*********************************************!*\
  !*** ./src/spyne/channels/channel-route.js ***!
  \*********************************************/
/*! exports provided: ChannelRoute */function srcSpyneChannelsChannelRouteJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChannelRoute\", function() { return ChannelRoute; });\n/* harmony import */ var _channels_channels_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../channels/channels-base */ \"./src/spyne/channels/channels-base.js\");\n/* harmony import */ var _utils_channel_util_urls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/channel-util-urls */ \"./src/spyne/utils/channel-util-urls.js\");\n/* harmony import */ var _utils_channel_util_route__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/channel-util-route */ \"./src/spyne/utils/channel-util-route.js\");\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar ChannelRoute =\n/*#__PURE__*/\nfunction (_ChannelsBase) {\n  _inheritsLoose(ChannelRoute, _ChannelsBase);\n\n  function ChannelRoute() {\n    var _this;\n\n    _this = _ChannelsBase.call(this) || this;\n\n    _this.createChannelActionsObj();\n\n    _this.props.name = 'ROUTE';\n    _this.routeConfigJson = _this.getRouteConfig();\n\n    _this.bindStaticMethods();\n\n    _this.navToStream$ = new Rx.BehaviorSubject();\n    _this.observer$ = _this.navToStream$.map(function (info) {\n      return _this.onMapNext(info);\n    });\n    return _this;\n  }\n\n  var _proto = ChannelRoute.prototype;\n\n  _proto.initializeStream = function initializeStream() {\n    this.initStream();\n  };\n\n  _proto.createChannelActionsObj = function createChannelActionsObj() {\n    var arr = this.addRegisteredActions();\n\n    var converter = function converter(str) {\n      return R.objOf(str, str);\n    };\n\n    var obj = R.mergeAll(R.chain(converter, arr));\n    this.channelActions = obj;\n  };\n\n  _proto.addRegisteredActions = function addRegisteredActions() {\n    return ['CHANNEL_ROUTE_DEEPLINK_EVENT', 'CHANNEL_ROUTE_CHANGE_EVENT'];\n  };\n\n  _proto.getRouteConfig = function getRouteConfig() {\n    var spyneConfig = window.Spyne.config;\n    var routeConfig = R.path(['channels', 'ROUTE'], spyneConfig);\n\n    if (routeConfig.type === 'query') {\n      routeConfig.isHash = false;\n    }\n\n    var arr = _utils_channel_util_route__WEBPACK_IMPORTED_MODULE_2__[\"RouteUtils\"].flattenConfigObject(routeConfig.routes);\n    routeConfig['paramsArr'] = arr;\n    return routeConfig;\n  };\n\n  _proto.initStream = function initStream() {\n    this.firstLoadStream$ = new Rx.BehaviorSubject(this.onIncomingDomEvent(undefined, this.routeConfigJson, '' + 'CHANNEL_ROUTE_DEEPLINK_EVENT'));\n    _utils_channel_util_route__WEBPACK_IMPORTED_MODULE_2__[\"RouteUtils\"].createPopStateStream(this.onIncomingDomEvent.bind(this));\n    this.observer$ = Rx.Observable.merge(this.firstLoadStream$, this.navToStream$);\n  };\n\n  _proto.onMapNext = function onMapNext(data, firstLoaded) {\n    if (firstLoaded === void 0) {\n      firstLoaded = false;\n    }\n\n    data['action'] = 'CHANNEL_ROUTE_CHANGE_EVENT';\n    return data;\n  };\n\n  ChannelRoute.onIncomingDomEvent = function onIncomingDomEvent(evt, config, actn) {\n    if (config === void 0) {\n      config = this.routeConfigJson;\n    }\n\n    var action = actn !== undefined ? actn : this.channelActions.CHANNEL_ROUTE_CHANGE_EVENT;\n    var payload = this.getDataFromString(config); // console.log('route dom ',action, payload);\n\n    this.sendStreamItem(action, payload, undefined, undefined, this.navToStream$);\n  };\n\n  _proto.onIncomingObserverableData = function onIncomingObserverableData(pl) {\n    var action = this.channelActions.CHANNEL_ROUTE_CHANGE_EVENT;\n    var payload = this.getDataFromParams(pl);\n    var srcElement = R.path(['observableData', 'srcElement'], pl);\n    var uiEvent = pl.observableEvent;\n    var changeLocationBool = !payload.isHidden;\n    this.sendRouteStream(payload, changeLocationBool);\n    this.sendStreamItem(action, payload, srcElement, uiEvent, this.navToStream$);\n  };\n\n  _proto.sendRouteStream = function sendRouteStream(payload, changeWindowLoc) {\n    if (changeWindowLoc === void 0) {\n      changeWindowLoc = true;\n    }\n\n    if (changeWindowLoc === true) {\n      this.setWindowLocation(payload);\n    }\n  };\n\n  ChannelRoute.getRouteState = function getRouteState(str) {\n    return 'CHANNEL_ROUTE_CHANGE_EVENT';\n  };\n\n  ChannelRoute.getIsDeepLinkBool = function getIsDeepLinkBool() {\n    return this._routeCount === 0;\n  };\n\n  ChannelRoute.getRouteCount = function getRouteCount() {\n    if (this._routeCount === undefined) {\n      this._routeCount = 0;\n      return this._routeCount;\n    }\n\n    this._routeCount += 1;\n    return this._routeCount;\n  };\n\n  ChannelRoute.getExtraPayloadParams = function getExtraPayloadParams(config) {\n    if (config === void 0) {\n      config = this.routeConfigJson;\n    }\n\n    var routeCount = this.getRouteCount();\n    var isDeepLink = this.getIsDeepLinkBool();\n    var isHash = config.isHash;\n    var isHidden = config.isHidden;\n    var routeType = config.type;\n    return {\n      routeCount: routeCount,\n      isDeepLink: isDeepLink,\n      isHash: isHash,\n      isHidden: isHidden,\n      routeType: routeType\n    };\n  };\n\n  ChannelRoute.getDataFromParams = function getDataFromParams(pl, config) {\n    if (config === void 0) {\n      config = this.routeConfigJson;\n    }\n\n    var keywords = R.path(['observableData', 'payload'], pl);\n    var routeValue = this.getRouteStrFromParams(keywords, config);\n    var dataFromStr = this.getDataFromLocationStr();\n    var routeKeyword = dataFromStr.routeKeyword,\n        routeKeywordsArr = dataFromStr.routeKeywordsArr;\n    keywords = R.merge(dataFromStr.keywords, keywords);\n\n    var _getExtraPayloadParam = this.getExtraPayloadParams(config),\n        routeCount = _getExtraPayloadParam.routeCount,\n        isDeepLink = _getExtraPayloadParam.isDeepLink,\n        isHash = _getExtraPayloadParam.isHash,\n        isHidden = _getExtraPayloadParam.isHidden,\n        routeType = _getExtraPayloadParam.routeType;\n\n    return {\n      isDeepLink: isDeepLink,\n      routeCount: routeCount,\n      routeKeyword: routeKeyword,\n      routeKeywordsArr: routeKeywordsArr,\n      keywords: keywords,\n      routeValue: routeValue,\n      isHash: isHash,\n      isHidden: isHidden,\n      routeType: routeType\n    };\n  };\n\n  ChannelRoute.getDataFromString = function getDataFromString(config, actn) {\n    if (config === void 0) {\n      config = this.routeConfigJson;\n    }\n\n    var type = config.type;\n    var hashIsTrue = config.isHash === true; //type = config.isHash === true ? ''\n\n    var str = _utils_channel_util_urls__WEBPACK_IMPORTED_MODULE_1__[\"URLUtils\"].getLocationStrByType(type, hashIsTrue);\n\n    var _ChannelRoute$getPara = ChannelRoute.getParamsFromRouteStr(str, config, type),\n        routeKeywordsArr = _ChannelRoute$getPara.routeKeywordsArr,\n        routeKeyword = _ChannelRoute$getPara.routeKeyword,\n        keywords = _ChannelRoute$getPara.keywords,\n        routeValue = _ChannelRoute$getPara.routeValue;\n\n    var _getExtraPayloadParam2 = this.getExtraPayloadParams(config),\n        routeCount = _getExtraPayloadParam2.routeCount,\n        isDeepLink = _getExtraPayloadParam2.isDeepLink,\n        isHash = _getExtraPayloadParam2.isHash,\n        routeType = _getExtraPayloadParam2.routeType,\n        isHidden = _getExtraPayloadParam2.isHidden;\n\n    var obj = {\n      isDeepLink: isDeepLink,\n      routeCount: routeCount,\n      routeKeyword: routeKeyword,\n      routeKeywordsArr: routeKeywordsArr,\n      keywords: keywords,\n      routeValue: routeValue,\n      isHash: isHash,\n      isHidden: isHidden,\n      routeType: routeType\n    };\n    return obj;\n  };\n\n  ChannelRoute.getDataFromLocationStr = function getDataFromLocationStr(t) {\n    if (t === void 0) {\n      t = 'slash';\n    }\n\n    var type = this.routeConfigJson !== undefined ? this.routeConfigJson.type : t;\n    var str = _utils_channel_util_urls__WEBPACK_IMPORTED_MODULE_1__[\"URLUtils\"].getLocationStrByType(type);\n\n    var _getParamsFromRouteSt = this.getParamsFromRouteStr(str, this.routeConfigJson, type),\n        routeKeywordsArr = _getParamsFromRouteSt.routeKeywordsArr,\n        routeKeyword = _getParamsFromRouteSt.routeKeyword,\n        keywords = _getParamsFromRouteSt.keywords,\n        routeValue = _getParamsFromRouteSt.routeValue;\n\n    var action = this.getRouteState();\n    return {\n      routeKeywordsArr: routeKeywordsArr,\n      routeKeyword: routeKeyword,\n      keywords: keywords,\n      routeValue: routeValue,\n      action: action\n    };\n  };\n\n  ChannelRoute.getLocationData = function getLocationData() {\n    var locationParamsArr = ['href', 'origin', 'protocol', 'host', 'hostname', 'port', 'pathname', 'search', 'hash'];\n    return R.pickAll(locationParamsArr, window.location);\n  };\n\n  ChannelRoute.getRouteStrFromParams = function getRouteStrFromParams(paramsData, routeConfig, t) {\n    var type = t !== undefined ? t : routeConfig.type;\n    return _utils_channel_util_urls__WEBPACK_IMPORTED_MODULE_1__[\"URLUtils\"].convertParamsToRoute(paramsData, routeConfig, type);\n  };\n\n  ChannelRoute.getParamsFromRouteStr = function getParamsFromRouteStr(str, routeConfig, t) {\n    var type = t !== undefined ? t : routeConfig.type;\n    return _utils_channel_util_urls__WEBPACK_IMPORTED_MODULE_1__[\"URLUtils\"].convertRouteToParams(str, routeConfig, type);\n  };\n\n  _proto.checkEmptyRouteStr = function checkEmptyRouteStr(str, isHash) {\n    if (isHash === void 0) {\n      isHash = false;\n    }\n\n    var isEmpty = R.isEmpty(str);\n    var pathNameIsEmptyBool = isEmpty === true && isHash === false;\n    var hashNameIsEmptyBool = isEmpty === true && isHash === true;\n    var hashNameBool = isEmpty === false && isHash === true;\n    console.log('ROUTE STR CHECK ', {\n      str: str,\n      isHash: isHash\n    });\n\n    if (pathNameIsEmptyBool === true || hashNameIsEmptyBool === true) {\n      return '/';\n    } else if (hashNameBool === true) {\n      return R.concat('#', str);\n    }\n\n    return str;\n  };\n\n  _proto.setWindowLocation = function setWindowLocation(channelPayload) {\n    var isHash = channelPayload.isHash,\n        routeValue = channelPayload.routeValue;\n    routeValue = this.checkEmptyRouteStr(routeValue, isHash);\n\n    if (isHash === true) {\n      // window.location.hash = routeValue;\n      console.log('ROUTE STR FOR HASH ', routeValue);\n      window.history.pushState({}, '', routeValue);\n    } else {\n      // routeValue =  R.when(R.isEmpty, R.always('/'))(routeValue);\n      var checkForSlash = R.when(R.compose(R.complement(R.equals('/')), R.head), R.concat('/', R.__));\n      window.history.pushState({}, '', checkForSlash(routeValue));\n    }\n  };\n\n  _proto.getWindowLocation = function getWindowLocation() {\n    return window.location.pathname; // pullHashAndSlashFromPath(window.location.hash);\n  };\n\n  _proto.bindStaticMethods = function bindStaticMethods() {\n    this.getIsDeepLinkBool = ChannelRoute.getIsDeepLinkBool.bind(this);\n    this.getDataFromLocationStr = ChannelRoute.getDataFromLocationStr.bind(this);\n    this.onIncomingDomEvent = ChannelRoute.onIncomingDomEvent.bind(this);\n    this.getDataFromString = ChannelRoute.getDataFromString.bind(this);\n    this.getParamsFromRouteStr = ChannelRoute.getParamsFromRouteStr.bind(this);\n    this.getLocationData = ChannelRoute.getLocationData.bind(this);\n    this.getRouteState = ChannelRoute.getRouteState.bind(this);\n    this.getDataFromParams = ChannelRoute.getDataFromParams.bind(this);\n    this.getRouteCount = ChannelRoute.getRouteCount.bind(this);\n    this.getExtraPayloadParams = ChannelRoute.getExtraPayloadParams.bind(this);\n    var curriedGetRoute = R.curryN(3, ChannelRoute.getRouteStrFromParams);\n    this.getRouteStrFromParams = curriedGetRoute(R.__, this.routeConfigJson, this.routeConfigJson.type);\n  };\n\n  return ChannelRoute;\n}(_channels_channels_base__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsBase\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/channels/channel-route.js\n")},"./src/spyne/channels/channel-stream-item.js":
/*!***************************************************!*\
  !*** ./src/spyne/channels/channel-stream-item.js ***!
  \***************************************************/
/*! exports provided: ChannelStreamItem */function srcSpyneChannelsChannelStreamItemJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChannelStreamItem\", function() { return ChannelStreamItem; });\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar ChannelStreamItem =\n/*#__PURE__*/\nfunction () {\n  function ChannelStreamItem(channelName, action, channelPayload, srcElement, event) {\n    var channel = channelName;\n    var channelStreamItemObj = {\n      channel: channel,\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      event: event\n    };\n    var channelActionsArr = window.Spyne.getChannelActions(channel);\n    ChannelStreamItem.validateAction(action, channel, channelActionsArr);\n\n    if (channel === 'ROUTE') {\n      channelStreamItemObj['location'] = ChannelStreamItem.getLocationData();\n    }\n\n    return channelStreamItemObj;\n  }\n\n  ChannelStreamItem.validateAction = function validateAction(action, channel, arr) {\n    var isInArr = R.contains(action, arr);\n\n    if (isInArr === false && window.Spyne !== undefined) {\n      console.warn(\"warning: Action: '\" + action + \"' is not registered within the \" + channel + \" channel!\");\n    }\n\n    return isInArr;\n  };\n\n  ChannelStreamItem.getLocationData = function getLocationData() {\n    var locationParamsArr = ['href', 'origin', 'protocol', 'host', 'hostname', 'port', 'pathname', 'search', 'hash'];\n    return R.pickAll(locationParamsArr, window.location);\n  };\n\n  ChannelStreamItem.getStreamItem = function getStreamItem() {};\n\n  ChannelStreamItem.getMouseEventKeys = function getMouseEventKeys() {\n    return ['altKey', 'bubbles', 'cancelBubble', 'cancelable', 'clientX', 'clientY', 'composed', 'ctrlKey', 'currentTarget', 'defaultPrevented', 'detail', 'eventPhase', 'fromElement', 'isTrusted', 'layerX', 'layerY', 'metaKey', 'movementX', 'movementY', 'offsetX', 'offsetY', 'pageX', 'pageY', 'path', 'relatedTarget', 'returnValue', 'screenX', 'screenY', 'shiftKey', 'sourceCapabilities', 'srcElement', 'target', 'timeStamp', 'toElement', 'type', 'view', 'which', 'x', 'y'];\n  };\n\n  return ChannelStreamItem;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS9jaGFubmVscy9jaGFubmVsLXN0cmVhbS1pdGVtLmpzP2I3NGIiXSwibmFtZXMiOlsiUiIsInJlcXVpcmUiLCJDaGFubmVsU3RyZWFtSXRlbSIsImNoYW5uZWxOYW1lIiwiYWN0aW9uIiwiY2hhbm5lbFBheWxvYWQiLCJzcmNFbGVtZW50IiwiZXZlbnQiLCJjaGFubmVsIiwiY2hhbm5lbFN0cmVhbUl0ZW1PYmoiLCJjaGFubmVsQWN0aW9uc0FyciIsIndpbmRvdyIsIlNweW5lIiwiZ2V0Q2hhbm5lbEFjdGlvbnMiLCJ2YWxpZGF0ZUFjdGlvbiIsImdldExvY2F0aW9uRGF0YSIsImFyciIsImlzSW5BcnIiLCJjb250YWlucyIsInVuZGVmaW5lZCIsImNvbnNvbGUiLCJ3YXJuIiwibG9jYXRpb25QYXJhbXNBcnIiLCJwaWNrQWxsIiwibG9jYXRpb24iLCJnZXRTdHJlYW1JdGVtIiwiZ2V0TW91c2VFdmVudEtleXMiXSwibWFwcGluZ3MiOiI7QUFDQTtBQUFBLElBQU1BLElBQUksbUJBQUFDLENBQVEsb0JBQVIsQ0FBVjs7QUFFQSxJQUFhQyxpQkFBYjtBQUFBO0FBQUE7QUFDRSw2QkFBWUMsV0FBWixFQUF5QkMsTUFBekIsRUFBaUNDLGNBQWpDLEVBQWlEQyxVQUFqRCxFQUE2REMsS0FBN0QsRUFBb0U7QUFDbEUsUUFBSUMsVUFBVUwsV0FBZDtBQUVBLFFBQUlNLHVCQUF1QjtBQUFDRCxzQkFBRDtBQUFVSixvQkFBVjtBQUFrQkMsb0NBQWxCO0FBQWtDQyw0QkFBbEM7QUFBOENDO0FBQTlDLEtBQTNCO0FBRUEsUUFBTUcsb0JBQW9CQyxPQUFPQyxLQUFQLENBQWFDLGlCQUFiLENBQStCTCxPQUEvQixDQUExQjtBQUVBTixzQkFBa0JZLGNBQWxCLENBQWlDVixNQUFqQyxFQUF5Q0ksT0FBekMsRUFBa0RFLGlCQUFsRDs7QUFFQSxRQUFJRixZQUFZLE9BQWhCLEVBQXlCO0FBQ3ZCQywyQkFBcUIsVUFBckIsSUFBbUNQLGtCQUFrQmEsZUFBbEIsRUFBbkM7QUFDRDs7QUFFRCxXQUFPTixvQkFBUDtBQUNEOztBQWZILG9CQWlCU0ssY0FqQlQsMkJBaUJ3QlYsTUFqQnhCLEVBaUJnQ0ksT0FqQmhDLEVBaUJ5Q1EsR0FqQnpDLEVBaUI4QztBQUMxQyxRQUFJQyxVQUFVakIsRUFBRWtCLFFBQUYsQ0FBV2QsTUFBWCxFQUFtQlksR0FBbkIsQ0FBZDs7QUFDQSxRQUFJQyxZQUFZLEtBQVosSUFBcUJOLE9BQU9DLEtBQVAsS0FBaUJPLFNBQTFDLEVBQXFEO0FBQ25EQyxjQUFRQyxJQUFSLHdCQUFrQ2pCLE1BQWxDLHVDQUEwRUksT0FBMUU7QUFDRDs7QUFDRCxXQUFPUyxPQUFQO0FBQ0QsR0F2Qkg7O0FBQUEsb0JBeUJTRixlQXpCVCw4QkF5QjJCO0FBQ3ZCLFFBQU1PLG9CQUFvQixDQUN4QixNQUR3QixFQUV4QixRQUZ3QixFQUd4QixVQUh3QixFQUl4QixNQUp3QixFQUt4QixVQUx3QixFQU14QixNQU53QixFQU94QixVQVB3QixFQVF4QixRQVJ3QixFQVN4QixNQVR3QixDQUExQjtBQVVBLFdBQU90QixFQUFFdUIsT0FBRixDQUFVRCxpQkFBVixFQUE2QlgsT0FBT2EsUUFBcEMsQ0FBUDtBQUNELEdBckNIOztBQUFBLG9CQXVDU0MsYUF2Q1QsNEJBdUN5QixDQUV0QixDQXpDSDs7QUFBQSxvQkEyQ1NDLGlCQTNDVCxnQ0EyQzZCO0FBQ3pCLFdBQU8sQ0FBQyxRQUFELEVBQVcsU0FBWCxFQUFzQixjQUF0QixFQUFzQyxZQUF0QyxFQUFvRCxTQUFwRCxFQUErRCxTQUEvRCxFQUEwRSxVQUExRSxFQUFzRixTQUF0RixFQUFpRyxlQUFqRyxFQUFrSCxrQkFBbEgsRUFBc0ksUUFBdEksRUFBZ0osWUFBaEosRUFBOEosYUFBOUosRUFBNkssV0FBN0ssRUFBMEwsUUFBMUwsRUFBb00sUUFBcE0sRUFBOE0sU0FBOU0sRUFBeU4sV0FBek4sRUFBc08sV0FBdE8sRUFBbVAsU0FBblAsRUFBOFAsU0FBOVAsRUFBeVEsT0FBelEsRUFBa1IsT0FBbFIsRUFBMlIsTUFBM1IsRUFBbVMsZUFBblMsRUFBb1QsYUFBcFQsRUFBbVUsU0FBblUsRUFBOFUsU0FBOVUsRUFBeVYsVUFBelYsRUFBcVcsb0JBQXJXLEVBQTJYLFlBQTNYLEVBQXlZLFFBQXpZLEVBQW1aLFdBQW5aLEVBQWdhLFdBQWhhLEVBQTZhLE1BQTdhLEVBQXFiLE1BQXJiLEVBQTZiLE9BQTdiLEVBQXNjLEdBQXRjLEVBQTJjLEdBQTNjLENBQVA7QUFDRCxHQTdDSDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL3NweW5lL2NoYW5uZWxzL2NoYW5uZWwtc3RyZWFtLWl0ZW0uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IFIgPSByZXF1aXJlKCdyYW1kYScpO1xuXG5leHBvcnQgY2xhc3MgQ2hhbm5lbFN0cmVhbUl0ZW0ge1xuICBjb25zdHJ1Y3RvcihjaGFubmVsTmFtZSwgYWN0aW9uLCBjaGFubmVsUGF5bG9hZCwgc3JjRWxlbWVudCwgZXZlbnQpIHtcbiAgICBsZXQgY2hhbm5lbCA9IGNoYW5uZWxOYW1lO1xuXG4gICAgbGV0IGNoYW5uZWxTdHJlYW1JdGVtT2JqID0ge2NoYW5uZWwsIGFjdGlvbiwgY2hhbm5lbFBheWxvYWQsIHNyY0VsZW1lbnQsIGV2ZW50fTtcblxuICAgIGNvbnN0IGNoYW5uZWxBY3Rpb25zQXJyID0gd2luZG93LlNweW5lLmdldENoYW5uZWxBY3Rpb25zKGNoYW5uZWwpO1xuXG4gICAgQ2hhbm5lbFN0cmVhbUl0ZW0udmFsaWRhdGVBY3Rpb24oYWN0aW9uLCBjaGFubmVsLCBjaGFubmVsQWN0aW9uc0Fycik7XG5cbiAgICBpZiAoY2hhbm5lbCA9PT0gJ1JPVVRFJykge1xuICAgICAgY2hhbm5lbFN0cmVhbUl0ZW1PYmpbJ2xvY2F0aW9uJ10gPSBDaGFubmVsU3RyZWFtSXRlbS5nZXRMb2NhdGlvbkRhdGEoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hhbm5lbFN0cmVhbUl0ZW1PYmo7XG4gIH1cblxuICBzdGF0aWMgdmFsaWRhdGVBY3Rpb24oYWN0aW9uLCBjaGFubmVsLCBhcnIpIHtcbiAgICBsZXQgaXNJbkFyciA9IFIuY29udGFpbnMoYWN0aW9uLCBhcnIpO1xuICAgIGlmIChpc0luQXJyID09PSBmYWxzZSAmJiB3aW5kb3cuU3B5bmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKGB3YXJuaW5nOiBBY3Rpb246ICcke2FjdGlvbn0nIGlzIG5vdCByZWdpc3RlcmVkIHdpdGhpbiB0aGUgJHtjaGFubmVsfSBjaGFubmVsIWApO1xuICAgIH1cbiAgICByZXR1cm4gaXNJbkFycjtcbiAgfVxuXG4gIHN0YXRpYyBnZXRMb2NhdGlvbkRhdGEoKSB7XG4gICAgY29uc3QgbG9jYXRpb25QYXJhbXNBcnIgPSBbXG4gICAgICAnaHJlZicsXG4gICAgICAnb3JpZ2luJyxcbiAgICAgICdwcm90b2NvbCcsXG4gICAgICAnaG9zdCcsXG4gICAgICAnaG9zdG5hbWUnLFxuICAgICAgJ3BvcnQnLFxuICAgICAgJ3BhdGhuYW1lJyxcbiAgICAgICdzZWFyY2gnLFxuICAgICAgJ2hhc2gnXTtcbiAgICByZXR1cm4gUi5waWNrQWxsKGxvY2F0aW9uUGFyYW1zQXJyLCB3aW5kb3cubG9jYXRpb24pO1xuICB9XG5cbiAgc3RhdGljIGdldFN0cmVhbUl0ZW0oKSB7XG5cbiAgfVxuXG4gIHN0YXRpYyBnZXRNb3VzZUV2ZW50S2V5cygpIHtcbiAgICByZXR1cm4gWydhbHRLZXknLCAnYnViYmxlcycsICdjYW5jZWxCdWJibGUnLCAnY2FuY2VsYWJsZScsICdjbGllbnRYJywgJ2NsaWVudFknLCAnY29tcG9zZWQnLCAnY3RybEtleScsICdjdXJyZW50VGFyZ2V0JywgJ2RlZmF1bHRQcmV2ZW50ZWQnLCAnZGV0YWlsJywgJ2V2ZW50UGhhc2UnLCAnZnJvbUVsZW1lbnQnLCAnaXNUcnVzdGVkJywgJ2xheWVyWCcsICdsYXllclknLCAnbWV0YUtleScsICdtb3ZlbWVudFgnLCAnbW92ZW1lbnRZJywgJ29mZnNldFgnLCAnb2Zmc2V0WScsICdwYWdlWCcsICdwYWdlWScsICdwYXRoJywgJ3JlbGF0ZWRUYXJnZXQnLCAncmV0dXJuVmFsdWUnLCAnc2NyZWVuWCcsICdzY3JlZW5ZJywgJ3NoaWZ0S2V5JywgJ3NvdXJjZUNhcGFiaWxpdGllcycsICdzcmNFbGVtZW50JywgJ3RhcmdldCcsICd0aW1lU3RhbXAnLCAndG9FbGVtZW50JywgJ3R5cGUnLCAndmlldycsICd3aGljaCcsICd4JywgJ3knXTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/channels/channel-stream-item.js\n")},"./src/spyne/channels/channel-ui.js":
/*!******************************************!*\
  !*** ./src/spyne/channels/channel-ui.js ***!
  \******************************************/
/*! exports provided: ChannelUI */function srcSpyneChannelsChannelUiJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChannelUI\", function() { return ChannelUI; });\n/* harmony import */ var _channels_channels_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../channels/channels-base */ \"./src/spyne/channels/channels-base.js\");\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar ChannelUI =\n/*#__PURE__*/\nfunction (_ChannelsBase) {\n  _inheritsLoose(ChannelUI, _ChannelsBase);\n\n  function ChannelUI() {\n    var _this;\n\n    _this = _ChannelsBase.call(this) || this;\n    _this.props.name = 'UI';\n    _this.keyEventsLoaded = false;\n    _this.keyCodeArr = []; // this.addKeyEvent(13);\n\n    return _this;\n  }\n\n  var _proto = ChannelUI.prototype;\n\n  _proto.addRegisteredActions = function addRegisteredActions() {\n    return ['CHANNEL_UI_EVENT', 'CHANNEL_UI_BLUR_EVENT', 'CHANNEL_UI_CLICK_EVENT', 'CHANNEL_UI_CHANGE_EVENT', 'CHANNEL_UI_CHANGE_EVENT', 'CHANNEL_UI_DBLCLICK_EVENT', 'CHANNEL_UI_FOCUS_EVENT', 'CHANNEL_UI_FOCUSIN_EVENT', 'CHANNEL_UI_FOCUSOUT_EVENT', 'CHANNEL_UI_INPUT_EVENT', 'CHANNEL_UI_KEYDOWN_EVENT', 'CHANNEL_UI_KEYPRESS_EVENT', 'CHANNEL_UI_KEYUP_EVENT', 'CHANNEL_UI_MOUSEDOWN_EVENT', 'CHANNEL_UI_MOUSEENTER_EVENT', 'CHANNEL_UI_MOUSELEAVE_EVENT', 'CHANNEL_UI_MOUSEMOVE_EVENT', 'CHANNEL_UI_MOUSEOUT_EVENT', 'CHANNEL_UI_MOUSEOVER_EVENT', 'CHANNEL_UI_MOUSEUP_EVENT', 'CHANNEL_UI_SELECT_EVENT'];\n  };\n\n  _proto.loadKeyStream = function loadKeyStream() {\n    var _this2 = this;\n\n    var keyUps = Rx.Observable.fromEvent(document, 'keyup');\n\n    var filterKeys = function filterKeys(e) {\n      return _this2.keyCodeArr.indexOf(e.keyCode) >= 0;\n    };\n\n    this.keyPresses$ = keyUps.groupBy(function (e) {\n      return e.keyCode;\n    }).mergeAll().filter(filterKeys).repeat().subscribe(this.onKeyPressed.bind(this));\n  };\n\n  _proto.addKeyEvent = function addKeyEvent(num) {\n    if (this.keyEventsLoaded === false) {\n      this.loadKeyStream();\n    }\n\n    this.keyEventsLoaded = true;\n    this.registerKey(num);\n  };\n\n  _proto.registerKey = function registerKey(c) {\n    this.keyCodeArr.push(c);\n  };\n\n  _proto.onKeyPressed = function onKeyPressed(evt) {\n    console.log('key is ', evt);\n  };\n\n  _proto.onIncomingObservable = function onIncomingObservable(obj) {\n    var _this3 = this;\n\n    var eqsName = R.equals(obj.name, this.props.name);\n\n    var dataObj = function dataObj(obsVal) {\n      return {\n        observableData: obj.data,\n        uiEvent: obsVal\n      };\n    };\n\n    var onSuccess = function onSuccess(obj) {\n      return obj.observable.map(dataObj).subscribe(_this3.onUIEvent.bind(_this3));\n    };\n\n    var onError = function onError() {};\n\n    return eqsName === true ? onSuccess(obj) : onError();\n  };\n\n  _proto.getActionState = function getActionState(val) {\n    var typeVal = R.path(['uiEvent', 'type']);\n    var typeOverRideVal = R.path(['uiEvent', 'typeOverRide']);\n    var eventType = R.compose(R.toUpper, R.either(typeOverRideVal, typeVal));\n    var type = eventType(val);\n    var mainAction = 'CHANNEL_UI';\n    return type !== undefined ? mainAction + \"_\" + type + \"_EVENT\" : mainAction;\n  };\n\n  _proto.onUIEvent = function onUIEvent(obs) {\n    obs['action'] = this.getActionState(obs);\n    var action = obs.action; // this.getActionState(obs);\n\n    var _obs$observableData = obs.observableData,\n        payload = _obs$observableData.payload,\n        srcElement = _obs$observableData.srcElement;\n    var event = obs.uiEvent;\n    this.sendStreamItem(action, payload, srcElement, event);\n  };\n\n  return ChannelUI;\n}(_channels_channels_base__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsBase\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/channels/channel-ui.js\n")},"./src/spyne/channels/channel-window.js":
/*!**********************************************!*\
  !*** ./src/spyne/channels/channel-window.js ***!
  \**********************************************/
/*! exports provided: ChannelWindow */function srcSpyneChannelsChannelWindowJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChannelWindow\", function() { return ChannelWindow; });\n/* harmony import */ var _channels_channels_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../channels/channels-base */ \"./src/spyne/channels/channels-base.js\");\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/frp-tools */ \"./src/spyne/utils/frp-tools.js\");\n/* harmony import */ var _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/channel-util-dom */ \"./src/spyne/utils/channel-util-dom.js\");\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar ChannelWindow =\n/*#__PURE__*/\nfunction (_ChannelsBase) {\n  _inheritsLoose(ChannelWindow, _ChannelsBase);\n\n  function ChannelWindow() {\n    var _this;\n\n    _this = _ChannelsBase.call(this) || this;\n\n    _this.bindStaticMethods();\n\n    _this.observer$ = new Rx.Subject();\n    _this.props.name = 'WINDOW';\n    return _this;\n  }\n\n  var _proto = ChannelWindow.prototype;\n\n  _proto.initializeStream = function initializeStream() {\n    var _Rx$Observable,\n        _this2 = this;\n\n    this.domChannelConfig = window.Spyne.config.channels.WINDOW;\n    this.currentScrollY = window.scrollY;\n    var obs$Arr = this.getActiveObservables();\n\n    var dom$ = (_Rx$Observable = Rx.Observable).merge.apply(_Rx$Observable, obs$Arr);\n\n    dom$.subscribe(function (p) {\n      var action = p.action,\n          channelPayload = p.channelPayload,\n          srcElement = p.srcElement,\n          event = p.event;\n\n      _this2.sendStreamItem(action, channelPayload, srcElement, event);\n    });\n  };\n\n  ChannelWindow.getScrollMapFn = function getScrollMapFn(event) {\n    var action = this.channelActions.CHANNEL_WINDOW_SCROLL_EVENT;\n    var scrollY = window.scrollY;\n    var scrollDistance = this.currentScrollY - scrollY;\n    var scrollDir = scrollDistance >= 0 ? 'up' : 'down';\n    this.currentScrollY = scrollY;\n    var channelPayload = {\n      scrollY: scrollY,\n      scrollDistance: scrollDistance,\n      scrollDir: scrollDir\n    };\n    var srcElement = event.srcElement;\n    return {\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      scrollDistance: scrollDistance,\n      event: event\n    };\n  };\n\n  ChannelWindow.getMouseWheelMapFn = function getMouseWheelMapFn(event) {\n    var action = this.channelActions.CHANNEL_WINDOW_MOUSEWHEEL_EVENT;\n    var scrollDir = event.deltaY <= 0 ? 'up' : 'down';\n    var deltaX = event.deltaX,\n        deltaY = event.deltaY,\n        deltaZ = event.deltaZ;\n    var channelPayload = {\n      scrollDir: scrollDir,\n      deltaX: deltaX,\n      deltaY: deltaY,\n      deltaZ: deltaZ\n    };\n    var srcElement = event.srcElement;\n    return {\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      event: event\n    };\n  };\n\n  ChannelWindow.createCurriedGenericEvent = function createCurriedGenericEvent(actionStr) {\n    var action = \"CHANNEL_WINDOW_\" + actionStr.toUpperCase() + \"_EVENT\";\n    var curryFn = R.curry(ChannelWindow.mapGenericEvent);\n    return curryFn(action);\n  };\n\n  ChannelWindow.mapGenericEvent = function mapGenericEvent(actn, event) {\n    console.log(\"map generic event \", actn);\n    var action = actn;\n    var channelPayload = event;\n    var srcElement = event.srcElement;\n    return {\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      event: event\n    };\n  };\n\n  ChannelWindow.getResizeMapFn = function getResizeMapFn(event) {\n    var action = this.channelActions.CHANNEL_WINDOW_RESIZE_EVENT;\n    var channelPayload = R.pick(['innerWidth', 'innerHeight', 'outerWidth', 'outerHeight'], window);\n    var srcElement = event.srcElement;\n    return {\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      event: event\n    };\n  };\n\n  ChannelWindow.getOrientationMapFn = function getOrientationMapFn(event) {\n    var action = this.channelActions.CHANNEL_WINDOW_ORIENTATION_EVENT;\n    var orientationStr = '(orientation: portrait)';\n    var isPortraitBool = window.matchMedia(orientationStr).matches;\n    var channelPayload = R.pick(['innerWidth', 'innerHeight', 'outerWidth', 'outerHeight'], window);\n    channelPayload['orientation'] = isPortraitBool === true ? 'portrait' : 'landscape';\n    var srcElement = event.srcElement;\n    return {\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      event: event\n    };\n  };\n\n  _proto.getMediaQueryMapFn = function getMediaQueryMapFn(event) {\n    var action = this.channelActions.CHANNEL_WINDOW_MEDIA_QUERY_EVENT;\n    var channelPayload = R.pick(['matches', 'media', 'mediaQueryName'], event);\n    var srcElement = event.srcElement;\n    return {\n      action: action,\n      channelPayload: channelPayload,\n      srcElement: srcElement,\n      event: event\n    };\n  };\n\n  _proto.createMouseWheelObservable = function createMouseWheelObservable(config) {\n    var debounceTime = config.debounceMSTimeForScroll;\n    return _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createDomObservableFromEvent('mousewheel', ChannelWindow.getMouseWheelMapFn.bind(this)).debounceTime(debounceTime);\n  };\n\n  _proto.createScrollObservable = function createScrollObservable(config) {\n    var skipWhenDirIsMissing = function skipWhenDirIsMissing(evt) {\n      return evt.scrollDistance === 0;\n    };\n\n    var debounceTime = config.debounceMSTimeForScroll;\n    return _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createDomObservableFromEvent('scroll', ChannelWindow.getScrollMapFn.bind(this)).debounceTime(debounceTime).skipWhile(skipWhenDirIsMissing);\n  };\n\n  _proto.createOrientationObservable = function createOrientationObservable(config) {\n    // console.log(\"add orientation\");orientationchange\n    return _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createDomObservableFromEvent('orientationchange', ChannelWindow.getOrientationMapFn.bind(this));\n  };\n\n  _proto.createResizeObservable = function createResizeObservable(config) {\n    var debounceTime = config.debounceMSTimeForResize; // console.log('resize this ', this);\n\n    return _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createDomObservableFromEvent('resize', ChannelWindow.getResizeMapFn.bind(this)).debounceTime(debounceTime);\n  };\n\n  _proto.getEventsFromConfig = function getEventsFromConfig(config) {\n    if (config === void 0) {\n      config = this.domChannelConfig;\n    }\n\n    var obs$Arr = config.events;\n\n    var addWindowEventToArr = function addWindowEventToArr(str) {\n      var mapFn = ChannelWindow.createCurriedGenericEvent(str);\n      return _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createDomObservableFromEvent(str, mapFn);\n    };\n\n    return R.map(addWindowEventToArr, obs$Arr);\n  };\n\n  _proto.getActiveObservables = function getActiveObservables(config) {\n    if (config === void 0) {\n      config = this.domChannelConfig;\n    }\n\n    var obs$Arr = []; // CHECK TO ADD MEDIA QUERY OBSERVABLE\n    // ==========================================\n\n    config['listenForMediaQueries'] = Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_1__[\"checkIfObjIsNotEmptyOrNil\"])(config.mediqQueries); // =========================================\n    // config.listenForResize = false;\n    // config.listenForMouseWheel = true;\n    // config.listenForScroll = false;\n\n    var methods = {\n      'listenForResize': this.createResizeObservable.bind(this),\n      'listenForOrientation': this.createOrientationObservable.bind(this),\n      'listenForScroll': this.createScrollObservable.bind(this),\n      'listenForMouseWheel': this.createMouseWheelObservable.bind(this)\n    };\n\n    var addObservableToArr = function addObservableToArr(method, key, i) {\n      var addObsBool = config[key];\n\n      if (addObsBool) {\n        obs$Arr.push(method(config));\n      } else {}\n    };\n\n    R.mapObjIndexed(addObservableToArr, methods); // 'listenForMediaQueries' : this.getMediaQueryObservable.bind(this)\n\n    this.checkForMediaQueries(config.listenForMediaQueries);\n    var eventsArr = this.getEventsFromConfig(config);\n    obs$Arr = obs$Arr.concat(eventsArr);\n    return obs$Arr;\n  };\n\n  _proto.checkForMediaQueries = function checkForMediaQueries(bool) {\n    var _this3 = this;\n\n    var sendMQStream = function sendMQStream(p) {\n      var action = p.action,\n          channelPayload = p.channelPayload,\n          srcElement = p.srcElement,\n          event = p.event;\n\n      _this3.sendStreamItem(action, channelPayload, srcElement, event, _this3.observer$);\n    };\n\n    if (bool === true) {\n      this.getMediaQueryObservable(this.domChannelConfig).subscribe(sendMQStream);\n    }\n  };\n\n  _proto.getMediaQueryObservable = function getMediaQueryObservable(config) {\n    var _Rx$Observable2;\n\n    var arr = this.createMergedObsFromObj(config);\n    return (_Rx$Observable2 = Rx.Observable).merge.apply(_Rx$Observable2, arr).map(this.getMediaQueryMapFn.bind(this));\n  };\n\n  _proto.addRegisteredActions = function addRegisteredActions() {\n    return ['CHANNEL_WINDOW_SCROLL_EVENT', 'CHANNEL_WINDOW_MOUSEWHEEL_EVENT', 'CHANNEL_WINDOW_MEDIA_QUERY_EVENT', 'CHANNEL_WINDOW_RESIZE_EVENT', 'CHANNEL_WINDOW_ORIENTATION_EVENT', 'CHANNEL_WINDOW_CACHED_EVENT', 'CHANNEL_WINDOW_ERROR_EVENT', 'CHANNEL_WINDOW_ABORT_EVENT', 'CHANNEL_WINDOW_LOAD_EVENT', 'CHANNEL_WINDOW_BEFOREUNLOAD_EVENT', 'CHANNEL_WINDOW_UNLOAD_EVENT', 'CHANNEL_WINDOW_ONLINE_EVENT', 'CHANNEL_WINDOW_OFFLINE_EVENT', 'CHANNEL_WINDOW_FOCUS_EVENT', 'CHANNEL_WINDOW_BLUR_EVENT', 'CHANNEL_WINDOW_OPEN_EVENT', 'CHANNEL_WINDOW_MESSAGE_EVENT', 'CHANNEL_WINDOW_ERROR_EVENT', 'CHANNEL_WINDOW_CLOSE_EVENT', 'CHANNEL_WINDOW_PAGEHIDE_EVENT', 'CHANNEL_WINDOW_PAGESHOW_EVENT', 'CHANNEL_WINDOW_POPSTATE_EVENT', 'CHANNEL_WINDOW_ANIMATIONSTART_EVENT', 'CHANNEL_WINDOW_ANIMATIONEND_EVENT', 'CHANNEL_WINDOW_ANIMATIONITERATION_EVENT', 'CHANNEL_WINDOW_TRANSITIONSTART_EVENT', 'CHANNEL_WINDOW_TRANSITIONCANCEL_EVENT', 'CHANNEL_WINDOW_TRANSITIONEND_EVENT', 'CHANNEL_WINDOW_TRANSITIONRUN_EVENT', 'CHANNEL_WINDOW_RESET_EVENT', 'CHANNEL_WINDOW_SUBMIT_EVENT', 'CHANNEL_WINDOW_BEFOREPRINT_EVENT', 'CHANNEL_WINDOW_AFTERPRINT_EVENT', 'CHANNEL_WINDOW_COMPOSITIONSTART_EVENT', 'CHANNEL_WINDOW_COMPOSITIONUPDATE_EVENT', 'CHANNEL_WINDOW_COMPOSITIONEND_EVENT', 'CHANNEL_WINDOW_FULLSCREENCHANGE_EVENT', 'CHANNEL_WINDOW_FULLSCREENERROR_EVENT', 'CHANNEL_WINDOW_CUT_EVENT', 'CHANNEL_WINDOW_COPY_EVENT'];\n  };\n\n  _proto.bindStaticMethods = function bindStaticMethods() {\n    this.createMediaQueryHandler = _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createMediaQueryHandler.bind(this);\n    this.createMergedObsFromObj = _utils_channel_util_dom__WEBPACK_IMPORTED_MODULE_2__[\"ChannelUtilsDom\"].createMergedObsFromObj.bind(this);\n  };\n\n  return ChannelWindow;\n}(_channels_channels_base__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsBase\"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/channels/channel-window.js\n")},"./src/spyne/channels/channels-base-controller.js":
/*!********************************************************!*\
  !*** ./src/spyne/channels/channels-base-controller.js ***!
  \********************************************************/
/*! exports provided: ChannelsBaseController */function srcSpyneChannelsChannelsBaseControllerJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChannelsBaseController", function() { return ChannelsBaseController; });\n/* harmony import */ var _channel_route__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel-route */ "./src/spyne/channels/channel-route.js");\n/* harmony import */ var _channel_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./channel-ui */ "./src/spyne/channels/channel-ui.js");\n/* harmony import */ var _channel_window__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./channel-window */ "./src/spyne/channels/channel-window.js");\n/* harmony import */ var _utils_channel_config_validator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/channel-config-validator */ "./src/spyne/utils/channel-config-validator.js");\n// import {baseCoreMixins}    from \'../utils/mixins/base-core-mixins\';\n// import {BaseStreamsMixins} from \'../utils/mixins/base-streams-mixins\';\n\n\n\n\n\nvar Rx = __webpack_require__(/*! rxjs */ "rxjs"); // const R = require(\'ramda\');\n\n\nvar ChannelsBaseController =\n/*#__PURE__*/\nfunction () {\n  function ChannelsBaseController(obs$) {\n    this.addMixins();\n    this.map = new Map(); // console.log(\'RX IS \', Rx.Subject);\n\n    this.map.set(\'DISPATCHER\', new Rx.Subject());\n  }\n\n  var _proto = ChannelsBaseController.prototype;\n\n  _proto.init = function init() {\n    this.createMainStreams();\n  };\n\n  _proto.createObserver = function createObserver(obj) {\n    // RIGHT NOW THIS CREATES THE DISPATCHER STREAM\n    Object(_utils_channel_config_validator__WEBPACK_IMPORTED_MODULE_3__["validate"])(obj.validations, obj.init);\n    this.map.set(obj.init.name, obj.init.observable());\n  };\n\n  _proto.createMainStreams = function createMainStreams() {\n    this.routeValueeam = new _channel_route__WEBPACK_IMPORTED_MODULE_0__["ChannelRoute"]();\n    this.map.set(\'ROUTE\', this.routeValueeam);\n    this.uiStream = new _channel_ui__WEBPACK_IMPORTED_MODULE_1__["ChannelUI"]();\n    this.map.set(\'UI\', this.uiStream);\n    this.domStream = new _channel_window__WEBPACK_IMPORTED_MODULE_2__["ChannelWindow"]();\n    this.map.set(\'WINDOW\', this.domStream);\n    this.routeValueeam.initializeStream();\n    this.domStream.initializeStream();\n  };\n\n  _proto.addKeyEvent = function addKeyEvent(key) {\n    this.map.get(\'UI\').addKeyEvent(key);\n  };\n\n  _proto.registerStream = function registerStream(name, val) {\n    this.map.set(name, val);\n    val.initializeStream();\n  };\n\n  _proto.getChannelActions = function getChannelActions(str) {\n    return this.map.get(str).addRegisteredActions();\n  };\n\n  _proto.getStream = function getStream(name) {\n    if (this.map.get(name) === undefined) {\n      console.warn("Spyne Warning: The Channel named \\"" + name + "\\" does not appear to be registered!");\n    } else {\n      return this.map.get(name);\n    }\n  };\n\n  _proto.addMixins = function addMixins() {//  ==================================\n    // BASE CORE DECORATORS\n    //  ==================================\n    // let coreMixins =  baseCoreMixins();\n    //  ==================================\n    // BASE STREAMS DECORATORS\n    //  ==================================\n    // let streamsMixins = BaseStreamsMixins();\n  };\n\n  return ChannelsBaseController;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS9jaGFubmVscy9jaGFubmVscy1iYXNlLWNvbnRyb2xsZXIuanM/MTUxOCJdLCJuYW1lcyI6WyJSeCIsInJlcXVpcmUiLCJDaGFubmVsc0Jhc2VDb250cm9sbGVyIiwib2JzJCIsImFkZE1peGlucyIsIm1hcCIsIk1hcCIsInNldCIsIlN1YmplY3QiLCJpbml0IiwiY3JlYXRlTWFpblN0cmVhbXMiLCJjcmVhdGVPYnNlcnZlciIsIm9iaiIsInZhbGlkYXRlIiwidmFsaWRhdGlvbnMiLCJuYW1lIiwib2JzZXJ2YWJsZSIsInJvdXRlVmFsdWVlYW0iLCJ1aVN0cmVhbSIsImRvbVN0cmVhbSIsImluaXRpYWxpemVTdHJlYW0iLCJhZGRLZXlFdmVudCIsImtleSIsImdldCIsInJlZ2lzdGVyU3RyZWFtIiwidmFsIiwiZ2V0Q2hhbm5lbEFjdGlvbnMiLCJzdHIiLCJhZGRSZWdpc3RlcmVkQWN0aW9ucyIsImdldFN0cmVhbSIsInVuZGVmaW5lZCIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQU1BLEtBQUssbUJBQUFDLENBQVEsa0JBQVIsQ0FBWCxDLENBRUE7OztBQUVBLElBQWFDLHNCQUFiO0FBQUE7QUFBQTtBQUNFLGtDQUFZQyxJQUFaLEVBQWtCO0FBQ2hCLFNBQUtDLFNBQUw7QUFDQSxTQUFLQyxHQUFMLEdBQVcsSUFBSUMsR0FBSixFQUFYLENBRmdCLENBR2hCOztBQUNBLFNBQUtELEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFlBQWIsRUFBMkIsSUFBSVAsR0FBR1EsT0FBUCxFQUEzQjtBQUNEOztBQU5IOztBQUFBLFNBUUVDLElBUkYsbUJBUVM7QUFDTCxTQUFLQyxpQkFBTDtBQUNELEdBVkg7O0FBQUEsU0FZRUMsY0FaRiwyQkFZaUJDLEdBWmpCLEVBWXNCO0FBQ2xCO0FBQ0FDLElBQUEsZ0ZBQUFBLENBQVNELElBQUlFLFdBQWIsRUFBMEJGLElBQUlILElBQTlCO0FBQ0EsU0FBS0osR0FBTCxDQUFTRSxHQUFULENBQWFLLElBQUlILElBQUosQ0FBU00sSUFBdEIsRUFBNEJILElBQUlILElBQUosQ0FBU08sVUFBVCxFQUE1QjtBQUNELEdBaEJIOztBQUFBLFNBa0JFTixpQkFsQkYsZ0NBa0JzQjtBQUNsQixTQUFLTyxhQUFMLEdBQXFCLElBQUksMkRBQUosRUFBckI7QUFDQSxTQUFLWixHQUFMLENBQVNFLEdBQVQsQ0FBYSxPQUFiLEVBQXNCLEtBQUtVLGFBQTNCO0FBRUEsU0FBS0MsUUFBTCxHQUFnQixJQUFJLHFEQUFKLEVBQWhCO0FBQ0EsU0FBS2IsR0FBTCxDQUFTRSxHQUFULENBQWEsSUFBYixFQUFtQixLQUFLVyxRQUF4QjtBQUVBLFNBQUtDLFNBQUwsR0FBaUIsSUFBSSw2REFBSixFQUFqQjtBQUNBLFNBQUtkLEdBQUwsQ0FBU0UsR0FBVCxDQUFhLFFBQWIsRUFBdUIsS0FBS1ksU0FBNUI7QUFDQSxTQUFLRixhQUFMLENBQW1CRyxnQkFBbkI7QUFDQSxTQUFLRCxTQUFMLENBQWVDLGdCQUFmO0FBQ0QsR0E3Qkg7O0FBQUEsU0ErQkVDLFdBL0JGLHdCQStCY0MsR0EvQmQsRUErQm1CO0FBQ2YsU0FBS2pCLEdBQUwsQ0FBU2tCLEdBQVQsQ0FBYSxJQUFiLEVBQW1CRixXQUFuQixDQUErQkMsR0FBL0I7QUFDRCxHQWpDSDs7QUFBQSxTQW1DRUUsY0FuQ0YsMkJBbUNpQlQsSUFuQ2pCLEVBbUN1QlUsR0FuQ3ZCLEVBbUM0QjtBQUN4QixTQUFLcEIsR0FBTCxDQUFTRSxHQUFULENBQWFRLElBQWIsRUFBbUJVLEdBQW5CO0FBQ0FBLFFBQUlMLGdCQUFKO0FBQ0QsR0F0Q0g7O0FBQUEsU0F3Q0VNLGlCQXhDRiw4QkF3Q29CQyxHQXhDcEIsRUF3Q3lCO0FBQ3JCLFdBQU8sS0FBS3RCLEdBQUwsQ0FBU2tCLEdBQVQsQ0FBYUksR0FBYixFQUFrQkMsb0JBQWxCLEVBQVA7QUFDRCxHQTFDSDs7QUFBQSxTQTRDRUMsU0E1Q0Ysc0JBNENZZCxJQTVDWixFQTRDa0I7QUFDZCxRQUFJLEtBQUtWLEdBQUwsQ0FBU2tCLEdBQVQsQ0FBYVIsSUFBYixNQUF1QmUsU0FBM0IsRUFBc0M7QUFDcENDLGNBQVFDLElBQVIseUNBQ3VDakIsSUFEdkM7QUFFRCxLQUhELE1BR087QUFDTCxhQUFPLEtBQUtWLEdBQUwsQ0FBU2tCLEdBQVQsQ0FBYVIsSUFBYixDQUFQO0FBQ0Q7QUFDRixHQW5ESDs7QUFBQSxTQXFERVgsU0FyREYsd0JBcURjLENBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNELEdBOURIOztBQUFBO0FBQUEiLCJmaWxlIjoiLi9zcmMvc3B5bmUvY2hhbm5lbHMvY2hhbm5lbHMtYmFzZS1jb250cm9sbGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHtiYXNlQ29yZU1peGluc30gICAgZnJvbSAnLi4vdXRpbHMvbWl4aW5zL2Jhc2UtY29yZS1taXhpbnMnO1xuLy8gaW1wb3J0IHtCYXNlU3RyZWFtc01peGluc30gZnJvbSAnLi4vdXRpbHMvbWl4aW5zL2Jhc2Utc3RyZWFtcy1taXhpbnMnO1xuaW1wb3J0IHtDaGFubmVsUm91dGV9IGZyb20gJy4vY2hhbm5lbC1yb3V0ZSc7XG5pbXBvcnQge0NoYW5uZWxVSX0gZnJvbSAnLi9jaGFubmVsLXVpJztcbmltcG9ydCB7Q2hhbm5lbFdpbmRvd30gZnJvbSAnLi9jaGFubmVsLXdpbmRvdyc7XG5pbXBvcnQge3ZhbGlkYXRlfSBmcm9tICcuLi91dGlscy9jaGFubmVsLWNvbmZpZy12YWxpZGF0b3InO1xuXG5jb25zdCBSeCA9IHJlcXVpcmUoJ3J4anMnKTtcblxuLy8gY29uc3QgUiA9IHJlcXVpcmUoJ3JhbWRhJyk7XG5cbmV4cG9ydCBjbGFzcyBDaGFubmVsc0Jhc2VDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3Iob2JzJCkge1xuICAgIHRoaXMuYWRkTWl4aW5zKCk7XG4gICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgLy8gY29uc29sZS5sb2coJ1JYIElTICcsIFJ4LlN1YmplY3QpO1xuICAgIHRoaXMubWFwLnNldCgnRElTUEFUQ0hFUicsIG5ldyBSeC5TdWJqZWN0KCkpO1xuICB9XG5cbiAgaW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZU1haW5TdHJlYW1zKCk7XG4gIH1cblxuICBjcmVhdGVPYnNlcnZlcihvYmopIHtcbiAgICAvLyBSSUdIVCBOT1cgVEhJUyBDUkVBVEVTIFRIRSBESVNQQVRDSEVSIFNUUkVBTVxuICAgIHZhbGlkYXRlKG9iai52YWxpZGF0aW9ucywgb2JqLmluaXQpO1xuICAgIHRoaXMubWFwLnNldChvYmouaW5pdC5uYW1lLCBvYmouaW5pdC5vYnNlcnZhYmxlKCkpO1xuICB9XG5cbiAgY3JlYXRlTWFpblN0cmVhbXMoKSB7XG4gICAgdGhpcy5yb3V0ZVZhbHVlZWFtID0gbmV3IENoYW5uZWxSb3V0ZSgpO1xuICAgIHRoaXMubWFwLnNldCgnUk9VVEUnLCB0aGlzLnJvdXRlVmFsdWVlYW0pO1xuXG4gICAgdGhpcy51aVN0cmVhbSA9IG5ldyBDaGFubmVsVUkoKTtcbiAgICB0aGlzLm1hcC5zZXQoJ1VJJywgdGhpcy51aVN0cmVhbSk7XG5cbiAgICB0aGlzLmRvbVN0cmVhbSA9IG5ldyBDaGFubmVsV2luZG93KCk7XG4gICAgdGhpcy5tYXAuc2V0KCdXSU5ET1cnLCB0aGlzLmRvbVN0cmVhbSk7XG4gICAgdGhpcy5yb3V0ZVZhbHVlZWFtLmluaXRpYWxpemVTdHJlYW0oKTtcbiAgICB0aGlzLmRvbVN0cmVhbS5pbml0aWFsaXplU3RyZWFtKCk7XG4gIH1cblxuICBhZGRLZXlFdmVudChrZXkpIHtcbiAgICB0aGlzLm1hcC5nZXQoJ1VJJykuYWRkS2V5RXZlbnQoa2V5KTtcbiAgfVxuXG4gIHJlZ2lzdGVyU3RyZWFtKG5hbWUsIHZhbCkge1xuICAgIHRoaXMubWFwLnNldChuYW1lLCB2YWwpO1xuICAgIHZhbC5pbml0aWFsaXplU3RyZWFtKCk7XG4gIH1cblxuICBnZXRDaGFubmVsQWN0aW9ucyhzdHIpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KHN0cikuYWRkUmVnaXN0ZXJlZEFjdGlvbnMoKTtcbiAgfVxuXG4gIGdldFN0cmVhbShuYW1lKSB7XG4gICAgaWYgKHRoaXMubWFwLmdldChuYW1lKSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBTcHluZSBXYXJuaW5nOiBUaGUgQ2hhbm5lbCBuYW1lZCBcIiR7bmFtZX1cIiBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgcmVnaXN0ZXJlZCFgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChuYW1lKTtcbiAgICB9XG4gIH1cblxuICBhZGRNaXhpbnMoKSB7XG4gICAgLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBCQVNFIENPUkUgREVDT1JBVE9SU1xuICAgIC8vICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gbGV0IGNvcmVNaXhpbnMgPSAgYmFzZUNvcmVNaXhpbnMoKTtcbiAgICAvLyAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIEJBU0UgU1RSRUFNUyBERUNPUkFUT1JTXG4gICAgLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBsZXQgc3RyZWFtc01peGlucyA9IEJhc2VTdHJlYW1zTWl4aW5zKCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/spyne/channels/channels-base-controller.js\n')},"./src/spyne/channels/channels-base-data.js":
/*!**************************************************!*\
  !*** ./src/spyne/channels/channels-base-data.js ***!
  \**************************************************/
/*! exports provided: ChannelsBaseData */function srcSpyneChannelsChannelsBaseDataJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChannelsBaseData", function() { return ChannelsBaseData; });\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "rxjs");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _channels_base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./channels-base */ "./src/spyne/channels/channels-base.js");\n/* harmony import */ var _channel_stream_item__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./channel-stream-item */ "./src/spyne/channels/channel-stream-item.js");\n/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! whatwg-fetch */ "./node_modules/whatwg-fetch/fetch.js");\n/* harmony import */ var whatwg_fetch__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(whatwg_fetch__WEBPACK_IMPORTED_MODULE_3__);\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n\n\n\n // const R = require(\'ramda\');\n\nvar ChannelsBaseData =\n/*#__PURE__*/\nfunction (_ChannelsBase) {\n  _inheritsLoose(ChannelsBaseData, _ChannelsBase);\n\n  function ChannelsBaseData(props) {\n    var _this;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    _this = _ChannelsBase.call(this, props) || this;\n    _this.props = props;\n    _this.observer$ = new rxjs__WEBPACK_IMPORTED_MODULE_0___default.a.AsyncSubject();\n\n    _this.fetchData();\n\n    return _this;\n  }\n\n  var _proto = ChannelsBaseData.prototype;\n\n  _proto.addRegisteredActions = function addRegisteredActions() {\n    return [\'CHANNEL_DATA_EVENT\'];\n  };\n\n  _proto.fetchData = function fetchData() {\n    var _this2 = this;\n\n    var mapFn = this.props.map !== undefined ? this.props.map : function (p) {\n      return p;\n    };\n\n    var createChannelStreamItem = function createChannelStreamItem(payload) {\n      var action = \'CHANNEL_DATA_EVENT\';\n      return new _channel_stream_item__WEBPACK_IMPORTED_MODULE_2__["ChannelStreamItem"](_this2.props.name, action, payload);\n    };\n\n    var response$ = rxjs__WEBPACK_IMPORTED_MODULE_0___default.a.Observable.fromPromise(window.fetch(this.props.dataUrl)).flatMap(function (r) {\n      return rxjs__WEBPACK_IMPORTED_MODULE_0___default.a.Observable.fromPromise(r.json());\n    }).map(mapFn).map(createChannelStreamItem).multicast(this.observer$);\n    response$.connect();\n  };\n\n  _createClass(ChannelsBaseData, [{\n    key: "observer",\n    get: function get() {\n      return this.observer$;\n    }\n  }]);\n\n  return ChannelsBaseData;\n}(_channels_base__WEBPACK_IMPORTED_MODULE_1__["ChannelsBase"]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS9jaGFubmVscy9jaGFubmVscy1iYXNlLWRhdGEuanM/MTM1MSJdLCJuYW1lcyI6WyJDaGFubmVsc0Jhc2VEYXRhIiwicHJvcHMiLCJvYnNlcnZlciQiLCJSeCIsIkFzeW5jU3ViamVjdCIsImZldGNoRGF0YSIsImFkZFJlZ2lzdGVyZWRBY3Rpb25zIiwibWFwRm4iLCJtYXAiLCJ1bmRlZmluZWQiLCJwIiwiY3JlYXRlQ2hhbm5lbFN0cmVhbUl0ZW0iLCJwYXlsb2FkIiwiYWN0aW9uIiwibmFtZSIsInJlc3BvbnNlJCIsIk9ic2VydmFibGUiLCJmcm9tUHJvbWlzZSIsIndpbmRvdyIsImZldGNoIiwiZGF0YVVybCIsImZsYXRNYXAiLCJyIiwianNvbiIsIm11bHRpY2FzdCIsImNvbm5lY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0NBRUE7O0FBRUEsSUFBYUEsZ0JBQWI7QUFBQTtBQUFBO0FBQUE7O0FBQ0UsNEJBQVlDLEtBQVosRUFBd0I7QUFBQTs7QUFBQSxRQUFaQSxLQUFZO0FBQVpBLFdBQVksR0FBSixFQUFJO0FBQUE7O0FBQ3RCLHFDQUFNQSxLQUFOO0FBQ0EsVUFBS0EsS0FBTCxHQUFhQSxLQUFiO0FBQ0EsVUFBS0MsU0FBTCxHQUFpQixJQUFJLDJDQUFBQyxDQUFHQyxZQUFQLEVBQWpCOztBQUNBLFVBQUtDLFNBQUw7O0FBSnNCO0FBS3ZCOztBQU5IOztBQUFBLFNBV0VDLG9CQVhGLG1DQVd5QjtBQUNyQixXQUFPLENBQ0wsb0JBREssQ0FBUDtBQUdELEdBZkg7O0FBQUEsU0FpQkVELFNBakJGLHdCQWlCYztBQUFBOztBQUNWLFFBQU1FLFFBQVEsS0FBS04sS0FBTCxDQUFXTyxHQUFYLEtBQW1CQyxTQUFuQixHQUErQixLQUFLUixLQUFMLENBQVdPLEdBQTFDLEdBQWdELFVBQUNFLENBQUQ7QUFBQSxhQUFPQSxDQUFQO0FBQUEsS0FBOUQ7O0FBRUEsUUFBTUMsMEJBQTBCLFNBQTFCQSx1QkFBMEIsQ0FBQ0MsT0FBRCxFQUFhO0FBQzNDLFVBQUlDLFNBQVMsb0JBQWI7QUFDQSxhQUFPLElBQUksc0VBQUosQ0FBc0IsT0FBS1osS0FBTCxDQUFXYSxJQUFqQyxFQUF1Q0QsTUFBdkMsRUFBK0NELE9BQS9DLENBQVA7QUFDRCxLQUhEOztBQUtBLFFBQUlHLFlBQVksMkNBQUFaLENBQUdhLFVBQUgsQ0FBY0MsV0FBZCxDQUEwQkMsT0FBT0MsS0FBUCxDQUFhLEtBQUtsQixLQUFMLENBQVdtQixPQUF4QixDQUExQixFQUNiQyxPQURhLENBQ0w7QUFBQSxhQUFLLDJDQUFBbEIsQ0FBR2EsVUFBSCxDQUFjQyxXQUFkLENBQTBCSyxFQUFFQyxJQUFGLEVBQTFCLENBQUw7QUFBQSxLQURLLEVBRWJmLEdBRmEsQ0FFVEQsS0FGUyxFQUdiQyxHQUhhLENBR1RHLHVCQUhTLEVBSWJhLFNBSmEsQ0FJSCxLQUFLdEIsU0FKRixDQUFoQjtBQU1BYSxjQUFVVSxPQUFWO0FBQ0QsR0FoQ0g7O0FBQUE7QUFBQTtBQUFBLHdCQU9pQjtBQUNiLGFBQU8sS0FBS3ZCLFNBQVo7QUFDRDtBQVRIOztBQUFBO0FBQUEsRUFBc0MsMkRBQXRDIiwiZmlsZSI6Ii4vc3JjL3NweW5lL2NoYW5uZWxzL2NoYW5uZWxzLWJhc2UtZGF0YS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSeCBmcm9tICdyeGpzJztcbmltcG9ydCB7Q2hhbm5lbHNCYXNlfSBmcm9tICcuL2NoYW5uZWxzLWJhc2UnO1xuaW1wb3J0IHtDaGFubmVsU3RyZWFtSXRlbX0gZnJvbSAnLi9jaGFubmVsLXN0cmVhbS1pdGVtJztcbmltcG9ydCAgJ3doYXR3Zy1mZXRjaCc7XG4vLyBjb25zdCBSID0gcmVxdWlyZSgncmFtZGEnKTtcblxuZXhwb3J0IGNsYXNzIENoYW5uZWxzQmFzZURhdGEgZXh0ZW5kcyBDaGFubmVsc0Jhc2Uge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLm9ic2VydmVyJCA9IG5ldyBSeC5Bc3luY1N1YmplY3QoKTtcbiAgICB0aGlzLmZldGNoRGF0YSgpO1xuICB9XG4gIGdldCBvYnNlcnZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5vYnNlcnZlciQ7XG4gIH1cblxuICBhZGRSZWdpc3RlcmVkQWN0aW9ucygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgJ0NIQU5ORUxfREFUQV9FVkVOVCdcbiAgICBdO1xuICB9XG5cbiAgZmV0Y2hEYXRhKCkge1xuICAgIGNvbnN0IG1hcEZuID0gdGhpcy5wcm9wcy5tYXAgIT09IHVuZGVmaW5lZCA/IHRoaXMucHJvcHMubWFwIDogKHApID0+IHA7XG5cbiAgICBjb25zdCBjcmVhdGVDaGFubmVsU3RyZWFtSXRlbSA9IChwYXlsb2FkKSA9PiB7XG4gICAgICBsZXQgYWN0aW9uID0gJ0NIQU5ORUxfREFUQV9FVkVOVCc7XG4gICAgICByZXR1cm4gbmV3IENoYW5uZWxTdHJlYW1JdGVtKHRoaXMucHJvcHMubmFtZSwgYWN0aW9uLCBwYXlsb2FkKTtcbiAgICB9O1xuXG4gICAgbGV0IHJlc3BvbnNlJCA9IFJ4Lk9ic2VydmFibGUuZnJvbVByb21pc2Uod2luZG93LmZldGNoKHRoaXMucHJvcHMuZGF0YVVybCkpXG4gICAgICAuZmxhdE1hcChyID0+IFJ4Lk9ic2VydmFibGUuZnJvbVByb21pc2Uoci5qc29uKCkpKVxuICAgICAgLm1hcChtYXBGbilcbiAgICAgIC5tYXAoY3JlYXRlQ2hhbm5lbFN0cmVhbUl0ZW0pXG4gICAgICAubXVsdGljYXN0KHRoaXMub2JzZXJ2ZXIkKTtcblxuICAgIHJlc3BvbnNlJC5jb25uZWN0KCk7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/spyne/channels/channels-base-data.js\n')},"./src/spyne/channels/channels-base.js":
/*!*********************************************!*\
  !*** ./src/spyne/channels/channels-base.js ***!
  \*********************************************/
/*! exports provided: ChannelsBase */function srcSpyneChannelsChannelsBaseJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChannelsBase", function() { return ChannelsBase; });\n/* harmony import */ var _channels_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channels-config */ "./src/spyne/channels/channels-config.js");\n/* harmony import */ var _channel_stream_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./channel-stream-item */ "./src/spyne/channels/channel-stream-item.js");\n/* harmony import */ var _utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/deep-merge */ "./src/spyne/utils/deep-merge.js");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n // import {baseCoreMixins}    from \'../utils/mixins/base-core-mixins\';\n// import {BaseStreamsMixins} from \'../utils/mixins/base-streams-mixins\';\n\nvar Rx = __webpack_require__(/*! rxjs */ "rxjs");\n\nvar R = __webpack_require__(/*! ramda */ "ramda");\n\nvar ChannelsBase =\n/*#__PURE__*/\nfunction () {\n  function ChannelsBase(props) {\n    var _this = this;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.addMixins();\n    this.addRegisteredActions.bind(this);\n    this.createChannelActionsObj();\n    var defaultName = {\n      name: \'observer\'\n    };\n    var observer$ = new Rx.Subject(); // this.props = Object.assign({}, defaultName, props);\n\n    this.props = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__["deepMerge"])(defaultName, props);\n    this.observer$ = this.props[\'observer\'] = observer$;\n    this.streamsController = window.Spyne.channels; // getGlobalParam(\'streamsController\');\n\n    var dispatcherStream$ = this.streamsController.getStream(\'DISPATCHER\');\n    dispatcherStream$.subscribe(function (val) {\n      return _this.onIncomingObservable(val);\n    });\n  }\n\n  var _proto = ChannelsBase.prototype;\n\n  _proto.initializeStream = function initializeStream() {};\n\n  _proto.setTrace = function setTrace(bool) {};\n\n  _proto.createChannelActionsObj = function createChannelActionsObj() {\n    var arr = this.addRegisteredActions();\n\n    var converter = function converter(str) {\n      return R.objOf(str, str);\n    };\n\n    var obj = R.mergeAll(R.chain(converter, arr));\n    this.channelActions = obj;\n  };\n\n  _proto.addRegisteredActions = function addRegisteredActions() {\n    return [];\n  };\n\n  _proto.onIncomingObservable = function onIncomingObservable(obj) {\n    var _this2 = this;\n\n    var eqsName = R.equals(obj.name, this.props.name);\n\n    var dataObj = function dataObj(obsVal) {\n      return {\n        observableData: obj.data,\n        observableEvent: obsVal\n      };\n    };\n\n    var onSuccess = function onSuccess(obj) {\n      return obj.observable.map(dataObj).subscribe(_this2.onIncomingObserverableData.bind(_this2));\n    };\n\n    var onError = function onError() {};\n\n    return eqsName === true ? onSuccess(obj) : onError();\n  };\n\n  _proto.onIncomingObserverableData = function onIncomingObserverableData(obj) {};\n\n  _proto.sendStreamItem = function sendStreamItem(action, payload, srcElement, event, obs$) {\n    if (obs$ === void 0) {\n      obs$ = this.observer$;\n    }\n\n    // MAKES ALL CHANNEL BASE AND DATA STREAMS CONSISTENT\n    var channelStreamItem = new _channel_stream_item__WEBPACK_IMPORTED_MODULE_1__["ChannelStreamItem"](this.props.name, action, payload, srcElement, event);\n    obs$.next(Object.freeze(channelStreamItem));\n  };\n\n  _proto.getChannel = function getChannel(channel) {\n    var _this3 = this;\n\n    var isValidChannel = function isValidChannel(c) {\n      return Object(_channels_config__WEBPACK_IMPORTED_MODULE_0__["registeredStreamNames"])().includes(c);\n    };\n\n    var error = function error(c) {\n      return console.warn("channel name " + c + " is not within " + _channels_config__WEBPACK_IMPORTED_MODULE_0__["registeredStreamNames"]);\n    };\n\n    var startSubscribe = function startSubscribe(c) {\n      return _this3.streamsController.getStream(c).observer;\n    };\n\n    var fn = R.ifElse(isValidChannel, startSubscribe, error);\n    return fn(channel);\n  };\n\n  _proto.addMixins = function addMixins() {//  ==================================\n    // BASE CORE DECORATORS\n    //  ==================================\n    // let coreMixins =  baseCoreMixins();\n    //  ==================================\n    // BASE STREAMS DECORATORS\n    //  ==================================\n    // let streamsMixins = BaseStreamsMixins();\n    // let testFunc = streamsMixins.testFunc;\n  };\n\n  _createClass(ChannelsBase, [{\n    key: "observer",\n    get: function get() {\n      return this.observer$;\n    }\n  }]);\n\n  return ChannelsBase;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/channels/channels-base.js\n')},"./src/spyne/channels/channels-config.js":
/*!***********************************************!*\
  !*** ./src/spyne/channels/channels-config.js ***!
  \***********************************************/
/*! exports provided: stepDisposeValidations, stepUpdateValidations, stepValidations, uiValidations, routeValidations, lifestreamValidations, registeredStreamNames, StreamsConfig */function srcSpyneChannelsChannelsConfigJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stepDisposeValidations\", function() { return stepDisposeValidations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stepUpdateValidations\", function() { return stepUpdateValidations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stepValidations\", function() { return stepValidations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"uiValidations\", function() { return uiValidations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"routeValidations\", function() { return routeValidations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lifestreamValidations\", function() { return lifestreamValidations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"registeredStreamNames\", function() { return registeredStreamNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StreamsConfig\", function() { return StreamsConfig; });\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/frp-tools */ \"./src/spyne/utils/frp-tools.js\");\n// import Spyne from '../spyne';\n\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar registeredStreamNames = function registeredStreamNames() {\n  return {\n    includes: function includes() {\n      return window.Spyne !== undefined ? Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_0__[\"arrFromMapKeys\"])(window.Spyne.channels.map) : ['ROUTE', 'UI', 'WINDOW', 'DISPATCHER'];\n    }\n  };\n}; // getGlobalObj().channelsListArr;\n\n\nvar registeredSteps = ['LOAD', 'RENDER', 'MOUNT', 'UNMOUNT', 'DISPOSE', 'GARBAGE_COLLECT', 'UPDATE'];\nvar registeredLifeStreamTypes = ['parent', 'self', 'child', 'children', 'view'];\nvar registeredStreamTypes = ['Observable', 'BehaviorSubject', 'Subject', 'Observer', 'Subscriber', 'FromEventObservable'];\nvar registeredActions = ['subscribe', 'combineLatest'];\n\nvar getRxType = function getRxType(obs) {\n  return obs().constructor.name;\n}; // let getObservableType = (obs) => obs.constructor.name;\n\n\nvar confirmObservable = function confirmObservable(obs) {\n  return obs.subscribe !== undefined;\n}; // let pullMainRoute = (str) => str.replace(/^(\\/?)(.*)(\\/)(.*)/g, '$2');\n//  ===========================================================================\n// ALL VALIDATIONS ADD THE BASE VALIDATIONS THROUGH CONCATENATION\n//  ===========================================================================\n\n\nvar baseValidations = [{\n  error: \"need to match a valid name within \" + registeredStreamTypes,\n  predicate: function predicate(payload) {\n    return registeredStreamNames().includes(payload.name);\n  }\n}, {\n  error: \"param 'observable' must contain a valid Rx.Observable\",\n  // predicate: payload => registeredStreamTypes.includes(getObservableType(payload.observable))\n  predicate: function predicate(payload) {\n    return confirmObservable(payload.observable);\n  }\n}, {\n  error: 'param action must be a registered action',\n  predicate: function predicate(payload) {\n    return registeredActions.includes(payload.action);\n  }\n}]; //  ===========================================================================\n// THESE VALIDATIONS ARE CONCATENATED WHEN THE OBSERVABLE REFERS TO A VIEW\n//  ===========================================================================\n\nvar viewInfoValidations = [{\n  error: 'needs cid number in srcElement',\n  predicate: R.compose(R.is(String), R.path(['data', 'srcElement', 'cid']))\n}, {\n  error: 'needs a viewName in srcElement',\n  predicate: R.compose(R.is(String), R.path(['data', 'srcElement', 'viewName']))\n}]; //  ===========================================================================\n// NO SPECIFIC UI VALIDATIONS AT THIS TIME -- IT JUST ADD OTHERS\n//  ===========================================================================\n\nvar uiValidations = function uiValidations() {\n  var uiValidations = [];\n  return uiValidations.concat(baseValidations).concat(viewInfoValidations);\n}; //  ===========================================================================\n// NO SPECIFIC LIFESTREAM VALIDATIONS AT THIS TIME -- IT JUST ADD OTHERS\n\n\nvar lifeStreamValidations = [{\n  error: \"need to match a valid name within \" + registeredStreamTypes,\n  predicate: function predicate(payload) {\n    return registeredStreamNames().includes(payload.name);\n  }\n}, {\n  error: \"needs one of the following step strings: \" + registeredSteps,\n  predicate: function predicate(payload) {\n    return registeredSteps.includes(payload.STEP);\n  }\n}, {\n  error: \"type needs to one of the following: \" + registeredLifeStreamTypes,\n  predicate: function predicate(payload) {\n    return registeredLifeStreamTypes.includes(payload.type);\n  }\n}, {\n  error: 'viewId needs to be added ',\n  predicate: function predicate(payload) {\n    return payload.viewId !== undefined;\n  }\n}];\n\nvar stepValidations = function stepValidations() {\n  var stepValidations = [];\n  return stepValidations.concat(lifeStreamValidations);\n};\n\nvar stepDisposeValidations = function stepDisposeValidations() {\n  var stepUpdateValidations = [{\n    error: 'DISPOSE STEP requires a disposeItem param in the data object',\n    predicate: function predicate(payload) {\n      return payload.STEP === 'DISPOSE' && payload.data.disposeItems !== undefined;\n    }\n  }];\n  return stepUpdateValidations.concat(lifeStreamValidations);\n};\n\nvar stepUpdateValidations = function stepUpdateValidations() {\n  var stepUpdateValidations = [{\n    error: 'UPDATE STEP requires a data object ',\n    predicate: function predicate(payload) {\n      return payload.STEP === 'UPDATE' && payload.data !== undefined;\n    }\n  }];\n  return stepUpdateValidations.concat(lifeStreamValidations);\n}; //  ===========================================================================\n// lifestreamValidations\n//  ===========================================================================\n\n\nvar lifestreamValidations = function lifestreamValidations() {\n  return lifeStreamValidations.concat(baseValidations).concat(viewInfoValidations);\n}; //  ===========================================================================\n// HERE IS THE ROUTE VALIDATIONS\n//  ===========================================================================\n\n\nvar routeValidations = function routeValidations() {\n  var routeValidations = [\n    /*\n    *\n    {\n        error: `needs a valid route string within [${registeredRoutes}]`,\n        predicate: payload => registeredRoutes.includes(pullMainRoute(payload.data.navigateTo))\n    }\n    *\n    */\n  ];\n  return routeValidations.concat(baseValidations).concat(viewInfoValidations);\n}; //  ===========================================================================\n\n/*\n* THE IDEA OF StreamsConfig IS TO COMPLETELY GENERATE ALL APP STREAMS USING THIS OBJECT\n* THIS HAS NOT BEEN IMPLEMENTED -- MAY BE ADDED IN A FUTURE VERSION\n*/\n//  ===========================================================================\n\n\nvar StreamsConfig = function StreamsConfig() {\n  var streamValidations = [{\n    error: \"param 'name' must be of a registered type\",\n    predicate: function predicate(payload) {\n      return registeredStreamNames().includes(payload.name);\n    }\n  }, {\n    error: \"param 'observable' must contain a valid Rx.Observable\",\n    predicate: function predicate(payload) {\n      return registeredStreamTypes.includes(getRxType(payload.observable));\n    }\n  }, {\n    error: 'param action must be a registered action',\n    predicate: function predicate(payload) {\n      return registeredActions.includes(payload.action);\n    }\n  }];\n  return {\n    streams: [{\n      init: {\n        name: 'DISPATCHER',\n        observable: function observable() {\n          return new Rx.Subject();\n        },\n        action: 'subscribe'\n      },\n      structure: {\n        type: String,\n        observable: Rx.Observable || Rx.Subject,\n        action: String\n      },\n      validations: streamValidations\n    }, {\n      init: {\n        name: 'UBU',\n        observable: function observable() {\n          return new Rx.Subject();\n        },\n        action: 'subscribe'\n      },\n      structure: {\n        type: String,\n        observable: Rx.Observable || Rx.Subject,\n        action: String\n      },\n      validations: streamValidations\n    }]\n  };\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/channels/channels-config.js\n")},"./src/spyne/channels/channels-payload.js":
/*!************************************************!*\
  !*** ./src/spyne/channels/channels-payload.js ***!
  \************************************************/
/*! exports provided: ChannelsPayload */function srcSpyneChannelsChannelsPayloadJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChannelsPayload", function() { return ChannelsPayload; });\n/* harmony import */ var _channels_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channels-config */ "./src/spyne/channels/channels-config.js");\n/* harmony import */ var _utils_channel_config_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/channel-config-validator */ "./src/spyne/utils/channel-config-validator.js");\n/* harmony import */ var _utils_gc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/gc */ "./src/spyne/utils/gc.js");\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/frp-tools */ "./src/spyne/utils/frp-tools.js");\n// import {baseCoreMixins} from \'../utils/mixins/base-core-mixins\';\n\n\n // import {Right, Left, findInObj} from \'../utils/frp-tools\';\n\n // const Rx = require(\'rxjs\');\n\nvar R = __webpack_require__(/*! ramda */ "ramda");\n\nvar ChannelsPayload =\n/*#__PURE__*/\nfunction () {\n  function ChannelsPayload(name, observable, data, action, debug) {\n    if (action === void 0) {\n      action = \'subscribe\';\n    }\n\n    if (debug === void 0) {\n      debug = false;\n    }\n\n    this.addMixins();\n    this.options = {\n      "name": name,\n      "observable": observable,\n      "data": data,\n      "action": action\n    };\n    this.getValidationChecks(name);\n  }\n\n  var _proto = ChannelsPayload.prototype;\n\n  _proto.getValidationChecks = function getValidationChecks(n) {\n    var _this = this;\n\n    var left = function left(e) {\n      return console.warn(e);\n    };\n\n    var right = function right(val) {\n      return _this.onRunValidations(val);\n    };\n\n    var channelMap = window.Spyne.channels.map;\n    var obj = {\n      UI: _channels_config__WEBPACK_IMPORTED_MODULE_0__["uiValidations"],\n      ROUTE: _channels_config__WEBPACK_IMPORTED_MODULE_0__["uiValidations"],\n      LIFESTREAM: _channels_config__WEBPACK_IMPORTED_MODULE_0__["uiValidations"]\n    }; // console.log(\'channel map \',channelMap.has(n), n, channelMap);\n\n    if (channelMap.has(n) === true) {\n      return right(_channels_config__WEBPACK_IMPORTED_MODULE_0__["uiValidations"]);\n    } else {\n      return left(\'payload Needs a Valid Stream Name!\'); //\n    }\n    /* return findInObj(obj, n, \'payload Needs a Valid Stream Name!\')\n       .fold(left, right);*/\n\n  };\n\n  _proto.onRunValidations = function onRunValidations(checks) {\n    Object(_utils_channel_config_validator__WEBPACK_IMPORTED_MODULE_1__["validate"])(checks(), this.options).fold(this.onError.bind(this), this.onSuccess.bind(this));\n  };\n\n  _proto.onPayloadValidated = function onPayloadValidated(p) {\n    this.sendToDirectorStream(p);\n  };\n\n  _proto.sendToDirectorStream = function sendToDirectorStream(payload) {\n    var streamsController = window.Spyne.channels; // getGlobalParam(\'streamsController\');\n\n    var directorStream$ = streamsController.getStream(\'DISPATCHER\'); //console.log(\'payload is \',payload);\n\n    directorStream$.next(payload);\n    this.gc();\n  };\n\n  _proto.onError = function onError(errors) {\n    console.warn(\'payload failed due to:\\n\' + errors.map(function (e) {\n      return \'* \' + e;\n    }).join(\'\\n\'));\n    this.gc();\n  };\n\n  _proto.onSuccess = function onSuccess(payload) {\n    this.onPayloadValidated(payload);\n  };\n\n  _proto.addMixins = function addMixins() {\n    //  ==================================\n    // BASE CORE MIXINS\n    //  ==================================\n    // let coreMixins = baseCoreMixins();\n    this.gc = _utils_gc__WEBPACK_IMPORTED_MODULE_2__["gc"];\n  };\n\n  return ChannelsPayload;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS9jaGFubmVscy9jaGFubmVscy1wYXlsb2FkLmpzPzRlZGEiXSwibmFtZXMiOlsiUiIsInJlcXVpcmUiLCJDaGFubmVsc1BheWxvYWQiLCJuYW1lIiwib2JzZXJ2YWJsZSIsImRhdGEiLCJhY3Rpb24iLCJkZWJ1ZyIsImFkZE1peGlucyIsIm9wdGlvbnMiLCJnZXRWYWxpZGF0aW9uQ2hlY2tzIiwibiIsImxlZnQiLCJjb25zb2xlIiwid2FybiIsImUiLCJyaWdodCIsIm9uUnVuVmFsaWRhdGlvbnMiLCJ2YWwiLCJjaGFubmVsTWFwIiwid2luZG93IiwiU3B5bmUiLCJjaGFubmVscyIsIm1hcCIsIm9iaiIsIlVJIiwiUk9VVEUiLCJMSUZFU1RSRUFNIiwidWlWYWxpZGF0aW9ucyIsImhhcyIsImNoZWNrcyIsInZhbGlkYXRlIiwiZm9sZCIsIm9uRXJyb3IiLCJiaW5kIiwib25TdWNjZXNzIiwib25QYXlsb2FkVmFsaWRhdGVkIiwicCIsInNlbmRUb0RpcmVjdG9yU3RyZWFtIiwicGF5bG9hZCIsInN0cmVhbXNDb250cm9sbGVyIiwiZGlyZWN0b3JTdHJlYW0kIiwiZ2V0U3RyZWFtIiwibmV4dCIsImdjIiwiZXJyb3JzIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUFBO0FBQ0E7QUFDQTtDQUVBOztDQUVBOztBQUNDLElBQU1BLElBQUksbUJBQUFDLENBQVEsb0JBQVIsQ0FBVjs7QUFDRCxJQUFhQyxlQUFiO0FBQUE7QUFBQTtBQUNFLDJCQUFZQyxJQUFaLEVBQWtCQyxVQUFsQixFQUE4QkMsSUFBOUIsRUFBb0NDLE1BQXBDLEVBQTBEQyxLQUExRCxFQUF5RTtBQUFBLFFBQXJDRCxNQUFxQztBQUFyQ0EsWUFBcUMsR0FBNUIsV0FBNEI7QUFBQTs7QUFBQSxRQUFmQyxLQUFlO0FBQWZBLFdBQWUsR0FBUCxLQUFPO0FBQUE7O0FBQ3ZFLFNBQUtDLFNBQUw7QUFDQSxTQUFLQyxPQUFMLEdBQWU7QUFDZCxjQUFTTixJQURLO0FBRWIsb0JBQWNDLFVBRkQ7QUFHYixjQUFRQyxJQUhLO0FBSWIsZ0JBQVVDO0FBSkcsS0FBZjtBQU1BLFNBQUtJLG1CQUFMLENBQXlCUCxJQUF6QjtBQUNEOztBQVZIOztBQUFBLFNBV0VPLG1CQVhGLGdDQVdzQkMsQ0FYdEIsRUFXeUI7QUFBQTs7QUFDckIsUUFBSUMsT0FBUSxTQUFSQSxJQUFRO0FBQUEsYUFBS0MsUUFBUUMsSUFBUixDQUFhQyxDQUFiLENBQUw7QUFBQSxLQUFaOztBQUNBLFFBQUlDLFFBQVEsU0FBUkEsS0FBUTtBQUFBLGFBQU8sTUFBS0MsZ0JBQUwsQ0FBc0JDLEdBQXRCLENBQVA7QUFBQSxLQUFaOztBQUNBLFFBQU1DLGFBQWFDLE9BQU9DLEtBQVAsQ0FBYUMsUUFBYixDQUFzQkMsR0FBekM7QUFDQSxRQUFJQyxNQUFNO0FBQ1JDLFVBQVksOERBREo7QUFFUkMsYUFBWSw4REFGSjtBQUdSQyxrQkFBWSw4REFBQUM7QUFISixLQUFWLENBSnFCLENBU3RCOztBQUVDLFFBQUlULFdBQVdVLEdBQVgsQ0FBZWxCLENBQWYsTUFBc0IsSUFBMUIsRUFBK0I7QUFDN0IsYUFBT0ssTUFBTSw4REFBTixDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBT0osS0FBTSxvQ0FBTixDQUFQLENBREssQ0FDOEM7QUFDcEQ7QUFDRjs7O0FBRUEsR0E3Qkg7O0FBQUEsU0E4QkVLLGdCQTlCRiw2QkE4Qm1CYSxNQTlCbkIsRUE4QjJCO0FBQ3ZCQyxJQUFBLGdGQUFBQSxDQUFTRCxRQUFULEVBQW1CLEtBQUtyQixPQUF4QixFQUFpQ3VCLElBQWpDLENBQ0UsS0FBS0MsT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBREYsRUFFRSxLQUFLQyxTQUFMLENBQWVELElBQWYsQ0FBb0IsSUFBcEIsQ0FGRjtBQUdELEdBbENIOztBQUFBLFNBbUNFRSxrQkFuQ0YsK0JBbUNxQkMsQ0FuQ3JCLEVBbUN3QjtBQUNwQixTQUFLQyxvQkFBTCxDQUEwQkQsQ0FBMUI7QUFDRCxHQXJDSDs7QUFBQSxTQXNDRUMsb0JBdENGLGlDQXNDdUJDLE9BdEN2QixFQXNDZ0M7QUFDNUIsUUFBSUMsb0JBQW9CcEIsT0FBT0MsS0FBUCxDQUFhQyxRQUFyQyxDQUQ0QixDQUNrQjs7QUFDOUMsUUFBSW1CLGtCQUFrQkQsa0JBQWtCRSxTQUFsQixDQUE0QixZQUE1QixDQUF0QixDQUY0QixDQUc1Qjs7QUFDQUQsb0JBQWdCRSxJQUFoQixDQUFxQkosT0FBckI7QUFDQSxTQUFLSyxFQUFMO0FBQ0QsR0E1Q0g7O0FBQUEsU0E2Q0VYLE9BN0NGLG9CQTZDVVksTUE3Q1YsRUE2Q2tCO0FBQ2RoQyxZQUFRQyxJQUFSLENBQWEsNkJBQTZCK0IsT0FBT3RCLEdBQVAsQ0FBVztBQUFBLGFBQUssT0FBT1IsQ0FBWjtBQUFBLEtBQVgsRUFBMEIrQixJQUExQixDQUErQixJQUEvQixDQUExQztBQUNBLFNBQUtGLEVBQUw7QUFDRCxHQWhESDs7QUFBQSxTQWlERVQsU0FqREYsc0JBaURZSSxPQWpEWixFQWlEcUI7QUFDakIsU0FBS0gsa0JBQUwsQ0FBd0JHLE9BQXhCO0FBQ0QsR0FuREg7O0FBQUEsU0FvREUvQixTQXBERix3QkFvRGM7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUtvQyxFQUFMLEdBQVUsNENBQVY7QUFDRCxHQTFESDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL3NweW5lL2NoYW5uZWxzL2NoYW5uZWxzLXBheWxvYWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQge2Jhc2VDb3JlTWl4aW5zfSBmcm9tICcuLi91dGlscy9taXhpbnMvYmFzZS1jb3JlLW1peGlucyc7XG5pbXBvcnQge3VpVmFsaWRhdGlvbnMsIHJvdXRlVmFsaWRhdGlvbnMsIGxpZmVzdHJlYW1WYWxpZGF0aW9uc30gZnJvbSAnLi9jaGFubmVscy1jb25maWcnO1xuaW1wb3J0IHt2YWxpZGF0ZX0gZnJvbSAnLi4vdXRpbHMvY2hhbm5lbC1jb25maWctdmFsaWRhdG9yJztcbmltcG9ydCB7Z2N9IGZyb20gJy4uL3V0aWxzL2djJztcbi8vIGltcG9ydCB7UmlnaHQsIExlZnQsIGZpbmRJbk9ian0gZnJvbSAnLi4vdXRpbHMvZnJwLXRvb2xzJztcbmltcG9ydCB7ZmluZEluT2JqfSBmcm9tICcuLi91dGlscy9mcnAtdG9vbHMnO1xuLy8gY29uc3QgUnggPSByZXF1aXJlKCdyeGpzJyk7XG4gY29uc3QgUiA9IHJlcXVpcmUoJ3JhbWRhJyk7XG5leHBvcnQgY2xhc3MgQ2hhbm5lbHNQYXlsb2FkIHtcbiAgY29uc3RydWN0b3IobmFtZSwgb2JzZXJ2YWJsZSwgZGF0YSwgYWN0aW9uID0gJ3N1YnNjcmliZScsIGRlYnVnID0gZmFsc2UpIHtcbiAgICB0aGlzLmFkZE1peGlucygpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgXCJuYW1lXCIgOiBuYW1lLFxuICAgICAgXCJvYnNlcnZhYmxlXCI6IG9ic2VydmFibGUsXG4gICAgICBcImRhdGFcIjogZGF0YSxcbiAgICAgIFwiYWN0aW9uXCI6IGFjdGlvblxuICAgIH07XG4gICAgdGhpcy5nZXRWYWxpZGF0aW9uQ2hlY2tzKG5hbWUpO1xuICB9XG4gIGdldFZhbGlkYXRpb25DaGVja3Mobikge1xuICAgIGxldCBsZWZ0ICA9IGUgPT4gY29uc29sZS53YXJuKGUpO1xuICAgIGxldCByaWdodCA9IHZhbCA9PiB0aGlzLm9uUnVuVmFsaWRhdGlvbnModmFsKTtcbiAgICBjb25zdCBjaGFubmVsTWFwID0gd2luZG93LlNweW5lLmNoYW5uZWxzLm1hcDtcbiAgICBsZXQgb2JqID0ge1xuICAgICAgVUk6ICAgICAgICAgdWlWYWxpZGF0aW9ucyxcbiAgICAgIFJPVVRFOiAgICAgIHVpVmFsaWRhdGlvbnMsXG4gICAgICBMSUZFU1RSRUFNOiB1aVZhbGlkYXRpb25zXG4gICAgfTtcbiAgIC8vIGNvbnNvbGUubG9nKCdjaGFubmVsIG1hcCAnLGNoYW5uZWxNYXAuaGFzKG4pLCBuLCBjaGFubmVsTWFwKTtcblxuICAgIGlmIChjaGFubmVsTWFwLmhhcyhuKSA9PT0gdHJ1ZSl7XG4gICAgICByZXR1cm4gcmlnaHQodWlWYWxpZGF0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGxlZnQgKCdwYXlsb2FkIE5lZWRzIGEgVmFsaWQgU3RyZWFtIE5hbWUhJyk7Ly9cbiAgICB9XG4gICAvKiByZXR1cm4gZmluZEluT2JqKG9iaiwgbiwgJ3BheWxvYWQgTmVlZHMgYSBWYWxpZCBTdHJlYW0gTmFtZSEnKVxuICAgICAgLmZvbGQobGVmdCwgcmlnaHQpOyovXG4gIH1cbiAgb25SdW5WYWxpZGF0aW9ucyhjaGVja3MpIHtcbiAgICB2YWxpZGF0ZShjaGVja3MoKSwgdGhpcy5vcHRpb25zKS5mb2xkKFxuICAgICAgdGhpcy5vbkVycm9yLmJpbmQodGhpcyksXG4gICAgICB0aGlzLm9uU3VjY2Vzcy5iaW5kKHRoaXMpKTtcbiAgfVxuICBvblBheWxvYWRWYWxpZGF0ZWQocCkge1xuICAgIHRoaXMuc2VuZFRvRGlyZWN0b3JTdHJlYW0ocCk7XG4gIH1cbiAgc2VuZFRvRGlyZWN0b3JTdHJlYW0ocGF5bG9hZCkge1xuICAgIGxldCBzdHJlYW1zQ29udHJvbGxlciA9IHdpbmRvdy5TcHluZS5jaGFubmVsczsvLyBnZXRHbG9iYWxQYXJhbSgnc3RyZWFtc0NvbnRyb2xsZXInKTtcbiAgICBsZXQgZGlyZWN0b3JTdHJlYW0kID0gc3RyZWFtc0NvbnRyb2xsZXIuZ2V0U3RyZWFtKCdESVNQQVRDSEVSJyk7XG4gICAgLy9jb25zb2xlLmxvZygncGF5bG9hZCBpcyAnLHBheWxvYWQpO1xuICAgIGRpcmVjdG9yU3RyZWFtJC5uZXh0KHBheWxvYWQpO1xuICAgIHRoaXMuZ2MoKTtcbiAgfVxuICBvbkVycm9yKGVycm9ycykge1xuICAgIGNvbnNvbGUud2FybigncGF5bG9hZCBmYWlsZWQgZHVlIHRvOlxcbicgKyBlcnJvcnMubWFwKGUgPT4gJyogJyArIGUpLmpvaW4oJ1xcbicpKTtcbiAgICB0aGlzLmdjKCk7XG4gIH1cbiAgb25TdWNjZXNzKHBheWxvYWQpIHtcbiAgICB0aGlzLm9uUGF5bG9hZFZhbGlkYXRlZChwYXlsb2FkKTtcbiAgfVxuICBhZGRNaXhpbnMoKSB7XG4gICAgLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBCQVNFIENPUkUgTUlYSU5TXG4gICAgLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBsZXQgY29yZU1peGlucyA9IGJhc2VDb3JlTWl4aW5zKCk7XG4gICAgdGhpcy5nYyA9IGdjO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/spyne/channels/channels-payload.js\n')},"./src/spyne/channels/lifestream-payload.js":
/*!**************************************************!*\
  !*** ./src/spyne/channels/lifestream-payload.js ***!
  \**************************************************/
/*! exports provided: LifestreamPayload */function srcSpyneChannelsLifestreamPayloadJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LifestreamPayload", function() { return LifestreamPayload; });\n/* harmony import */ var _channels_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channels-config */ "./src/spyne/channels/channels-config.js");\n/* harmony import */ var _utils_channel_config_validator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/channel-config-validator */ "./src/spyne/utils/channel-config-validator.js");\n/* harmony import */ var _utils_gc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/gc */ "./src/spyne/utils/gc.js");\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/frp-tools */ "./src/spyne/utils/frp-tools.js");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// import {baseCoreMixins} from \'../utils/mixins/base-core-mixins\';\n\n\n // import {Right, Left, findInObj} from \'../utils/frp-tools\';\n\n // const Rx = require(\'rxjs\');\n// const R = require(\'ramda\');\n\nvar LifestreamPayload =\n/*#__PURE__*/\nfunction () {\n  function LifestreamPayload(name, STEP, type, viewId, data, debug) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    if (debug === void 0) {\n      debug = true;\n    }\n\n    this.addMixins();\n    this.options = {\n      name: name,\n      STEP: STEP,\n      type: type,\n      viewId: viewId,\n      data: data\n    };\n    this.getValidationChecks(STEP);\n  }\n\n  var _proto = LifestreamPayload.prototype;\n\n  _proto.getValidationChecks = function getValidationChecks(n) {\n    var _this = this;\n\n    var left = function left(e) {\n      return console.warn(e);\n    };\n\n    var right = function right(val) {\n      return _this.onRunValidations(val);\n    };\n\n    var obj = {\n      LOAD: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepValidations"],\n      RENDER: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepValidations"],\n      MOUNT: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepValidations"],\n      DISPOSE: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepDisposeValidations"],\n      UNMOUNT: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepValidations"],\n      GARBAGE_COLLECT: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepValidations"],\n      UPDATE: _channels_config__WEBPACK_IMPORTED_MODULE_0__["stepUpdateValidations"]\n    };\n    return Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__["findInObj"])(obj, n, \'lifestream payload Needs a Valid Stream Name!\').fold(left, right);\n  };\n\n  _proto.onRunValidations = function onRunValidations(checks) {\n    Object(_utils_channel_config_validator__WEBPACK_IMPORTED_MODULE_1__["validate"])(checks(), this.options).fold(this.onError.bind(this), this.onSuccess.bind(this));\n  };\n\n  _proto.onPayloadValidated = function onPayloadValidated(p) {\n    this._data = p;\n    return p;\n  };\n\n  _proto.onError = function onError(errors) {\n    console.error(\'payload failed due to:\\n\' + errors.map(function (e) {\n      return \'* \' + e;\n    }).join(\'\\n\'));\n    this.gc();\n  };\n\n  _proto.onSuccess = function onSuccess(payload) {\n    this.onPayloadValidated(payload);\n  };\n\n  _proto.addMixins = function addMixins() {\n    //  ==================================\n    // BASE CORE MIXINS\n    //  ==================================\n    // let coreMixins = baseCoreMixins();\n    this.gc = _utils_gc__WEBPACK_IMPORTED_MODULE_2__["gc"];\n  };\n\n  _createClass(LifestreamPayload, [{\n    key: "data",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  return LifestreamPayload;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS9jaGFubmVscy9saWZlc3RyZWFtLXBheWxvYWQuanM/Y2Q2ZSJdLCJuYW1lcyI6WyJMaWZlc3RyZWFtUGF5bG9hZCIsIm5hbWUiLCJTVEVQIiwidHlwZSIsInZpZXdJZCIsImRhdGEiLCJkZWJ1ZyIsImFkZE1peGlucyIsIm9wdGlvbnMiLCJnZXRWYWxpZGF0aW9uQ2hlY2tzIiwibiIsImxlZnQiLCJjb25zb2xlIiwid2FybiIsImUiLCJyaWdodCIsIm9uUnVuVmFsaWRhdGlvbnMiLCJ2YWwiLCJvYmoiLCJMT0FEIiwiUkVOREVSIiwiTU9VTlQiLCJESVNQT1NFIiwiVU5NT1VOVCIsIkdBUkJBR0VfQ09MTEVDVCIsIlVQREFURSIsInN0ZXBVcGRhdGVWYWxpZGF0aW9ucyIsImZpbmRJbk9iaiIsImZvbGQiLCJjaGVja3MiLCJ2YWxpZGF0ZSIsIm9uRXJyb3IiLCJiaW5kIiwib25TdWNjZXNzIiwib25QYXlsb2FkVmFsaWRhdGVkIiwicCIsIl9kYXRhIiwiZXJyb3JzIiwiZXJyb3IiLCJtYXAiLCJqb2luIiwiZ2MiLCJwYXlsb2FkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0NBRUE7O0NBRUE7QUFDQTs7QUFDQSxJQUFhQSxpQkFBYjtBQUFBO0FBQUE7QUFDRSw2QkFBWUMsSUFBWixFQUFrQkMsSUFBbEIsRUFBd0JDLElBQXhCLEVBQThCQyxNQUE5QixFQUFzQ0MsSUFBdEMsRUFBaURDLEtBQWpELEVBQStEO0FBQUEsUUFBekJELElBQXlCO0FBQXpCQSxVQUF5QixHQUFsQixFQUFrQjtBQUFBOztBQUFBLFFBQWRDLEtBQWM7QUFBZEEsV0FBYyxHQUFOLElBQU07QUFBQTs7QUFDN0QsU0FBS0MsU0FBTDtBQUNBLFNBQUtDLE9BQUwsR0FBZTtBQUFDUCxnQkFBRDtBQUFPQyxnQkFBUDtBQUFhQyxnQkFBYjtBQUFtQkMsb0JBQW5CO0FBQTJCQztBQUEzQixLQUFmO0FBQ0EsU0FBS0ksbUJBQUwsQ0FBeUJQLElBQXpCO0FBQ0Q7O0FBTEg7O0FBQUEsU0FTRU8sbUJBVEYsZ0NBU3NCQyxDQVR0QixFQVN5QjtBQUFBOztBQUNyQixRQUFJQyxPQUFRLFNBQVJBLElBQVE7QUFBQSxhQUFLQyxRQUFRQyxJQUFSLENBQWFDLENBQWIsQ0FBTDtBQUFBLEtBQVo7O0FBQ0EsUUFBSUMsUUFBUSxTQUFSQSxLQUFRO0FBQUEsYUFBTyxNQUFLQyxnQkFBTCxDQUFzQkMsR0FBdEIsQ0FBUDtBQUFBLEtBQVo7O0FBQ0EsUUFBSUMsTUFBTTtBQUNSQyxZQUFTLGdFQUREO0FBRVJDLGNBQVMsZ0VBRkQ7QUFHUkMsYUFBUyxnRUFIRDtBQUlSQyxlQUFTLHVFQUpEO0FBS1JDLGVBQVMsZ0VBTEQ7QUFNUkMsdUJBQWlCLGdFQU5UO0FBT1JDLGNBQVMsc0VBQUFDO0FBUEQsS0FBVjtBQVNBLFdBQU8sa0VBQUFDLENBQVVULEdBQVYsRUFBZVIsQ0FBZixFQUFrQiwrQ0FBbEIsRUFDSmtCLElBREksQ0FDQ2pCLElBREQsRUFDT0ksS0FEUCxDQUFQO0FBRUQsR0F2Qkg7O0FBQUEsU0F3QkVDLGdCQXhCRiw2QkF3Qm1CYSxNQXhCbkIsRUF3QjJCO0FBQ3ZCQyxJQUFBLGdGQUFBQSxDQUFTRCxRQUFULEVBQW1CLEtBQUtyQixPQUF4QixFQUFpQ29CLElBQWpDLENBQ0UsS0FBS0csT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBREYsRUFFRSxLQUFLQyxTQUFMLENBQWVELElBQWYsQ0FBb0IsSUFBcEIsQ0FGRjtBQUdELEdBNUJIOztBQUFBLFNBNkJFRSxrQkE3QkYsK0JBNkJxQkMsQ0E3QnJCLEVBNkJ3QjtBQUNwQixTQUFLQyxLQUFMLEdBQWFELENBQWI7QUFDQSxXQUFPQSxDQUFQO0FBQ0QsR0FoQ0g7O0FBQUEsU0FpQ0VKLE9BakNGLG9CQWlDVU0sTUFqQ1YsRUFpQ2tCO0FBQ2R6QixZQUFRMEIsS0FBUixDQUFjLDZCQUE2QkQsT0FBT0UsR0FBUCxDQUFXO0FBQUEsYUFBSyxPQUFPekIsQ0FBWjtBQUFBLEtBQVgsRUFBMEIwQixJQUExQixDQUErQixJQUEvQixDQUEzQztBQUNBLFNBQUtDLEVBQUw7QUFDRCxHQXBDSDs7QUFBQSxTQXFDRVIsU0FyQ0Ysc0JBcUNZUyxPQXJDWixFQXFDcUI7QUFDakIsU0FBS1Isa0JBQUwsQ0FBd0JRLE9BQXhCO0FBQ0QsR0F2Q0g7O0FBQUEsU0F3Q0VuQyxTQXhDRix3QkF3Q2M7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQUtrQyxFQUFMLEdBQVUsNENBQVY7QUFDRCxHQTlDSDs7QUFBQTtBQUFBO0FBQUEsd0JBTWE7QUFDVCxhQUFPLEtBQUtMLEtBQVo7QUFDRDtBQVJIOztBQUFBO0FBQUEiLCJmaWxlIjoiLi9zcmMvc3B5bmUvY2hhbm5lbHMvbGlmZXN0cmVhbS1wYXlsb2FkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHtiYXNlQ29yZU1peGluc30gZnJvbSAnLi4vdXRpbHMvbWl4aW5zL2Jhc2UtY29yZS1taXhpbnMnO1xuaW1wb3J0IHtzdGVwVmFsaWRhdGlvbnMsIHN0ZXBVcGRhdGVWYWxpZGF0aW9ucywgc3RlcERpc3Bvc2VWYWxpZGF0aW9uc30gZnJvbSAnLi9jaGFubmVscy1jb25maWcnO1xuaW1wb3J0IHt2YWxpZGF0ZX0gZnJvbSAnLi4vdXRpbHMvY2hhbm5lbC1jb25maWctdmFsaWRhdG9yJztcbmltcG9ydCB7Z2N9IGZyb20gJy4uL3V0aWxzL2djJztcbi8vIGltcG9ydCB7UmlnaHQsIExlZnQsIGZpbmRJbk9ian0gZnJvbSAnLi4vdXRpbHMvZnJwLXRvb2xzJztcbmltcG9ydCB7ZmluZEluT2JqfSBmcm9tICcuLi91dGlscy9mcnAtdG9vbHMnO1xuLy8gY29uc3QgUnggPSByZXF1aXJlKCdyeGpzJyk7XG4vLyBjb25zdCBSID0gcmVxdWlyZSgncmFtZGEnKTtcbmV4cG9ydCBjbGFzcyBMaWZlc3RyZWFtUGF5bG9hZCB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIFNURVAsIHR5cGUsIHZpZXdJZCwgZGF0YSA9IHt9LCBkZWJ1ZyA9IHRydWUpIHtcbiAgICB0aGlzLmFkZE1peGlucygpO1xuICAgIHRoaXMub3B0aW9ucyA9IHtuYW1lLCBTVEVQLCB0eXBlLCB2aWV3SWQsIGRhdGF9O1xuICAgIHRoaXMuZ2V0VmFsaWRhdGlvbkNoZWNrcyhTVEVQKTtcbiAgfVxuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgfVxuICBnZXRWYWxpZGF0aW9uQ2hlY2tzKG4pIHtcbiAgICBsZXQgbGVmdCAgPSBlID0+IGNvbnNvbGUud2FybihlKTtcbiAgICBsZXQgcmlnaHQgPSB2YWwgPT4gdGhpcy5vblJ1blZhbGlkYXRpb25zKHZhbCk7XG4gICAgbGV0IG9iaiA9IHtcbiAgICAgIExPQUQ6ICAgIHN0ZXBWYWxpZGF0aW9ucyxcbiAgICAgIFJFTkRFUjogIHN0ZXBWYWxpZGF0aW9ucyxcbiAgICAgIE1PVU5UOiAgIHN0ZXBWYWxpZGF0aW9ucyxcbiAgICAgIERJU1BPU0U6IHN0ZXBEaXNwb3NlVmFsaWRhdGlvbnMsXG4gICAgICBVTk1PVU5UOiBzdGVwVmFsaWRhdGlvbnMsXG4gICAgICBHQVJCQUdFX0NPTExFQ1Q6IHN0ZXBWYWxpZGF0aW9ucyxcbiAgICAgIFVQREFURTogIHN0ZXBVcGRhdGVWYWxpZGF0aW9uc1xuICAgIH07XG4gICAgcmV0dXJuIGZpbmRJbk9iaihvYmosIG4sICdsaWZlc3RyZWFtIHBheWxvYWQgTmVlZHMgYSBWYWxpZCBTdHJlYW0gTmFtZSEnKVxuICAgICAgLmZvbGQobGVmdCwgcmlnaHQpO1xuICB9XG4gIG9uUnVuVmFsaWRhdGlvbnMoY2hlY2tzKSB7XG4gICAgdmFsaWRhdGUoY2hlY2tzKCksIHRoaXMub3B0aW9ucykuZm9sZChcbiAgICAgIHRoaXMub25FcnJvci5iaW5kKHRoaXMpLFxuICAgICAgdGhpcy5vblN1Y2Nlc3MuYmluZCh0aGlzKSk7XG4gIH1cbiAgb25QYXlsb2FkVmFsaWRhdGVkKHApIHtcbiAgICB0aGlzLl9kYXRhID0gcDtcbiAgICByZXR1cm4gcDtcbiAgfVxuICBvbkVycm9yKGVycm9ycykge1xuICAgIGNvbnNvbGUuZXJyb3IoJ3BheWxvYWQgZmFpbGVkIGR1ZSB0bzpcXG4nICsgZXJyb3JzLm1hcChlID0+ICcqICcgKyBlKS5qb2luKCdcXG4nKSk7XG4gICAgdGhpcy5nYygpO1xuICB9XG4gIG9uU3VjY2VzcyhwYXlsb2FkKSB7XG4gICAgdGhpcy5vblBheWxvYWRWYWxpZGF0ZWQocGF5bG9hZCk7XG4gIH1cbiAgYWRkTWl4aW5zKCkge1xuICAgIC8vICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gQkFTRSBDT1JFIE1JWElOU1xuICAgIC8vICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLy8gbGV0IGNvcmVNaXhpbnMgPSBiYXNlQ29yZU1peGlucygpO1xuICAgIHRoaXMuZ2MgPSBnYztcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/channels/lifestream-payload.js\n')},"./src/spyne/spyne.js":
/*!****************************!*\
  !*** ./src/spyne/spyne.js ***!
  \****************************/
/*! exports provided: ViewToDomMediator, ChannelsBase, ChannelsBaseData, ChannelsBaseController, ChannelsPayload, ChannelStreamItem, DomItem, ViewStream, ViewStreamBroadcaster, SpyneApp */function srcSpyneSpyneJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpyneApp", function() { return SpyneApp; });\n/* harmony import */ var _channels_channels_base_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channels/channels-base-controller */ "./src/spyne/channels/channels-base-controller.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChannelsBaseController", function() { return _channels_channels_base_controller__WEBPACK_IMPORTED_MODULE_0__["ChannelsBaseController"]; });\n\n/* harmony import */ var _views_dom_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./views/dom-item */ "./src/spyne/views/dom-item.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DomItem", function() { return _views_dom_item__WEBPACK_IMPORTED_MODULE_1__["DomItem"]; });\n\n/* harmony import */ var _views_view_to_dom_mediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/view-to-dom-mediator */ "./src/spyne/views/view-to-dom-mediator.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewToDomMediator", function() { return _views_view_to_dom_mediator__WEBPACK_IMPORTED_MODULE_2__["ViewToDomMediator"]; });\n\n/* harmony import */ var _views_view_stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/view-stream */ "./src/spyne/views/view-stream.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewStream", function() { return _views_view_stream__WEBPACK_IMPORTED_MODULE_3__["ViewStream"]; });\n\n/* harmony import */ var _views_view_stream_broadcaster__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./views/view-stream-broadcaster */ "./src/spyne/views/view-stream-broadcaster.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewStreamBroadcaster", function() { return _views_view_stream_broadcaster__WEBPACK_IMPORTED_MODULE_4__["ViewStreamBroadcaster"]; });\n\n/* harmony import */ var _channels_channels_payload__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./channels/channels-payload */ "./src/spyne/channels/channels-payload.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChannelsPayload", function() { return _channels_channels_payload__WEBPACK_IMPORTED_MODULE_5__["ChannelsPayload"]; });\n\n/* harmony import */ var _channels_channels_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./channels/channels-base */ "./src/spyne/channels/channels-base.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChannelsBase", function() { return _channels_channels_base__WEBPACK_IMPORTED_MODULE_6__["ChannelsBase"]; });\n\n/* harmony import */ var _channels_channels_base_data__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./channels/channels-base-data */ "./src/spyne/channels/channels-base-data.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChannelsBaseData", function() { return _channels_channels_base_data__WEBPACK_IMPORTED_MODULE_7__["ChannelsBaseData"]; });\n\n/* harmony import */ var _channels_channel_stream_item__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./channels/channel-stream-item */ "./src/spyne/channels/channel-stream-item.js");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChannelStreamItem", function() { return _channels_channel_stream_item__WEBPACK_IMPORTED_MODULE_8__["ChannelStreamItem"]; });\n\n/* harmony import */ var _utils_deep_merge__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/deep-merge */ "./src/spyne/utils/deep-merge.js");\n\n\n\n\n\n\n\n\n\n\n\nvar SpyneApp =\n/*#__PURE__*/\nfunction () {\n  function SpyneApp(config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.channels = new _channels_channels_base_controller__WEBPACK_IMPORTED_MODULE_0__["ChannelsBaseController"]();\n    this.VERSION = \'0.7.14-BETA\';\n    this.ViewStream = _views_view_stream__WEBPACK_IMPORTED_MODULE_3__["ViewStream"];\n    this.BasicView = _views_view_to_dom_mediator__WEBPACK_IMPORTED_MODULE_2__["ViewToDomMediator"];\n    this.DomItem = _views_dom_item__WEBPACK_IMPORTED_MODULE_1__["DomItem"];\n    this.ViewStreamBroadcaster = _views_view_stream_broadcaster__WEBPACK_IMPORTED_MODULE_4__["ViewStreamBroadcaster"];\n    this.ChannelsPayload = _channels_channels_payload__WEBPACK_IMPORTED_MODULE_5__["ChannelsPayload"];\n    this.ChannelsBaseController = _channels_channels_base_controller__WEBPACK_IMPORTED_MODULE_0__["ChannelsBaseController"];\n    this.ChannelsBase = _channels_channels_base__WEBPACK_IMPORTED_MODULE_6__["ChannelsBase"];\n    this.ChannelStreamItem = _channels_channel_stream_item__WEBPACK_IMPORTED_MODULE_8__["ChannelStreamItem"];\n    window.Spyne = this;\n    var defaultConfig = {\n      channels: {\n        WINDOW: {\n          mediqQueries: {\n            /*  \'test\': \'(max-width: 500px)\',\n              \'newTest\': \'(max-width: 800px)\'*/\n          },\n          events: [],\n          listenForResize: true,\n          listenForOrientation: true,\n          listenForScroll: true,\n          listenForMouseWheel: false,\n          debounceMSTimeForResize: 200,\n          debounceMSTimeForScroll: 150\n        },\n        ROUTE: {\n          type: \'slash\',\n          isHash: false,\n          isHidden: false,\n          routes: {\n            \'route\': {\n              \'keyword\': \'change\'\n            }\n          }\n        }\n      }\n    };\n\n    if (config !== undefined) {\n      window.Spyne[\'config\'] = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_9__["deepMerge"])(defaultConfig, config); // Object.assign({}, defaultConfig, config);// config !== undefined ? config : defaultConfig;\n      // console.log("CONFIG IS ",{defaultConfig, config},window.Spyne.config)\n    }\n\n    this.getChannelActions = function (str) {\n      return window.Spyne.channels.getChannelActions(str);\n    };\n\n    this.registerChannel = function (str, val) {\n      return _this.channels.registerStream(str, val);\n    };\n\n    this.registerDataChannel = function (obs$) {\n      return _this.channels.registerStream(obs$.props.name, obs$);\n    };\n\n    this.channels.init(); // window.Spyne.channels.init();\n  }\n\n  SpyneApp.getChannelActions = function getChannelActions(str) {\n    return window.Spyne.channels.getChannelActions(str);\n  };\n\n  SpyneApp.registerChannel = function registerChannel(str, val) {\n    if (window.Spyne === undefined) {\n      console.warn(\'Spyne has not been initialized\');\n    } else {\n      return window.Spyne.channels.registerStream(str, val);\n    }\n  };\n\n  return SpyneApp;\n}(); // let Spyne = {ViewToDomMediator, ChannelsBase, ChannelsBaseController, ChannelsPayload, DomItem, ViewStream, ViewStreamBroadcaster, registerChannel};\n\n\nwindow[\'Spyne\'] = SpyneApp;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS9zcHluZS5qcz8yZDA2Il0sIm5hbWVzIjpbIlNweW5lQXBwIiwiY29uZmlnIiwiY2hhbm5lbHMiLCJWRVJTSU9OIiwiVmlld1N0cmVhbSIsIkJhc2ljVmlldyIsIkRvbUl0ZW0iLCJWaWV3U3RyZWFtQnJvYWRjYXN0ZXIiLCJDaGFubmVsc1BheWxvYWQiLCJDaGFubmVsc0Jhc2VDb250cm9sbGVyIiwiQ2hhbm5lbHNCYXNlIiwiQ2hhbm5lbFN0cmVhbUl0ZW0iLCJ3aW5kb3ciLCJTcHluZSIsImRlZmF1bHRDb25maWciLCJXSU5ET1ciLCJtZWRpcVF1ZXJpZXMiLCJldmVudHMiLCJsaXN0ZW5Gb3JSZXNpemUiLCJsaXN0ZW5Gb3JPcmllbnRhdGlvbiIsImxpc3RlbkZvclNjcm9sbCIsImxpc3RlbkZvck1vdXNlV2hlZWwiLCJkZWJvdW5jZU1TVGltZUZvclJlc2l6ZSIsImRlYm91bmNlTVNUaW1lRm9yU2Nyb2xsIiwiUk9VVEUiLCJ0eXBlIiwiaXNIYXNoIiwiaXNIaWRkZW4iLCJyb3V0ZXMiLCJ1bmRlZmluZWQiLCJkZWVwTWVyZ2UiLCJnZXRDaGFubmVsQWN0aW9ucyIsInN0ciIsInJlZ2lzdGVyQ2hhbm5lbCIsInZhbCIsInJlZ2lzdGVyU3RyZWFtIiwicmVnaXN0ZXJEYXRhQ2hhbm5lbCIsIm9icyQiLCJwcm9wcyIsIm5hbWUiLCJpbml0IiwiY29uc29sZSIsIndhcm4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztJQUVNQSxROzs7QUFDSixvQkFBWUMsTUFBWixFQUF5QjtBQUFBOztBQUFBLFFBQWJBLE1BQWE7QUFBYkEsWUFBYSxHQUFKLEVBQUk7QUFBQTs7QUFDdkIsU0FBS0MsUUFBTCxHQUFnQixJQUFJLHlGQUFKLEVBQWhCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLGFBQWY7QUFDQSxTQUFLQyxVQUFMLEdBQWtCLDZEQUFsQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsNkVBQWpCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLHVEQUFmO0FBQ0EsU0FBS0MscUJBQUwsR0FBNkIsb0ZBQTdCO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QiwwRUFBdkI7QUFDQSxTQUFLQyxzQkFBTCxHQUE4Qix5RkFBOUI7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLG9FQUFwQjtBQUNBLFNBQUtDLGlCQUFMLEdBQXlCLCtFQUF6QjtBQUNBQyxXQUFPQyxLQUFQLEdBQWUsSUFBZjtBQUNBLFFBQUlDLGdCQUFnQjtBQUNsQlosZ0JBQVU7QUFDUmEsZ0JBQVE7QUFDTkMsd0JBQWM7QUFDZDs7QUFEYyxXQURSO0FBS05DLGtCQUFRLEVBTEY7QUFNTkMsMkJBQWlCLElBTlg7QUFPTkMsZ0NBQXNCLElBUGhCO0FBUU5DLDJCQUFpQixJQVJYO0FBU05DLCtCQUFxQixLQVRmO0FBVU5DLG1DQUF5QixHQVZuQjtBQVdOQyxtQ0FBeUI7QUFYbkIsU0FEQTtBQWVSQyxlQUFPO0FBQ0xDLGdCQUFNLE9BREQ7QUFFTEMsa0JBQVEsS0FGSDtBQUdMQyxvQkFBVSxLQUhMO0FBSUxDLGtCQUFRO0FBQ04scUJBQVU7QUFDUix5QkFBWTtBQURKO0FBREo7QUFKSDtBQWZDO0FBRFEsS0FBcEI7O0FBNkJBLFFBQUkzQixXQUFXNEIsU0FBZixFQUEwQjtBQUN4QmpCLGFBQU9DLEtBQVAsQ0FBYSxRQUFiLElBQXlCLG1FQUFBaUIsQ0FBVWhCLGFBQVYsRUFBeUJiLE1BQXpCLENBQXpCLENBRHdCLENBQ2tDO0FBQzFEO0FBQ0Q7O0FBQ0QsU0FBSzhCLGlCQUFMLEdBQXlCLFVBQUNDLEdBQUQ7QUFBQSxhQUFTcEIsT0FBT0MsS0FBUCxDQUFhWCxRQUFiLENBQXNCNkIsaUJBQXRCLENBQXdDQyxHQUF4QyxDQUFUO0FBQUEsS0FBekI7O0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixVQUFDRCxHQUFELEVBQU1FLEdBQU47QUFBQSxhQUFjLE1BQUtoQyxRQUFMLENBQWNpQyxjQUFkLENBQTZCSCxHQUE3QixFQUFrQ0UsR0FBbEMsQ0FBZDtBQUFBLEtBQXZCOztBQUNBLFNBQUtFLG1CQUFMLEdBQTJCLFVBQUNDLElBQUQ7QUFBQSxhQUFVLE1BQUtuQyxRQUFMLENBQWNpQyxjQUFkLENBQTZCRSxLQUFLQyxLQUFMLENBQVdDLElBQXhDLEVBQThDRixJQUE5QyxDQUFWO0FBQUEsS0FBM0I7O0FBQ0EsU0FBS25DLFFBQUwsQ0FBY3NDLElBQWQsR0FoRHVCLENBa0R2QjtBQUNEOztXQUVNVCxpQiw4QkFBa0JDLEcsRUFBSztBQUM1QixXQUFPcEIsT0FBT0MsS0FBUCxDQUFhWCxRQUFiLENBQXNCNkIsaUJBQXRCLENBQXdDQyxHQUF4QyxDQUFQO0FBQ0QsRzs7V0FFTUMsZSw0QkFBZ0JELEcsRUFBS0UsRyxFQUFLO0FBQy9CLFFBQUl0QixPQUFPQyxLQUFQLEtBQWlCZ0IsU0FBckIsRUFBZ0M7QUFDOUJZLGNBQVFDLElBQVIsQ0FBYSxnQ0FBYjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU85QixPQUFPQyxLQUFQLENBQWFYLFFBQWIsQ0FBc0JpQyxjQUF0QixDQUFxQ0gsR0FBckMsRUFBMENFLEdBQTFDLENBQVA7QUFDRDtBQUNGLEc7OztLQUdIOzs7QUFDQXRCLE9BQU8sT0FBUCxJQUFrQlosUUFBbEIiLCJmaWxlIjoiLi9zcmMvc3B5bmUvc3B5bmUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5uZWxzQmFzZUNvbnRyb2xsZXJ9IGZyb20gJy4vY2hhbm5lbHMvY2hhbm5lbHMtYmFzZS1jb250cm9sbGVyJztcbmltcG9ydCB7RG9tSXRlbX0gZnJvbSAnLi92aWV3cy9kb20taXRlbSc7XG5pbXBvcnQge1ZpZXdUb0RvbU1lZGlhdG9yfSBmcm9tICcuL3ZpZXdzL3ZpZXctdG8tZG9tLW1lZGlhdG9yJztcbmltcG9ydCB7Vmlld1N0cmVhbX0gZnJvbSAnLi92aWV3cy92aWV3LXN0cmVhbSc7XG5pbXBvcnQge1ZpZXdTdHJlYW1Ccm9hZGNhc3Rlcn0gZnJvbSAnLi92aWV3cy92aWV3LXN0cmVhbS1icm9hZGNhc3Rlcic7XG5pbXBvcnQge0NoYW5uZWxzUGF5bG9hZH0gZnJvbSAnLi9jaGFubmVscy9jaGFubmVscy1wYXlsb2FkJztcbmltcG9ydCB7Q2hhbm5lbHNCYXNlfSBmcm9tICcuL2NoYW5uZWxzL2NoYW5uZWxzLWJhc2UnO1xuaW1wb3J0IHtDaGFubmVsc0Jhc2VEYXRhfSBmcm9tICcuL2NoYW5uZWxzL2NoYW5uZWxzLWJhc2UtZGF0YSc7XG5pbXBvcnQge0NoYW5uZWxTdHJlYW1JdGVtfSBmcm9tICcuL2NoYW5uZWxzL2NoYW5uZWwtc3RyZWFtLWl0ZW0nO1xuaW1wb3J0IHtkZWVwTWVyZ2V9IGZyb20gJy4vdXRpbHMvZGVlcC1tZXJnZSc7XG5cbmNsYXNzIFNweW5lQXBwIHtcbiAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcbiAgICB0aGlzLmNoYW5uZWxzID0gbmV3IENoYW5uZWxzQmFzZUNvbnRyb2xsZXIoKTtcbiAgICB0aGlzLlZFUlNJT04gPSAnMC43LjE0LUJFVEEnO1xuICAgIHRoaXMuVmlld1N0cmVhbSA9IFZpZXdTdHJlYW07XG4gICAgdGhpcy5CYXNpY1ZpZXcgPSBWaWV3VG9Eb21NZWRpYXRvcjtcbiAgICB0aGlzLkRvbUl0ZW0gPSBEb21JdGVtO1xuICAgIHRoaXMuVmlld1N0cmVhbUJyb2FkY2FzdGVyID0gVmlld1N0cmVhbUJyb2FkY2FzdGVyO1xuICAgIHRoaXMuQ2hhbm5lbHNQYXlsb2FkID0gQ2hhbm5lbHNQYXlsb2FkO1xuICAgIHRoaXMuQ2hhbm5lbHNCYXNlQ29udHJvbGxlciA9IENoYW5uZWxzQmFzZUNvbnRyb2xsZXI7XG4gICAgdGhpcy5DaGFubmVsc0Jhc2UgPSBDaGFubmVsc0Jhc2U7XG4gICAgdGhpcy5DaGFubmVsU3RyZWFtSXRlbSA9IENoYW5uZWxTdHJlYW1JdGVtO1xuICAgIHdpbmRvdy5TcHluZSA9IHRoaXM7XG4gICAgbGV0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBjaGFubmVsczoge1xuICAgICAgICBXSU5ET1c6IHtcbiAgICAgICAgICBtZWRpcVF1ZXJpZXM6IHtcbiAgICAgICAgICAvKiAgJ3Rlc3QnOiAnKG1heC13aWR0aDogNTAwcHgpJyxcbiAgICAgICAgICAgICduZXdUZXN0JzogJyhtYXgtd2lkdGg6IDgwMHB4KScqL1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXZlbnRzOiBbXSxcbiAgICAgICAgICBsaXN0ZW5Gb3JSZXNpemU6IHRydWUsXG4gICAgICAgICAgbGlzdGVuRm9yT3JpZW50YXRpb246IHRydWUsXG4gICAgICAgICAgbGlzdGVuRm9yU2Nyb2xsOiB0cnVlLFxuICAgICAgICAgIGxpc3RlbkZvck1vdXNlV2hlZWw6IGZhbHNlLFxuICAgICAgICAgIGRlYm91bmNlTVNUaW1lRm9yUmVzaXplOiAyMDAsXG4gICAgICAgICAgZGVib3VuY2VNU1RpbWVGb3JTY3JvbGw6IDE1MFxuICAgICAgICB9LFxuXG4gICAgICAgIFJPVVRFOiB7XG4gICAgICAgICAgdHlwZTogJ3NsYXNoJyxcbiAgICAgICAgICBpc0hhc2g6IGZhbHNlLFxuICAgICAgICAgIGlzSGlkZGVuOiBmYWxzZSxcbiAgICAgICAgICByb3V0ZXM6IHtcbiAgICAgICAgICAgICdyb3V0ZScgOiB7XG4gICAgICAgICAgICAgICdrZXl3b3JkJyA6ICdjaGFuZ2UnXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChjb25maWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd2luZG93LlNweW5lWydjb25maWcnXSA9IGRlZXBNZXJnZShkZWZhdWx0Q29uZmlnLCBjb25maWcpOy8vIE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRDb25maWcsIGNvbmZpZyk7Ly8gY29uZmlnICE9PSB1bmRlZmluZWQgPyBjb25maWcgOiBkZWZhdWx0Q29uZmlnO1xuICAgICAgLy8gY29uc29sZS5sb2coXCJDT05GSUcgSVMgXCIse2RlZmF1bHRDb25maWcsIGNvbmZpZ30sd2luZG93LlNweW5lLmNvbmZpZylcbiAgICB9XG4gICAgdGhpcy5nZXRDaGFubmVsQWN0aW9ucyA9IChzdHIpID0+IHdpbmRvdy5TcHluZS5jaGFubmVscy5nZXRDaGFubmVsQWN0aW9ucyhzdHIpO1xuICAgIHRoaXMucmVnaXN0ZXJDaGFubmVsID0gKHN0ciwgdmFsKSA9PiB0aGlzLmNoYW5uZWxzLnJlZ2lzdGVyU3RyZWFtKHN0ciwgdmFsKTtcbiAgICB0aGlzLnJlZ2lzdGVyRGF0YUNoYW5uZWwgPSAob2JzJCkgPT4gdGhpcy5jaGFubmVscy5yZWdpc3RlclN0cmVhbShvYnMkLnByb3BzLm5hbWUsIG9icyQpO1xuICAgIHRoaXMuY2hhbm5lbHMuaW5pdCgpO1xuXG4gICAgLy8gd2luZG93LlNweW5lLmNoYW5uZWxzLmluaXQoKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRDaGFubmVsQWN0aW9ucyhzdHIpIHtcbiAgICByZXR1cm4gd2luZG93LlNweW5lLmNoYW5uZWxzLmdldENoYW5uZWxBY3Rpb25zKHN0cik7XG4gIH1cblxuICBzdGF0aWMgcmVnaXN0ZXJDaGFubmVsKHN0ciwgdmFsKSB7XG4gICAgaWYgKHdpbmRvdy5TcHluZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1NweW5lIGhhcyBub3QgYmVlbiBpbml0aWFsaXplZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93LlNweW5lLmNoYW5uZWxzLnJlZ2lzdGVyU3RyZWFtKHN0ciwgdmFsKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gbGV0IFNweW5lID0ge1ZpZXdUb0RvbU1lZGlhdG9yLCBDaGFubmVsc0Jhc2UsIENoYW5uZWxzQmFzZUNvbnRyb2xsZXIsIENoYW5uZWxzUGF5bG9hZCwgRG9tSXRlbSwgVmlld1N0cmVhbSwgVmlld1N0cmVhbUJyb2FkY2FzdGVyLCByZWdpc3RlckNoYW5uZWx9O1xud2luZG93WydTcHluZSddID0gU3B5bmVBcHA7XG5leHBvcnQge1xuICBWaWV3VG9Eb21NZWRpYXRvcixcbiAgQ2hhbm5lbHNCYXNlLFxuICBDaGFubmVsc0Jhc2VEYXRhLFxuICBDaGFubmVsc0Jhc2VDb250cm9sbGVyLFxuICBDaGFubmVsc1BheWxvYWQsXG4gIENoYW5uZWxTdHJlYW1JdGVtLFxuICBEb21JdGVtLFxuICBWaWV3U3RyZWFtLFxuICBWaWV3U3RyZWFtQnJvYWRjYXN0ZXIsXG4gIFNweW5lQXBwXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/spyne.js\n')},"./src/spyne/utils/channel-config-validator.js":
/*!*****************************************************!*\
  !*** ./src/spyne/utils/channel-config-validator.js ***!
  \*****************************************************/
/*! exports provided: validate */function srcSpyneUtilsChannelConfigValidatorJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validate", function() { return validate; });\n/* harmony import */ var data_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! data.validation */ "./node_modules/data.validation/lib/index.js");\n/* harmony import */ var data_validation__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(data_validation__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ramda */ "ramda");\n/* harmony import */ var ramda__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ramda__WEBPACK_IMPORTED_MODULE_1__);\n\n\nvar success = data_validation__WEBPACK_IMPORTED_MODULE_0___default.a.Success;\nvar failure = data_validation__WEBPACK_IMPORTED_MODULE_0___default.a.Failure;\nvar validate = Object(ramda__WEBPACK_IMPORTED_MODULE_1__["curry"])(function (validations, thing) {\n  var initial = success(Object(ramda__WEBPACK_IMPORTED_MODULE_1__["curryN"])(Object(ramda__WEBPACK_IMPORTED_MODULE_1__["length"])(validations), Object(ramda__WEBPACK_IMPORTED_MODULE_1__["always"])(thing)));\n\n  var run = function run(acc, v) {\n    return acc.ap(v.predicate(thing) ? success(thing) : failure([v.error]));\n  };\n\n  return Object(ramda__WEBPACK_IMPORTED_MODULE_1__["reduce"])(run, initial, validations);\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9jaGFubmVsLWNvbmZpZy12YWxpZGF0b3IuanM/ZjI2NSJdLCJuYW1lcyI6WyJzdWNjZXNzIiwiVmFsaWRhdGlvbiIsIlN1Y2Nlc3MiLCJmYWlsdXJlIiwiRmFpbHVyZSIsInZhbGlkYXRlIiwiY3VycnkiLCJ2YWxpZGF0aW9ucyIsInRoaW5nIiwiaW5pdGlhbCIsImN1cnJ5TiIsImxlbmd0aCIsImFsd2F5cyIsInJ1biIsImFjYyIsInYiLCJhcCIsInByZWRpY2F0ZSIsImVycm9yIiwicmVkdWNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0EsSUFBTUEsVUFBVSxzREFBQUMsQ0FBV0MsT0FBM0I7QUFDQSxJQUFNQyxVQUFVLHNEQUFBRixDQUFXRyxPQUEzQjtBQUNBLElBQU1DLFdBQVcsbURBQUFDLENBQU0sVUFBQ0MsV0FBRCxFQUFjQyxLQUFkLEVBQXdCO0FBQzdDLE1BQU1DLFVBQWNULFFBQVEsb0RBQUFVLENBQU8sb0RBQUFDLENBQU9KLFdBQVAsQ0FBUCxFQUE0QixvREFBQUssQ0FBT0osS0FBUCxDQUE1QixDQUFSLENBQXBCOztBQUNBLE1BQU1LLE1BQU0sU0FBTkEsR0FBTSxDQUFDQyxHQUFELEVBQU1DLENBQU47QUFBQSxXQUNWRCxJQUFJRSxFQUFKLENBQU9ELEVBQUVFLFNBQUYsQ0FBWVQsS0FBWixJQUFxQlIsUUFBUVEsS0FBUixDQUFyQixHQUFzQ0wsUUFBUSxDQUFDWSxFQUFFRyxLQUFILENBQVIsQ0FBN0MsQ0FEVTtBQUFBLEdBQVo7O0FBRUEsU0FBTyxvREFBQUMsQ0FBT04sR0FBUCxFQUFZSixPQUFaLEVBQXFCRixXQUFyQixDQUFQO0FBQ0QsQ0FMZ0IsQ0FBakIiLCJmaWxlIjoiLi9zcmMvc3B5bmUvdXRpbHMvY2hhbm5lbC1jb25maWctdmFsaWRhdG9yLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZhbGlkYXRpb24gZnJvbSAnZGF0YS52YWxpZGF0aW9uJztcbmltcG9ydCB7IGN1cnJ5LCBjdXJyeU4sIHJlZHVjZSwgbGVuZ3RoLCBhbHdheXMgfSBmcm9tICdyYW1kYSc7XG5jb25zdCBzdWNjZXNzID0gVmFsaWRhdGlvbi5TdWNjZXNzO1xuY29uc3QgZmFpbHVyZSA9IFZhbGlkYXRpb24uRmFpbHVyZTtcbmNvbnN0IHZhbGlkYXRlID0gY3VycnkoKHZhbGlkYXRpb25zLCB0aGluZykgPT4ge1xuICBjb25zdCBpbml0aWFsID0gICAgIHN1Y2Nlc3MoY3VycnlOKGxlbmd0aCh2YWxpZGF0aW9ucyksIGFsd2F5cyh0aGluZykpKTtcbiAgY29uc3QgcnVuID0gKGFjYywgdikgPT5cbiAgICBhY2MuYXAodi5wcmVkaWNhdGUodGhpbmcpID8gc3VjY2Vzcyh0aGluZykgOiBmYWlsdXJlKFt2LmVycm9yXSkpO1xuICByZXR1cm4gcmVkdWNlKHJ1biwgaW5pdGlhbCwgdmFsaWRhdGlvbnMpO1xufSk7XG5leHBvcnQge3ZhbGlkYXRlfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/spyne/utils/channel-config-validator.js\n')},"./src/spyne/utils/channel-util-dom.js":
/*!*********************************************!*\
  !*** ./src/spyne/utils/channel-util-dom.js ***!
  \*********************************************/
/*! exports provided: ChannelUtilsDom */function srcSpyneUtilsChannelUtilDomJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChannelUtilsDom", function() { return ChannelUtilsDom; });\nvar Rx = __webpack_require__(/*! rxjs */ "rxjs");\n\nvar R = __webpack_require__(/*! ramda */ "ramda");\n\nvar ChannelUtilsDom =\n/*#__PURE__*/\nfunction () {\n  function ChannelUtilsDom() {\n    this.createDomObservableFromEvent = ChannelUtilsDom.createDomObservableFromEvent.bind(this);\n  }\n\n  ChannelUtilsDom.createDomObservableFromEvent = function createDomObservableFromEvent(eventName, mapFn, isPassive) {\n    if (isPassive === void 0) {\n      isPassive = true;\n    }\n\n    var addHandler = function addHandler(handler) {\n      return window.addEventListener(eventName, handler, {\n        passive: isPassive\n      });\n    };\n\n    var removeHandler = function removeHandler() {\n      window[eventName] = function (p) {\n        return p;\n      };\n    };\n\n    mapFn = mapFn === undefined ? function (p) {\n      return p;\n    } : mapFn;\n    return Rx.Observable.fromEventPattern(addHandler, removeHandler).map(mapFn);\n  }; // MEDIA QUERIES\n\n\n  ChannelUtilsDom.createMediaQuery = function createMediaQuery(str) {\n    var mq = window.matchMedia(str);\n    this.checkIfValidMediaQuery(mq, str);\n    return mq;\n  };\n\n  ChannelUtilsDom.checkIfValidMediaQuery = function checkIfValidMediaQuery(mq, str) {\n    var noSpaces = function noSpaces(str) {\n      return str.replace(/\\s+/gm, \'\');\n    };\n\n    var isValidBool = mq.constructor.name === \'MediaQueryList\' && noSpaces(mq.media) === noSpaces(str);\n\n    var warnMsg = function warnMsg(str) {\n      return console.warn("Spyne Warning: the following query string, \\"" + str + "\\", does not match \\"" + mq.media + "\\" and may not be a valid Media Query item!");\n    };\n\n    if (isValidBool === false) {\n      warnMsg(str);\n    }\n\n    return isValidBool;\n  };\n\n  ChannelUtilsDom.createMediaQueryHandler = function createMediaQueryHandler(query, key) {\n    var keyFn = function keyFn(key) {\n      return function (p) {\n        p[\'mediaQueryName\'] = key;\n        return p;\n      };\n    };\n\n    var mapKey = keyFn(key);\n\n    var handlers = function handlers(q) {\n      return {\n        addHandler: function addHandler(handler) {\n          q.onchange = handler;\n        },\n        removeHandler: function removeHandler(handler) {\n          q.onchange = function () {};\n        }\n      };\n    };\n\n    var mediaQueryHandler = handlers(query);\n    return new Rx.Observable.fromEventPattern(mediaQueryHandler.addHandler, mediaQueryHandler.removeHandler).map(mapKey);\n  };\n\n  ChannelUtilsDom.createMergedObsFromObj = function createMergedObsFromObj(config) {\n    var mediaQueriesObj = config.mediqQueries;\n    var arr = [];\n\n    var loopQueries = function loopQueries(val, key, obj) {\n      var mq = ChannelUtilsDom.createMediaQuery(val);\n      arr.push(ChannelUtilsDom.createMediaQueryHandler(mq, key)); // return arr;\n    };\n\n    R.mapObjIndexed(loopQueries, mediaQueriesObj); // let obs$ = Rx.Observable.merge(...arr);\n    // console.log(\'arr is \',arr);\n\n    return arr;\n  };\n\n  return ChannelUtilsDom;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9jaGFubmVsLXV0aWwtZG9tLmpzP2NlM2YiXSwibmFtZXMiOlsiUngiLCJyZXF1aXJlIiwiUiIsIkNoYW5uZWxVdGlsc0RvbSIsImNyZWF0ZURvbU9ic2VydmFibGVGcm9tRXZlbnQiLCJiaW5kIiwiZXZlbnROYW1lIiwibWFwRm4iLCJpc1Bhc3NpdmUiLCJhZGRIYW5kbGVyIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZXIiLCJwYXNzaXZlIiwicmVtb3ZlSGFuZGxlciIsInAiLCJ1bmRlZmluZWQiLCJPYnNlcnZhYmxlIiwiZnJvbUV2ZW50UGF0dGVybiIsIm1hcCIsImNyZWF0ZU1lZGlhUXVlcnkiLCJzdHIiLCJtcSIsIm1hdGNoTWVkaWEiLCJjaGVja0lmVmFsaWRNZWRpYVF1ZXJ5Iiwibm9TcGFjZXMiLCJyZXBsYWNlIiwiaXNWYWxpZEJvb2wiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJtZWRpYSIsIndhcm5Nc2ciLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZU1lZGlhUXVlcnlIYW5kbGVyIiwicXVlcnkiLCJrZXkiLCJrZXlGbiIsIm1hcEtleSIsImhhbmRsZXJzIiwicSIsIm9uY2hhbmdlIiwibWVkaWFRdWVyeUhhbmRsZXIiLCJjcmVhdGVNZXJnZWRPYnNGcm9tT2JqIiwiY29uZmlnIiwibWVkaWFRdWVyaWVzT2JqIiwibWVkaXFRdWVyaWVzIiwiYXJyIiwibG9vcFF1ZXJpZXMiLCJ2YWwiLCJvYmoiLCJwdXNoIiwibWFwT2JqSW5kZXhlZCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUEsSUFBTUEsS0FBSyxtQkFBQUMsQ0FBUSxrQkFBUixDQUFYOztBQUNBLElBQU1DLElBQUksbUJBQUFELENBQVEsb0JBQVIsQ0FBVjs7QUFFQSxJQUFhRSxlQUFiO0FBQUE7QUFBQTtBQUNFLDZCQUFjO0FBQ1osU0FBS0MsNEJBQUwsR0FBb0NELGdCQUFnQkMsNEJBQWhCLENBQTZDQyxJQUE3QyxDQUNsQyxJQURrQyxDQUFwQztBQUVEOztBQUpILGtCQU1TRCw0QkFOVCx5Q0FNc0NFLFNBTnRDLEVBTWlEQyxLQU5qRCxFQU13REMsU0FOeEQsRUFNMEU7QUFBQSxRQUFsQkEsU0FBa0I7QUFBbEJBLGVBQWtCLEdBQU4sSUFBTTtBQUFBOztBQUN0RSxRQUFJQyxhQUFhLFNBQWJBLFVBQWE7QUFBQSxhQUFXQyxPQUFPQyxnQkFBUCxDQUF3QkwsU0FBeEIsRUFBbUNNLE9BQW5DLEVBQzFCO0FBQUNDLGlCQUFTTDtBQUFWLE9BRDBCLENBQVg7QUFBQSxLQUFqQjs7QUFFQSxRQUFJTSxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQU07QUFBRUosYUFBT0osU0FBUCxJQUFvQixVQUFDUyxDQUFEO0FBQUEsZUFBT0EsQ0FBUDtBQUFBLE9BQXBCO0FBQStCLEtBQTNEOztBQUNBUixZQUFRQSxVQUFVUyxTQUFWLEdBQXNCLFVBQUNELENBQUQ7QUFBQSxhQUFLQSxDQUFMO0FBQUEsS0FBdEIsR0FBK0JSLEtBQXZDO0FBQ0EsV0FBT1AsR0FBR2lCLFVBQUgsQ0FBY0MsZ0JBQWQsQ0FBK0JULFVBQS9CLEVBQTJDSyxhQUEzQyxFQUEwREssR0FBMUQsQ0FBOERaLEtBQTlELENBQVA7QUFDRCxHQVpILEVBY0U7OztBQWRGLGtCQWVTYSxnQkFmVCw2QkFlMEJDLEdBZjFCLEVBZStCO0FBQzNCLFFBQU1DLEtBQUtaLE9BQU9hLFVBQVAsQ0FBa0JGLEdBQWxCLENBQVg7QUFDQSxTQUFLRyxzQkFBTCxDQUE0QkYsRUFBNUIsRUFBZ0NELEdBQWhDO0FBQ0EsV0FBT0MsRUFBUDtBQUNELEdBbkJIOztBQUFBLGtCQXFCU0Usc0JBckJULG1DQXFCZ0NGLEVBckJoQyxFQXFCb0NELEdBckJwQyxFQXFCeUM7QUFDckMsUUFBTUksV0FBVyxTQUFYQSxRQUFXO0FBQUEsYUFBT0osSUFBSUssT0FBSixDQUFZLE9BQVosRUFBcUIsRUFBckIsQ0FBUDtBQUFBLEtBQWpCOztBQUNBLFFBQU1DLGNBQWNMLEdBQUdNLFdBQUgsQ0FBZUMsSUFBZixLQUF3QixnQkFBeEIsSUFBNENKLFNBQVNILEdBQUdRLEtBQVosTUFBdUJMLFNBQVNKLEdBQVQsQ0FBdkY7O0FBQ0EsUUFBTVUsVUFBVSxTQUFWQSxPQUFVO0FBQUEsYUFBT0MsUUFBUUMsSUFBUixtREFBNERaLEdBQTVELDZCQUFxRkMsR0FBR1EsS0FBeEYsaURBQVA7QUFBQSxLQUFoQjs7QUFDQSxRQUFJSCxnQkFBZ0IsS0FBcEIsRUFBMkI7QUFDekJJLGNBQVFWLEdBQVI7QUFDRDs7QUFDRCxXQUFPTSxXQUFQO0FBQ0QsR0E3Qkg7O0FBQUEsa0JBK0JTTyx1QkEvQlQsb0NBK0JpQ0MsS0EvQmpDLEVBK0J3Q0MsR0EvQnhDLEVBK0I2QztBQUN6QyxRQUFJQyxRQUFRLFNBQVJBLEtBQVE7QUFBQSxhQUFPLGFBQUs7QUFDdEJ0QixVQUFFLGdCQUFGLElBQXNCcUIsR0FBdEI7QUFDQSxlQUFPckIsQ0FBUDtBQUNELE9BSFc7QUFBQSxLQUFaOztBQUtBLFFBQUl1QixTQUFTRCxNQUFNRCxHQUFOLENBQWI7O0FBRUEsUUFBSUcsV0FBVyxTQUFYQSxRQUFXLENBQUNDLENBQUQsRUFBTztBQUNwQixhQUFPO0FBQ0wvQixvQkFBWSxvQkFBQ0csT0FBRCxFQUFhO0FBQUU0QixZQUFFQyxRQUFGLEdBQWE3QixPQUFiO0FBQXVCLFNBRDdDO0FBRUxFLHVCQUFlLHVCQUFDRixPQUFELEVBQWE7QUFBRTRCLFlBQUVDLFFBQUYsR0FBYSxZQUFNLENBQUUsQ0FBckI7QUFBd0I7QUFGakQsT0FBUDtBQUlELEtBTEQ7O0FBTUEsUUFBSUMsb0JBQW9CSCxTQUFTSixLQUFULENBQXhCO0FBQ0EsV0FBTyxJQUFJbkMsR0FBR2lCLFVBQUgsQ0FBY0MsZ0JBQWxCLENBQ0x3QixrQkFBa0JqQyxVQURiLEVBRUxpQyxrQkFBa0I1QixhQUZiLEVBR0pLLEdBSEksQ0FHQW1CLE1BSEEsQ0FBUDtBQUlELEdBbERIOztBQUFBLGtCQW9EU0ssc0JBcERULG1DQW9EZ0NDLE1BcERoQyxFQW9Ed0M7QUFDcEMsUUFBSUMsa0JBQWtCRCxPQUFPRSxZQUE3QjtBQUNBLFFBQUlDLE1BQU0sRUFBVjs7QUFFQSxRQUFNQyxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsR0FBRCxFQUFNYixHQUFOLEVBQVdjLEdBQVgsRUFBbUI7QUFDckMsVUFBSTVCLEtBQUtuQixnQkFBZ0JpQixnQkFBaEIsQ0FBaUM2QixHQUFqQyxDQUFUO0FBQ0FGLFVBQUlJLElBQUosQ0FBU2hELGdCQUFnQitCLHVCQUFoQixDQUF3Q1osRUFBeEMsRUFBNENjLEdBQTVDLENBQVQsRUFGcUMsQ0FHckM7QUFDRCxLQUpEOztBQU1BbEMsTUFBRWtELGFBQUYsQ0FBZ0JKLFdBQWhCLEVBQTZCSCxlQUE3QixFQVZvQyxDQVdwQztBQUNBOztBQUNBLFdBQU9FLEdBQVA7QUFDRCxHQWxFSDs7QUFBQTtBQUFBIiwiZmlsZSI6Ii4vc3JjL3NweW5lL3V0aWxzL2NoYW5uZWwtdXRpbC1kb20uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSeCA9IHJlcXVpcmUoJ3J4anMnKTtcbmNvbnN0IFIgPSByZXF1aXJlKCdyYW1kYScpO1xuXG5leHBvcnQgY2xhc3MgQ2hhbm5lbFV0aWxzRG9tIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jcmVhdGVEb21PYnNlcnZhYmxlRnJvbUV2ZW50ID0gQ2hhbm5lbFV0aWxzRG9tLmNyZWF0ZURvbU9ic2VydmFibGVGcm9tRXZlbnQuYmluZChcbiAgICAgIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZURvbU9ic2VydmFibGVGcm9tRXZlbnQoZXZlbnROYW1lLCBtYXBGbiwgaXNQYXNzaXZlID0gdHJ1ZSkge1xuICAgIGxldCBhZGRIYW5kbGVyID0gaGFuZGxlciA9PiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsXG4gICAgICB7cGFzc2l2ZTogaXNQYXNzaXZlfSk7XG4gICAgbGV0IHJlbW92ZUhhbmRsZXIgPSAoKSA9PiB7IHdpbmRvd1tldmVudE5hbWVdID0gKHApID0+IHA7IH07XG4gICAgbWFwRm4gPSBtYXBGbiA9PT0gdW5kZWZpbmVkID8gKHApPT5wIDogbWFwRm47XG4gICAgcmV0dXJuIFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50UGF0dGVybihhZGRIYW5kbGVyLCByZW1vdmVIYW5kbGVyKS5tYXAobWFwRm4pO1xuICB9XG5cbiAgLy8gTUVESUEgUVVFUklFU1xuICBzdGF0aWMgY3JlYXRlTWVkaWFRdWVyeShzdHIpIHtcbiAgICBjb25zdCBtcSA9IHdpbmRvdy5tYXRjaE1lZGlhKHN0cik7XG4gICAgdGhpcy5jaGVja0lmVmFsaWRNZWRpYVF1ZXJ5KG1xLCBzdHIpO1xuICAgIHJldHVybiBtcTtcbiAgfVxuXG4gIHN0YXRpYyBjaGVja0lmVmFsaWRNZWRpYVF1ZXJ5KG1xLCBzdHIpIHtcbiAgICBjb25zdCBub1NwYWNlcyA9IHN0ciA9PiBzdHIucmVwbGFjZSgvXFxzKy9nbSwgJycpO1xuICAgIGNvbnN0IGlzVmFsaWRCb29sID0gbXEuY29uc3RydWN0b3IubmFtZSA9PT0gJ01lZGlhUXVlcnlMaXN0JyAmJiBub1NwYWNlcyhtcS5tZWRpYSkgPT09IG5vU3BhY2VzKHN0cik7XG4gICAgY29uc3Qgd2Fybk1zZyA9IHN0ciA9PiBjb25zb2xlLndhcm4oYFNweW5lIFdhcm5pbmc6IHRoZSBmb2xsb3dpbmcgcXVlcnkgc3RyaW5nLCBcIiR7c3RyfVwiLCBkb2VzIG5vdCBtYXRjaCBcIiR7bXEubWVkaWF9XCIgYW5kIG1heSBub3QgYmUgYSB2YWxpZCBNZWRpYSBRdWVyeSBpdGVtIWApO1xuICAgIGlmIChpc1ZhbGlkQm9vbCA9PT0gZmFsc2UpIHtcbiAgICAgIHdhcm5Nc2coc3RyKTtcbiAgICB9XG4gICAgcmV0dXJuIGlzVmFsaWRCb29sO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZU1lZGlhUXVlcnlIYW5kbGVyKHF1ZXJ5LCBrZXkpIHtcbiAgICBsZXQga2V5Rm4gPSBrZXkgPT4gcCA9PiB7XG4gICAgICBwWydtZWRpYVF1ZXJ5TmFtZSddID0ga2V5O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfTtcblxuICAgIGxldCBtYXBLZXkgPSBrZXlGbihrZXkpO1xuXG4gICAgbGV0IGhhbmRsZXJzID0gKHEpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFkZEhhbmRsZXI6IChoYW5kbGVyKSA9PiB7IHEub25jaGFuZ2UgPSBoYW5kbGVyOyB9LFxuICAgICAgICByZW1vdmVIYW5kbGVyOiAoaGFuZGxlcikgPT4geyBxLm9uY2hhbmdlID0gKCkgPT4ge307IH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBsZXQgbWVkaWFRdWVyeUhhbmRsZXIgPSBoYW5kbGVycyhxdWVyeSk7XG4gICAgcmV0dXJuIG5ldyBSeC5PYnNlcnZhYmxlLmZyb21FdmVudFBhdHRlcm4oXG4gICAgICBtZWRpYVF1ZXJ5SGFuZGxlci5hZGRIYW5kbGVyLFxuICAgICAgbWVkaWFRdWVyeUhhbmRsZXIucmVtb3ZlSGFuZGxlcilcbiAgICAgIC5tYXAobWFwS2V5KTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVNZXJnZWRPYnNGcm9tT2JqKGNvbmZpZykge1xuICAgIGxldCBtZWRpYVF1ZXJpZXNPYmogPSBjb25maWcubWVkaXFRdWVyaWVzO1xuICAgIGxldCBhcnIgPSBbXTtcblxuICAgIGNvbnN0IGxvb3BRdWVyaWVzID0gKHZhbCwga2V5LCBvYmopID0+IHtcbiAgICAgIGxldCBtcSA9IENoYW5uZWxVdGlsc0RvbS5jcmVhdGVNZWRpYVF1ZXJ5KHZhbCk7XG4gICAgICBhcnIucHVzaChDaGFubmVsVXRpbHNEb20uY3JlYXRlTWVkaWFRdWVyeUhhbmRsZXIobXEsIGtleSkpO1xuICAgICAgLy8gcmV0dXJuIGFycjtcbiAgICB9O1xuXG4gICAgUi5tYXBPYmpJbmRleGVkKGxvb3BRdWVyaWVzLCBtZWRpYVF1ZXJpZXNPYmopO1xuICAgIC8vIGxldCBvYnMkID0gUnguT2JzZXJ2YWJsZS5tZXJnZSguLi5hcnIpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdhcnIgaXMgJyxhcnIpO1xuICAgIHJldHVybiBhcnI7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/spyne/utils/channel-util-dom.js\n')},"./src/spyne/utils/channel-util-route.js":
/*!***********************************************!*\
  !*** ./src/spyne/utils/channel-util-route.js ***!
  \***********************************************/
/*! exports provided: RouteUtils */function srcSpyneUtilsChannelUtilRouteJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouteUtils\", function() { return RouteUtils; });\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar RouteUtils =\n/*#__PURE__*/\nfunction () {\n  function RouteUtils() {\n    this.createPopStateStream = RouteUtils.createPopStateStream.bind(this);\n  }\n\n  RouteUtils.createPopStateStream = function createPopStateStream(subscribeFn) {\n    var addHandler = function addHandler(handler) {\n      window.onpopstate = handler;\n    };\n\n    var removeHandler = function removeHandler() {\n      window.onpopstate = function () {};\n    };\n\n    var popupObs$ = Rx.Observable.fromEventPattern(addHandler, removeHandler);\n    popupObs$.subscribe(subscribeFn);\n  };\n\n  RouteUtils.getLastArrVal = function getLastArrVal(arr) {\n    var getLastParam = function getLastParam(a) {\n      return R.last(a) !== undefined ? R.last(a) : '';\n    };\n\n    return getLastParam(arr);\n  };\n\n  RouteUtils.getRouteArrData = function getRouteArrData(routeArr, paramsArr) {\n    var routeKeywordsArr = R.filter(R.contains(R.__, routeArr), paramsArr);\n    var routeKeyword = RouteUtils.getLastArrVal(routeKeywordsArr); // console.log('arr and keyword ',{routeKeywordsArr, routeKeyword});\n\n    return {\n      routeKeywordsArr: routeKeywordsArr,\n      routeKeyword: routeKeyword\n    };\n  };\n\n  RouteUtils.flattenConfigObject = function flattenConfigObject(obj) {\n    var go = function go(obj_) {\n      return R.chain(function (_ref) {\n        var k = _ref[0],\n            v = _ref[1];\n\n        if (Object.prototype.toString.call(v) === '[object Object]') {\n          return R.map(function (_ref2) {\n            var k_ = _ref2[0],\n                v_ = _ref2[1];\n            return [k + \".\" + k_, v_];\n          }, go(v));\n        } else {\n          return [[k, v]];\n        }\n      }, R.toPairs(obj_));\n    };\n\n    return R.values(R.fromPairs(go(obj)));\n  };\n\n  RouteUtils.getLocationData = function getLocationData() {\n    var locationParamsArr = ['href', 'origin', 'protocol', 'host', 'hostname', 'port', 'pathname', 'search', 'hash'];\n    return R.pickAll(locationParamsArr, window.location);\n  };\n\n  return RouteUtils;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9jaGFubmVsLXV0aWwtcm91dGUuanM/ZTRmMCJdLCJuYW1lcyI6WyJSIiwicmVxdWlyZSIsIlJ4IiwiUm91dGVVdGlscyIsImNyZWF0ZVBvcFN0YXRlU3RyZWFtIiwiYmluZCIsInN1YnNjcmliZUZuIiwiYWRkSGFuZGxlciIsImhhbmRsZXIiLCJ3aW5kb3ciLCJvbnBvcHN0YXRlIiwicmVtb3ZlSGFuZGxlciIsInBvcHVwT2JzJCIsIk9ic2VydmFibGUiLCJmcm9tRXZlbnRQYXR0ZXJuIiwic3Vic2NyaWJlIiwiZ2V0TGFzdEFyclZhbCIsImFyciIsImdldExhc3RQYXJhbSIsImEiLCJsYXN0IiwidW5kZWZpbmVkIiwiZ2V0Um91dGVBcnJEYXRhIiwicm91dGVBcnIiLCJwYXJhbXNBcnIiLCJyb3V0ZUtleXdvcmRzQXJyIiwiZmlsdGVyIiwiY29udGFpbnMiLCJfXyIsInJvdXRlS2V5d29yZCIsImZsYXR0ZW5Db25maWdPYmplY3QiLCJvYmoiLCJnbyIsImNoYWluIiwiayIsInYiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJtYXAiLCJrXyIsInZfIiwidG9QYWlycyIsIm9ial8iLCJ2YWx1ZXMiLCJmcm9tUGFpcnMiLCJnZXRMb2NhdGlvbkRhdGEiLCJsb2NhdGlvblBhcmFtc0FyciIsInBpY2tBbGwiLCJsb2NhdGlvbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUEsSUFBTUEsSUFBSSxtQkFBQUMsQ0FBUSxvQkFBUixDQUFWOztBQUNBLElBQU1DLEtBQUssbUJBQUFELENBQVEsa0JBQVIsQ0FBWDs7QUFFQSxJQUFhRSxVQUFiO0FBQUE7QUFBQTtBQUNFLHdCQUFjO0FBQ1osU0FBS0Msb0JBQUwsR0FBNEJELFdBQVdDLG9CQUFYLENBQWdDQyxJQUFoQyxDQUFxQyxJQUFyQyxDQUE1QjtBQUNEOztBQUhILGFBS1NELG9CQUxULGlDQUs4QkUsV0FMOUIsRUFLMkM7QUFDdkMsUUFBSUMsYUFBYSxTQUFiQSxVQUFhLENBQVNDLE9BQVQsRUFBa0I7QUFDakNDLGFBQU9DLFVBQVAsR0FBb0JGLE9BQXBCO0FBQ0QsS0FGRDs7QUFHQSxRQUFJRyxnQkFBZ0IsU0FBaEJBLGFBQWdCLEdBQVc7QUFDN0JGLGFBQU9DLFVBQVAsR0FBb0IsWUFBVyxDQUFFLENBQWpDO0FBQ0QsS0FGRDs7QUFHQSxRQUFJRSxZQUFZVixHQUFHVyxVQUFILENBQWNDLGdCQUFkLENBQStCUCxVQUEvQixFQUEyQ0ksYUFBM0MsQ0FBaEI7QUFFQUMsY0FBVUcsU0FBVixDQUFvQlQsV0FBcEI7QUFDRCxHQWZIOztBQUFBLGFBaUJTVSxhQWpCVCwwQkFpQnVCQyxHQWpCdkIsRUFpQjRCO0FBQ3hCLFFBQU1DLGVBQWUsU0FBZkEsWUFBZSxDQUFDQyxDQUFEO0FBQUEsYUFBT25CLEVBQUVvQixJQUFGLENBQU9ELENBQVAsTUFBY0UsU0FBZCxHQUEwQnJCLEVBQUVvQixJQUFGLENBQU9ELENBQVAsQ0FBMUIsR0FBc0MsRUFBN0M7QUFBQSxLQUFyQjs7QUFDQSxXQUFPRCxhQUFhRCxHQUFiLENBQVA7QUFDRCxHQXBCSDs7QUFBQSxhQXNCU0ssZUF0QlQsNEJBc0J5QkMsUUF0QnpCLEVBc0JtQ0MsU0F0Qm5DLEVBc0I4QztBQUMxQyxRQUFJQyxtQkFBb0J6QixFQUFFMEIsTUFBRixDQUFTMUIsRUFBRTJCLFFBQUYsQ0FBVzNCLEVBQUU0QixFQUFiLEVBQWlCTCxRQUFqQixDQUFULEVBQXFDQyxTQUFyQyxDQUF4QjtBQUNBLFFBQU1LLGVBQWUxQixXQUFXYSxhQUFYLENBQXlCUyxnQkFBekIsQ0FBckIsQ0FGMEMsQ0FHMUM7O0FBQ0EsV0FBTztBQUFDQSx3Q0FBRDtBQUFtQkk7QUFBbkIsS0FBUDtBQUNELEdBM0JIOztBQUFBLGFBNkJTQyxtQkE3QlQsZ0NBNkI2QkMsR0E3QjdCLEVBNkJrQztBQUM5QixRQUFNQyxLQUFLLFNBQUxBLEVBQUs7QUFBQSxhQUFRaEMsRUFBRWlDLEtBQUYsQ0FBUSxnQkFBWTtBQUFBLFlBQVZDLENBQVU7QUFBQSxZQUFQQyxDQUFPOztBQUNyQyxZQUFJQyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JKLENBQS9CLE1BQXNDLGlCQUExQyxFQUE2RDtBQUMzRCxpQkFBT25DLEVBQUV3QyxHQUFGLENBQU07QUFBQSxnQkFBRUMsRUFBRjtBQUFBLGdCQUFNQyxFQUFOO0FBQUEsbUJBQWMsQ0FBSVIsQ0FBSixTQUFTTyxFQUFULEVBQWVDLEVBQWYsQ0FBZDtBQUFBLFdBQU4sRUFBd0NWLEdBQUdHLENBQUgsQ0FBeEMsQ0FBUDtBQUNELFNBRkQsTUFFTztBQUNMLGlCQUFPLENBQUMsQ0FBQ0QsQ0FBRCxFQUFJQyxDQUFKLENBQUQsQ0FBUDtBQUNEO0FBQ0YsT0FOa0IsRUFNaEJuQyxFQUFFMkMsT0FBRixDQUFVQyxJQUFWLENBTmdCLENBQVI7QUFBQSxLQUFYOztBQVFBLFdBQU81QyxFQUFFNkMsTUFBRixDQUFTN0MsRUFBRThDLFNBQUYsQ0FBWWQsR0FBR0QsR0FBSCxDQUFaLENBQVQsQ0FBUDtBQUNELEdBdkNIOztBQUFBLGFBeUNTZ0IsZUF6Q1QsOEJBeUMyQjtBQUN2QixRQUFNQyxvQkFBb0IsQ0FDeEIsTUFEd0IsRUFFeEIsUUFGd0IsRUFHeEIsVUFId0IsRUFJeEIsTUFKd0IsRUFLeEIsVUFMd0IsRUFNeEIsTUFOd0IsRUFPeEIsVUFQd0IsRUFReEIsUUFSd0IsRUFTeEIsTUFUd0IsQ0FBMUI7QUFVQSxXQUFPaEQsRUFBRWlELE9BQUYsQ0FBVUQsaUJBQVYsRUFBNkJ2QyxPQUFPeUMsUUFBcEMsQ0FBUDtBQUNELEdBckRIOztBQUFBO0FBQUEiLCJmaWxlIjoiLi9zcmMvc3B5bmUvdXRpbHMvY2hhbm5lbC11dGlsLXJvdXRlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUiA9IHJlcXVpcmUoJ3JhbWRhJyk7XG5jb25zdCBSeCA9IHJlcXVpcmUoJ3J4anMnKTtcblxuZXhwb3J0IGNsYXNzIFJvdXRlVXRpbHMge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNyZWF0ZVBvcFN0YXRlU3RyZWFtID0gUm91dGVVdGlscy5jcmVhdGVQb3BTdGF0ZVN0cmVhbS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVBvcFN0YXRlU3RyZWFtKHN1YnNjcmliZUZuKSB7XG4gICAgbGV0IGFkZEhhbmRsZXIgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICB3aW5kb3cub25wb3BzdGF0ZSA9IGhhbmRsZXI7XG4gICAgfTtcbiAgICBsZXQgcmVtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgd2luZG93Lm9ucG9wc3RhdGUgPSBmdW5jdGlvbigpIHt9O1xuICAgIH07XG4gICAgbGV0IHBvcHVwT2JzJCA9IFJ4Lk9ic2VydmFibGUuZnJvbUV2ZW50UGF0dGVybihhZGRIYW5kbGVyLCByZW1vdmVIYW5kbGVyKTtcblxuICAgIHBvcHVwT2JzJC5zdWJzY3JpYmUoc3Vic2NyaWJlRm4pO1xuICB9XG5cbiAgc3RhdGljIGdldExhc3RBcnJWYWwoYXJyKSB7XG4gICAgY29uc3QgZ2V0TGFzdFBhcmFtID0gKGEpID0+IFIubGFzdChhKSAhPT0gdW5kZWZpbmVkID8gUi5sYXN0KGEpIDogJyc7XG4gICAgcmV0dXJuIGdldExhc3RQYXJhbShhcnIpO1xuICB9XG5cbiAgc3RhdGljIGdldFJvdXRlQXJyRGF0YShyb3V0ZUFyciwgcGFyYW1zQXJyKSB7XG4gICAgbGV0IHJvdXRlS2V5d29yZHNBcnIgPSAgUi5maWx0ZXIoUi5jb250YWlucyhSLl9fLCByb3V0ZUFyciksIHBhcmFtc0Fycik7XG4gICAgY29uc3Qgcm91dGVLZXl3b3JkID0gUm91dGVVdGlscy5nZXRMYXN0QXJyVmFsKHJvdXRlS2V5d29yZHNBcnIpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdhcnIgYW5kIGtleXdvcmQgJyx7cm91dGVLZXl3b3Jkc0Fyciwgcm91dGVLZXl3b3JkfSk7XG4gICAgcmV0dXJuIHtyb3V0ZUtleXdvcmRzQXJyLCByb3V0ZUtleXdvcmR9O1xuICB9XG5cbiAgc3RhdGljIGZsYXR0ZW5Db25maWdPYmplY3Qob2JqKSB7XG4gICAgY29uc3QgZ28gPSBvYmpfID0+IFIuY2hhaW4oKFtrLCB2XSkgPT4ge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICAgICAgcmV0dXJuIFIubWFwKChba18sIHZfXSkgPT4gW2Ake2t9LiR7a199YCwgdl9dLCBnbyh2KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gW1trLCB2XV07XG4gICAgICB9XG4gICAgfSwgUi50b1BhaXJzKG9ial8pKTtcblxuICAgIHJldHVybiBSLnZhbHVlcyhSLmZyb21QYWlycyhnbyhvYmopKSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TG9jYXRpb25EYXRhKCkge1xuICAgIGNvbnN0IGxvY2F0aW9uUGFyYW1zQXJyID0gW1xuICAgICAgJ2hyZWYnLFxuICAgICAgJ29yaWdpbicsXG4gICAgICAncHJvdG9jb2wnLFxuICAgICAgJ2hvc3QnLFxuICAgICAgJ2hvc3RuYW1lJyxcbiAgICAgICdwb3J0JyxcbiAgICAgICdwYXRobmFtZScsXG4gICAgICAnc2VhcmNoJyxcbiAgICAgICdoYXNoJ107XG4gICAgcmV0dXJuIFIucGlja0FsbChsb2NhdGlvblBhcmFtc0Fyciwgd2luZG93LmxvY2F0aW9uKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/utils/channel-util-route.js\n")},"./src/spyne/utils/channel-util-urls.js":
/*!**********************************************!*\
  !*** ./src/spyne/utils/channel-util-urls.js ***!
  \**********************************************/
/*! exports provided: URLUtils */function srcSpyneUtilsChannelUtilUrlsJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"URLUtils\", function() { return URLUtils; });\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar URLUtils =\n/*#__PURE__*/\nfunction () {\n  function URLUtils() {\n    this.checkIfObjIsNotEmptyOrNil = URLUtils.checkIfObjIsNotEmptyOrNil.bind(this);\n  }\n\n  URLUtils.checkIfObjIsNotEmptyOrNil = function checkIfObjIsNotEmptyOrNil(obj) {\n    var isNotEmpty = R.compose(R.complement(R.isEmpty), R.head, R.values);\n    var isNotNil = R.compose(R.complement(R.isNil), R.head, R.values);\n    var isNotNilAndIsNotEmpty = R.allPass([isNotEmpty, isNotNil]);\n    return isNotNilAndIsNotEmpty(obj);\n  };\n\n  URLUtils.checkIfParamValueMatchesRegex = function checkIfParamValueMatchesRegex(paramValue, routeObj) {\n    var rejectParamKey = R.reject(R.equals('keyword'));\n    var keysArr = R.compose(rejectParamKey, R.keys);\n\n    var testForRegexMatch = function testForRegexMatch(str) {\n      return R.test(new RegExp(str), paramValue);\n    };\n\n    var checker = R.compose(R.find(testForRegexMatch), keysArr);\n    var regexMatchStr = checker(routeObj);\n\n    if (R.is(String, regexMatchStr)) {\n      routeObj = R.assoc(paramValue, R.prop(regexMatchStr, routeObj), routeObj);\n    }\n\n    return routeObj;\n  };\n\n  URLUtils.getLocationStrByType = function getLocationStrByType(t, isHash) {\n    if (isHash === void 0) {\n      isHash = false;\n    }\n\n    var type = isHash === true ? 'hash' : t;\n    var typeMap = {\n      'slash': 'pathname',\n      'query': 'search',\n      'hash': 'hash'\n    };\n    var prop = typeMap[type];\n    var str = R.prop(prop, window.location);\n    var checkForSlashAndHash = /^(\\/)?(#)?(\\/)?(.*)$/;\n    return str.replace(checkForSlashAndHash, '$4');\n  };\n\n  URLUtils.createRouteArrayFromParams = function createRouteArrayFromParams(data, route, t, paramsFromLoc) {\n    var _this = this;\n\n    if (t === void 0) {\n      t = 'slash';\n    }\n\n    var urlArr = [];\n\n    var loopThroughParam = function loopThroughParam(routeObj) {\n      var urlObj = {};\n      var keyword = routeObj.keyword; // PARAM FORM SPYNE CONFIG\n\n      var paramValFromData = data[keyword] !== undefined ? data[keyword] : R.prop(keyword, paramsFromLoc); // PULL VALUE FOR THIS PARAM FROM DATA\n\n      var paramValType = typeof routeObj[paramValFromData]; // console.log({routeObj, paramValType, paramValFromData, keyword})\n\n      if (paramValType === 'string') {\n        paramValFromData = routeObj[paramValFromData];\n      } else if (paramValType === 'undefined') {\n        routeObj = _this.checkIfParamValueMatchesRegex(paramValFromData, routeObj);\n      }\n\n      urlObj[keyword] = paramValFromData; // console.log(\"URL OBJ \",urlObj);\n\n      if (_this.checkIfObjIsNotEmptyOrNil(urlObj)) {\n        // console.log(\"FOUND \",{paramValFromData, paramValType, urlObj, routeObj});\n        urlArr.push(urlObj);\n      } else {// console.log(\"NOT FOUND \",paramValFromData, paramValType, urlObj, routeObj);\n      }\n\n      var isObject = R.is(Object, routeObj);\n      var objectParamExists = R.has(paramValFromData, routeObj);\n      var objectContainsRoute = R.has('route', routeObj);\n      var recursivelyCallLoopBool = objectParamExists && isObject; // console.log(\"CHECKS \", {isObject, objectParamExists, objectContainsRoute, recursivelyCallLoopBool})\n\n      if (recursivelyCallLoopBool === true) {\n        var newObj = routeObj[paramValFromData]; // console.log(\"NEW OBJ \",{paramValFromData, routeObj, newObj});\n\n        if (R.has('route', newObj)) {\n          loopThroughParam(newObj.route);\n        }\n      } else if (objectContainsRoute === true && paramValFromData !== undefined) {\n        loopThroughParam(routeObj.route);\n      }\n    };\n\n    loopThroughParam(route);\n    return urlArr;\n  };\n\n  URLUtils.createSlashString = function createSlashString(arr) {\n    var arrClear = R.reject(R.isNil);\n    var notUndefined = R.when(R.complement(R.isNil, R.__), R.join('/'));\n    var joiner = R.compose(notUndefined, arrClear, R.flatten, R.map(R.values));\n    return joiner(arr);\n  };\n\n  URLUtils.createQueryString = function createQueryString(arr) {\n    var arrClear = R.reject(R.isNil);\n    var isNotNilAndIsNotEmpty = this.checkIfObjIsNotEmptyOrNil;\n    var createPair = R.compose(R.join('='), R.flatten, R.toPairs);\n    var checkPair = R.ifElse(isNotNilAndIsNotEmpty, createPair, R.always(undefined));\n    var mapArrayOfPairs = R.map(checkPair);\n    var checkIfStrIsEmpty = R.when(R.complement(R.isEmpty), R.concat('?'));\n    var createQs = R.compose(checkIfStrIsEmpty, R.join('&'), arrClear, mapArrayOfPairs);\n    return createQs(arr);\n  };\n\n  URLUtils.convertParamsToRoute = function convertParamsToRoute(data, r, t, locStr) {\n    if (r === void 0) {\n      r = window.Spyne.config.channels.ROUTE;\n    }\n\n    var urlType = t !== undefined ? t : r.type;\n    var isHash = r.isHash;\n    var route = r.routes.route;\n    var locationStr = locStr !== undefined ? locStr : this.getLocationStrByType(urlType, isHash);\n    var paramsFromCurrentLocation = this.convertRouteToParams(locationStr, r, urlType).keywords;\n    var urlArr = this.createRouteArrayFromParams(data, route, urlType, paramsFromCurrentLocation); // THIS CREATES A QUERY PATH STR\n\n    if (urlType === 'query') {\n      return this.createQueryString(urlArr);\n    } // THIS CREATES A SLASH PATH STR\n\n\n    return this.createSlashString(urlArr);\n  };\n\n  URLUtils.checkIfValueShouldMapToParam = function checkIfValueShouldMapToParam(obj, str) {\n    var invertedObj = R.invert(obj);\n    var checkIfValMapsToParam = R.compose(R.is(String), R.head, R.defaultTo([]), R.prop(str));\n    var getParam = R.compose(R.head, R.prop(str));\n    var strCheck = R.ifElse(checkIfValMapsToParam, getParam, R.always(str));\n    return strCheck(invertedObj);\n  };\n\n  URLUtils.createArrFromSlashStr = function createArrFromSlashStr(str) {\n    var slashRe = /^([/])?(.*)$/;\n    return str.replace(slashRe, '$2').split('/');\n  };\n\n  URLUtils.convertSlashRouteStrToParamsObj = function convertSlashRouteStrToParamsObj(topLevelRoute, str) {\n    var _this2 = this;\n\n    var routeValue = str;\n    var valuesArr = this.createArrFromSlashStr(str);\n    var routeKeywordsArr = [];\n    var routedValuesArr = [];\n    var latestObj = topLevelRoute;\n\n    var createParamsFromStr = function createParamsFromStr(total, currentValue) {\n      var routeValueStr = _this2.checkIfValueShouldMapToParam(latestObj, currentValue);\n\n      latestObj = _this2.checkIfParamValueMatchesRegex(currentValue, latestObj);\n\n      if (latestObj !== undefined) {\n        routeKeywordsArr.push(latestObj.keyword);\n        routedValuesArr.push(routeValueStr);\n      }\n\n      var strPath = [currentValue, 'route'];\n      var routeParamPath = ['route'];\n      var objectFromStr = R.path(strPath, latestObj);\n      var objectFromRouteParam = R.path(routeParamPath, latestObj);\n\n      if (objectFromStr !== undefined) {\n        latestObj = objectFromStr;\n      } else if (objectFromRouteParam !== undefined) {\n        latestObj = objectFromRouteParam;\n      }\n    };\n\n    R.reduce(createParamsFromStr, 0, valuesArr);\n    var keywords = R.zipObj(routeKeywordsArr, routedValuesArr);\n    var routeKeyword = this.getLastArrVal(routeKeywordsArr);\n    return {\n      routeKeywordsArr: routeKeywordsArr,\n      routeKeyword: routeKeyword,\n      keywords: keywords,\n      routeValue: routeValue\n    };\n  };\n\n  URLUtils.getLastArrVal = function getLastArrVal(arr) {\n    var getLastParam = function getLastParam(a) {\n      return R.last(a) !== undefined ? R.last(a) : '';\n    };\n\n    return getLastParam(arr);\n  };\n\n  URLUtils.createDefaultParamFromEmptyStr = function createDefaultParamFromEmptyStr(topLevelRoute, str) {\n    var obj = {};\n    var keyword = topLevelRoute.keyword;\n    obj[keyword] = this.checkIfValueShouldMapToParam(topLevelRoute, str);\n    return obj;\n  };\n\n  URLUtils.convertQueryStrToParams = function convertQueryStrToParams(topLevelRoute, str) {\n    var queryRe = /^([?])?(.*)$/;\n    var routeValue = str;\n    var strArr = str.replace(queryRe, '$2');\n    var convertToParams = R.compose(R.map(R.split('=')), R.split('&'));\n    var paramsArr = convertToParams(strArr);\n    var keywords = R.fromPairs(paramsArr);\n    var routeKeywordsArr = R.map(R.head, paramsArr);\n\n    if (R.isEmpty(str) === true) {\n      keywords = this.createDefaultParamFromEmptyStr(topLevelRoute, str);\n      routeKeywordsArr = R.keys(keywords);\n    }\n\n    var routeKeyword = this.getLastArrVal(routeKeywordsArr);\n    return {\n      routeKeywordsArr: routeKeywordsArr,\n      routeKeyword: routeKeyword,\n      keywords: keywords,\n      routeValue: routeValue\n    };\n  };\n\n  URLUtils.convertRouteToParams = function convertRouteToParams(str, routeConfig, t) {\n    if (routeConfig === undefined) {\n      return {};\n    }\n\n    var type = t !== undefined ? t : routeConfig.type;\n    var topLevelRoute = routeConfig.routes.route;\n\n    if (type === 'query') {\n      return this.convertQueryStrToParams(topLevelRoute, str);\n    }\n\n    return this.convertSlashRouteStrToParamsObj(topLevelRoute, str);\n  };\n\n  return URLUtils;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/utils/channel-util-urls.js\n")},"./src/spyne/utils/deep-merge.js":
/*!***************************************!*\
  !*** ./src/spyne/utils/deep-merge.js ***!
  \***************************************/
/*! exports provided: deepMerge */function srcSpyneUtilsDeepMergeJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"deepMerge\", function() { return deepMerge; });\nfunction isMergeableObject(val) {\n  var nonNullObject = val && typeof val === 'object';\n  return nonNullObject && Object.prototype.toString.call(val) !== '[object RegExp]' && Object.prototype.toString.call(val) !== '[object Date]';\n}\n\nfunction emptyTarget(val) {\n  return Array.isArray(val) ? [] : {};\n}\n\nfunction cloneIfNecessary(value, optionsArgument) {\n  var clone = optionsArgument && optionsArgument.clone === true;\n  return clone && isMergeableObject(value) ? deepMerge(emptyTarget(value), value, optionsArgument) : value;\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n  var destination = target.slice();\n  source.forEach(function (e, i) {\n    if (typeof destination[i] === 'undefined') {\n      destination[i] = cloneIfNecessary(e, optionsArgument);\n    } else if (isMergeableObject(e)) {\n      destination[i] = deepMerge(target[i], e, optionsArgument);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(cloneIfNecessary(e, optionsArgument));\n    }\n  });\n  return destination;\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n  var destination = {};\n\n  if (isMergeableObject(target)) {\n    Object.keys(target).forEach(function (key) {\n      destination[key] = cloneIfNecessary(target[key], optionsArgument);\n    });\n  }\n\n  Object.keys(source).forEach(function (key) {\n    if (!isMergeableObject(source[key]) || !target[key]) {\n      destination[key] = cloneIfNecessary(source[key], optionsArgument);\n    } else {\n      destination[key] = deepMerge(target[key], source[key], optionsArgument);\n    }\n  });\n  return destination;\n}\n\nfunction deepMerge(target, source, optionsArgument) {\n  var array = Array.isArray(source);\n  var options = optionsArgument || {\n    arrayMerge: defaultArrayMerge\n  };\n  var arrayMerge = options.arrayMerge || defaultArrayMerge;\n\n  if (array) {\n    return Array.isArray(target) ? arrayMerge(target, source, optionsArgument) : cloneIfNecessary(source, optionsArgument);\n  } else {\n    return mergeObject(target, source, optionsArgument);\n  }\n}\n\ndeepMerge.all = function deepmergeAll(array, optionsArgument) {\n  if (!Array.isArray(array) || array.length < 2) {\n    throw new Error('first argument should be an array with at least two elements');\n  } // we are sure there are at least 2 values, so it is safe to have no initial value\n\n\n  return array.reduce(function (prev, next) {\n    return deepMerge(prev, next, optionsArgument);\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9kZWVwLW1lcmdlLmpzPzM0MGYiXSwibmFtZXMiOlsiaXNNZXJnZWFibGVPYmplY3QiLCJ2YWwiLCJub25OdWxsT2JqZWN0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwiZW1wdHlUYXJnZXQiLCJBcnJheSIsImlzQXJyYXkiLCJjbG9uZUlmTmVjZXNzYXJ5IiwidmFsdWUiLCJvcHRpb25zQXJndW1lbnQiLCJjbG9uZSIsImRlZXBNZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwidGFyZ2V0Iiwic291cmNlIiwiZGVzdGluYXRpb24iLCJzbGljZSIsImZvckVhY2giLCJlIiwiaSIsImluZGV4T2YiLCJwdXNoIiwibWVyZ2VPYmplY3QiLCJrZXlzIiwia2V5IiwiYXJyYXkiLCJvcHRpb25zIiwiYXJyYXlNZXJnZSIsImFsbCIsImRlZXBtZXJnZUFsbCIsImxlbmd0aCIsIkVycm9yIiwicmVkdWNlIiwicHJldiIsIm5leHQiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBLFNBQVNBLGlCQUFULENBQTJCQyxHQUEzQixFQUFnQztBQUM5QixNQUFJQyxnQkFBZ0JELE9BQU8sT0FBT0EsR0FBUCxLQUFlLFFBQTFDO0FBQ0EsU0FBT0MsaUJBQWlCQyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLEdBQS9CLE1BQXdDLGlCQUF6RCxJQUE4RUUsT0FBT0MsU0FBUCxDQUFpQkMsUUFBakIsQ0FBMEJDLElBQTFCLENBQStCTCxHQUEvQixNQUF3QyxlQUE3SDtBQUNEOztBQUVELFNBQVNNLFdBQVQsQ0FBcUJOLEdBQXJCLEVBQTBCO0FBQ3hCLFNBQU9PLE1BQU1DLE9BQU4sQ0FBY1IsR0FBZCxJQUFxQixFQUFyQixHQUEwQixFQUFqQztBQUNEOztBQUVELFNBQVNTLGdCQUFULENBQTBCQyxLQUExQixFQUFpQ0MsZUFBakMsRUFBa0Q7QUFDaEQsTUFBSUMsUUFBUUQsbUJBQW1CQSxnQkFBZ0JDLEtBQWhCLEtBQTBCLElBQXpEO0FBQ0EsU0FBUUEsU0FBU2Isa0JBQWtCVyxLQUFsQixDQUFWLEdBQXNDRyxVQUFVUCxZQUFZSSxLQUFaLENBQVYsRUFDM0NBLEtBRDJDLEVBQ3BDQyxlQURvQyxDQUF0QyxHQUNxQkQsS0FENUI7QUFFRDs7QUFFRCxTQUFTSSxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLE1BQW5DLEVBQTJDTCxlQUEzQyxFQUE0RDtBQUMxRCxNQUFJTSxjQUFjRixPQUFPRyxLQUFQLEVBQWxCO0FBQ0FGLFNBQU9HLE9BQVAsQ0FBZSxVQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZTtBQUM1QixRQUFJLE9BQU9KLFlBQVlJLENBQVosQ0FBUCxLQUEwQixXQUE5QixFQUEyQztBQUN6Q0osa0JBQVlJLENBQVosSUFBaUJaLGlCQUFpQlcsQ0FBakIsRUFBb0JULGVBQXBCLENBQWpCO0FBQ0QsS0FGRCxNQUVPLElBQUlaLGtCQUFrQnFCLENBQWxCLENBQUosRUFBMEI7QUFDL0JILGtCQUFZSSxDQUFaLElBQWlCUixVQUFVRSxPQUFPTSxDQUFQLENBQVYsRUFBcUJELENBQXJCLEVBQXdCVCxlQUF4QixDQUFqQjtBQUNELEtBRk0sTUFFQSxJQUFJSSxPQUFPTyxPQUFQLENBQWVGLENBQWYsTUFBc0IsQ0FBQyxDQUEzQixFQUE4QjtBQUNuQ0gsa0JBQVlNLElBQVosQ0FBaUJkLGlCQUFpQlcsQ0FBakIsRUFBb0JULGVBQXBCLENBQWpCO0FBQ0Q7QUFDRixHQVJEO0FBU0EsU0FBT00sV0FBUDtBQUNEOztBQUVELFNBQVNPLFdBQVQsQ0FBcUJULE1BQXJCLEVBQTZCQyxNQUE3QixFQUFxQ0wsZUFBckMsRUFBc0Q7QUFDcEQsTUFBSU0sY0FBYyxFQUFsQjs7QUFDQSxNQUFJbEIsa0JBQWtCZ0IsTUFBbEIsQ0FBSixFQUErQjtBQUM3QmIsV0FBT3VCLElBQVAsQ0FBWVYsTUFBWixFQUFvQkksT0FBcEIsQ0FBNEIsVUFBU08sR0FBVCxFQUFjO0FBQ3hDVCxrQkFBWVMsR0FBWixJQUFtQmpCLGlCQUFpQk0sT0FBT1csR0FBUCxDQUFqQixFQUE4QmYsZUFBOUIsQ0FBbkI7QUFDRCxLQUZEO0FBR0Q7O0FBQ0RULFNBQU91QixJQUFQLENBQVlULE1BQVosRUFBb0JHLE9BQXBCLENBQTRCLFVBQVNPLEdBQVQsRUFBYztBQUN4QyxRQUFJLENBQUMzQixrQkFBa0JpQixPQUFPVSxHQUFQLENBQWxCLENBQUQsSUFBbUMsQ0FBQ1gsT0FBT1csR0FBUCxDQUF4QyxFQUFxRDtBQUNuRFQsa0JBQVlTLEdBQVosSUFBbUJqQixpQkFBaUJPLE9BQU9VLEdBQVAsQ0FBakIsRUFBOEJmLGVBQTlCLENBQW5CO0FBQ0QsS0FGRCxNQUVPO0FBQ0xNLGtCQUFZUyxHQUFaLElBQW1CYixVQUFVRSxPQUFPVyxHQUFQLENBQVYsRUFBdUJWLE9BQU9VLEdBQVAsQ0FBdkIsRUFBb0NmLGVBQXBDLENBQW5CO0FBQ0Q7QUFDRixHQU5EO0FBT0EsU0FBT00sV0FBUDtBQUNEOztBQUVELFNBQVNKLFNBQVQsQ0FBbUJFLE1BQW5CLEVBQTJCQyxNQUEzQixFQUFtQ0wsZUFBbkMsRUFBb0Q7QUFDbEQsTUFBSWdCLFFBQVFwQixNQUFNQyxPQUFOLENBQWNRLE1BQWQsQ0FBWjtBQUNBLE1BQUlZLFVBQVVqQixtQkFBbUI7QUFBQ2tCLGdCQUFZZjtBQUFiLEdBQWpDO0FBQ0EsTUFBSWUsYUFBYUQsUUFBUUMsVUFBUixJQUFzQmYsaUJBQXZDOztBQUVBLE1BQUlhLEtBQUosRUFBVztBQUNULFdBQU9wQixNQUFNQyxPQUFOLENBQWNPLE1BQWQsSUFDSGMsV0FBV2QsTUFBWCxFQUFtQkMsTUFBbkIsRUFBMkJMLGVBQTNCLENBREcsR0FFSEYsaUJBQWlCTyxNQUFqQixFQUF5QkwsZUFBekIsQ0FGSjtBQUdELEdBSkQsTUFJTztBQUNMLFdBQU9hLFlBQVlULE1BQVosRUFBb0JDLE1BQXBCLEVBQTRCTCxlQUE1QixDQUFQO0FBQ0Q7QUFDRjs7QUFFREUsVUFBVWlCLEdBQVYsR0FBZ0IsU0FBU0MsWUFBVCxDQUFzQkosS0FBdEIsRUFBNkJoQixlQUE3QixFQUE4QztBQUM1RCxNQUFJLENBQUNKLE1BQU1DLE9BQU4sQ0FBY21CLEtBQWQsQ0FBRCxJQUF5QkEsTUFBTUssTUFBTixHQUFlLENBQTVDLEVBQStDO0FBQzdDLFVBQU0sSUFBSUMsS0FBSixDQUNKLDhEQURJLENBQU47QUFFRCxHQUoyRCxDQU01RDs7O0FBQ0EsU0FBT04sTUFBTU8sTUFBTixDQUFhLFVBQVNDLElBQVQsRUFBZUMsSUFBZixFQUFxQjtBQUN2QyxXQUFPdkIsVUFBVXNCLElBQVYsRUFBZ0JDLElBQWhCLEVBQXNCekIsZUFBdEIsQ0FBUDtBQUNELEdBRk0sQ0FBUDtBQUdELENBVkQiLCJmaWxlIjoiLi9zcmMvc3B5bmUvdXRpbHMvZGVlcC1tZXJnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbCkge1xuICBsZXQgbm9uTnVsbE9iamVjdCA9IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcbiAgcmV0dXJuIG5vbk51bGxPYmplY3QgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IFJlZ0V4cF0nICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5lY2Vzc2FyeSh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gIGxldCBjbG9uZSA9IG9wdGlvbnNBcmd1bWVudCAmJiBvcHRpb25zQXJndW1lbnQuY2xvbmUgPT09IHRydWU7XG4gIHJldHVybiAoY2xvbmUgJiYgaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKSA/IGRlZXBNZXJnZShlbXB0eVRhcmdldCh2YWx1ZSksXG4gICAgdmFsdWUsIG9wdGlvbnNBcmd1bWVudCkgOiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCkge1xuICBsZXQgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgc291cmNlLmZvckVhY2goZnVuY3Rpb24oZSwgaSkge1xuICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZXN0aW5hdGlvbltpXSA9IGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICB9IGVsc2UgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBNZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuaW5kZXhPZihlKSA9PT0gLTEpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnB1c2goY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVzdGluYXRpb247XG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgbGV0IGRlc3RpbmF0aW9uID0ge307XG4gIGlmIChpc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG4gICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3NhcnkodGFyZ2V0W2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgfSk7XG4gIH1cbiAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgIGlmICghaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwTWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuZnVuY3Rpb24gZGVlcE1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgbGV0IGFycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICBsZXQgb3B0aW9ucyA9IG9wdGlvbnNBcmd1bWVudCB8fCB7YXJyYXlNZXJnZTogZGVmYXVsdEFycmF5TWVyZ2V9O1xuICBsZXQgYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblxuICBpZiAoYXJyYXkpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0YXJnZXQpXG4gICAgICA/IGFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICAgIDogY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2UsIG9wdGlvbnNBcmd1bWVudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpO1xuICB9XG59XG5cbmRlZXBNZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnNBcmd1bWVudCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5IHdpdGggYXQgbGVhc3QgdHdvIGVsZW1lbnRzJyk7XG4gIH1cblxuICAvLyB3ZSBhcmUgc3VyZSB0aGVyZSBhcmUgYXQgbGVhc3QgMiB2YWx1ZXMsIHNvIGl0IGlzIHNhZmUgdG8gaGF2ZSBubyBpbml0aWFsIHZhbHVlXG4gIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgIHJldHVybiBkZWVwTWVyZ2UocHJldiwgbmV4dCwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgfSk7XG59O1xuXG5leHBvcnQge2RlZXBNZXJnZX07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/spyne/utils/deep-merge.js\n")},"./src/spyne/utils/frp-tools.js":
/*!**************************************!*\
  !*** ./src/spyne/utils/frp-tools.js ***!
  \**************************************/
/*! exports provided: getConstructorName, arrFromMapKeys, getAllMethodNames, findStrOrRegexMatchStr, findStrFromRegexArr, checkIfObjIsNotEmptyOrNil, isIOS, pullRouteInfo, pullTranslateYFromHeader, pullSlashFromPath, pullHashAndSlashFromPath, closest, pullTranslateY, pullTranslateX, pullMainRoute, pullParams, right, left, fromNullable, findInObj, ifNilThenUpdate, removeSlashes, subscribeFn, convertDomStringMapToObj */function srcSpyneUtilsFrpToolsJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConstructorName", function() { return getConstructorName; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrFromMapKeys", function() { return arrFromMapKeys; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAllMethodNames", function() { return getAllMethodNames; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findStrOrRegexMatchStr", function() { return findStrOrRegexMatchStr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findStrFromRegexArr", function() { return findStrFromRegexArr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkIfObjIsNotEmptyOrNil", function() { return checkIfObjIsNotEmptyOrNil; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIOS", function() { return isIOS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullRouteInfo", function() { return pullRouteInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullTranslateYFromHeader", function() { return pullTranslateYFromHeader; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullSlashFromPath", function() { return pullSlashFromPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullHashAndSlashFromPath", function() { return pullHashAndSlashFromPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return closest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullTranslateY", function() { return pullTranslateY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullTranslateX", function() { return pullTranslateX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullMainRoute", function() { return pullMainRoute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pullParams", function() { return pullParams; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function() { return right; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function() { return left; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullable", function() { return fromNullable; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findInObj", function() { return findInObj; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ifNilThenUpdate", function() { return ifNilThenUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "removeSlashes", function() { return removeSlashes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeFn", function() { return subscribeFn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertDomStringMapToObj", function() { return convertDomStringMapToObj; });\nvar _this2 = undefined;\n\nvar R = __webpack_require__(/*! ramda */ "ramda");\n\nvar isIOS = function isIOS() {\n  var userAgent = window.navigator.userAgent.toLowerCase(); // let safari = /safari/.test(userAgent);\n\n  var ios = /iphone|ipod|ipad/.test(userAgent);\n  return ios === true;\n};\n\nvar getConstructorName = function getConstructorName(obj) {\n  if (obj.constructor.name !== undefined) {\n    return obj.constructor.name;\n  }\n\n  var re = /^(function[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF])([0-9A-Z_a-z]+)(\\([\\0-\\uFFFF]*)$/;\n  var str = obj.toString();\n  return R.defaultTo(String(str).substr(0, 12), R.match(re, str)[2]);\n};\n\nvar arrFromMapKeys = function arrFromMapKeys(map) {\n  var arr = [];\n\n  var addKeysToArr = function addKeysToArr(v, k, i) {\n    return arr.push(k);\n  };\n\n  R.forEach(addKeysToArr, map);\n  return arr;\n};\n\nvar findStrFromRegexArr = function findStrFromRegexArr(obj, str) {\n  if (obj[str] !== undefined) {\n    return str;\n  }\n\n  var checkIfMatch = function checkIfMatch(s) {\n    return R.test(new RegExp(s), str);\n  };\n\n  var checkStrMatch = R.contains(str);\n  var checkIfRegExMatch = R.compose(R.contains(true), R.map(checkIfMatch));\n  var runMatchChecks = R.cond([[checkStrMatch, function () {\n    return str;\n  }], [checkIfRegExMatch, function () {\n    return str;\n  }], [R.T, function () {\n    return undefined;\n  }]]);\n  return runMatchChecks(obj);\n};\n\nvar findStrOrRegexMatchStr = function findStrOrRegexMatchStr(obj, str) {\n  if (obj[str] !== undefined) {\n    return str;\n  }\n\n  var createRe = function createRe(s) {\n    return new RegExp(s);\n  };\n\n  var checkerIfRegexMatchExists = R.compose(R.head, R.filter(R.compose(R.test(R.__, str), createRe)));\n  return checkerIfRegexMatchExists(R.keys(obj));\n};\n\nvar closest = function closest(array, num) {\n  var i = 0;\n  var minDiff = 1000;\n  var ans;\n\n  for (i in array) {\n    var m = Math.abs(num - array[i]);\n\n    if (m < minDiff) {\n      minDiff = m;\n      ans = array[i];\n    }\n  }\n\n  return ans;\n};\n\nvar convertDomStringMapToObj = function convertDomStringMapToObj(domMap) {\n  var obj = {};\n\n  for (var d in domMap) {\n    obj[d] = domMap[d];\n  }\n\n  return obj;\n}; // const passPageData = R.pick([\'params\', \'routeId\', \'data\'], R.__);\n\n\nvar subscribeFn = {\n  next: function next(x) {\n    return console.log("next      " + x);\n  },\n  error: function error(x) {\n    return console.log("error     " + x);\n  },\n  complete: function complete(x) {\n    return console.log("complete  " + x);\n  }\n};\n\nvar right = function right(x) {\n  return {\n    map: function map(f) {\n      return right(f(x));\n    },\n    fold: function fold(f, g) {\n      return g(x);\n    },\n    inspect: function inspect() {\n      return "right(" + x + ")";\n    }\n  };\n};\n\nvar ifNilThenUpdate = function ifNilThenUpdate(val, newVal) {\n  var isNil = R.isNil(val);\n  return isNil ? newVal : val;\n};\n\nvar left = function left(x) {\n  return {\n    map: function map(f) {\n      return left(x);\n    },\n    fold: function fold(f, g) {\n      return f(x);\n    },\n    inspect: function inspect() {\n      return "left(" + x + ")";\n    }\n  };\n};\n\nvar checkIfObjIsNotEmptyOrNil = function checkIfObjIsNotEmptyOrNil(obj) {\n  var isNotEmpty = R.compose(R.complement(R.isEmpty), R.head, R.values);\n  var isNotNil = R.compose(R.complement(R.isNil), R.head, R.values);\n  var isNotNilAndIsNotEmpty = R.allPass([isNotEmpty, isNotNil]);\n  return isNotNilAndIsNotEmpty(obj);\n};\n\nvar fromNullable = function fromNullable(x) {\n  return x !== null ? right(x) : left(null);\n};\n\nvar findInObj = function findInObj(obj, val, error) {\n  if (error === void 0) {\n    error = null;\n  }\n\n  var found = obj[val];\n  return found ? right(found) : left(error);\n};\n\nvar pullRouteInfo = function pullRouteInfo() {\n  var str = pullHashAndSlashFromPath(window.location.hash);\n  var routeId = pullMainRoute(str);\n  var params = pullParams(str);\n  return {\n    routeId: routeId,\n    params: params\n  };\n};\n\nvar getAllMethodNames = function getAllMethodNames(_this, omittedMethods) {\n  if (_this === void 0) {\n    _this = _this2;\n  }\n\n  if (omittedMethods === void 0) {\n    omittedMethods = [];\n  }\n\n  var getPropNamesArr = function getPropNamesArr(obj, omittedMethods) {\n    if (obj === void 0) {\n      obj = _this2;\n    }\n\n    if (omittedMethods === void 0) {\n      omittedMethods = [];\n    }\n\n    return Object.getOwnPropertyNames(obj);\n  }; // Filter Methods\n\n\n  var baseClassMethodsArr = [\'length\', \'name\', \'prototype\', \'constructor\'];\n  omittedMethods = R.concat(baseClassMethodsArr, omittedMethods);\n  var omitPropsFromArr = R.compose(R.without(omittedMethods), R.uniq); // PULL OUT METHOD NAMES\n\n  var methods = omitPropsFromArr(Object.getOwnPropertyNames(_this.constructor.prototype));\n  var staticMethods = omitPropsFromArr(getPropNamesArr(_this.constructor));\n  var allMethods = R.concat(methods, staticMethods);\n  return {\n    methods: methods,\n    staticMethods: staticMethods,\n    allMethods: allMethods\n  }; // return \'fn\';\n}; // ROUTE REGEX EXPRESSIONS\n\n\nvar removeSlashes = function removeSlashes(str) {\n  return str.replace(/^(\\/)(.*)/g, \'$2\');\n};\n\nvar routeRE = /^(\\/?)(\\w*)(\\/?)(.*)/g;\n\nvar pullHashAndSlashFromPath = function pullHashAndSlashFromPath(str) {\n  return str.replace(/^(#\\/?)(.*)/, \'$2\');\n};\n\nvar pullSlashFromPath = function pullSlashFromPath(str) {\n  return str.replace(/^(\\/?)(.*)/, \'$2\');\n};\n\nvar pullMainRoute = function pullMainRoute(str) {\n  return str.replace(routeRE, \'$2\');\n};\n\nvar pullParams = function pullParams(str) {\n  return str.replace(routeRE, \'$4\');\n};\n\nvar pullTranslateX = function pullTranslateX(str) {\n  return str.replace(/^(matrix)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d*)(,.*)/, \'$6\');\n};\n\nvar pullTranslateY = function pullTranslateY(str) {\n  return str.replace(/^(matrix)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d)(.*)/, \'$7\');\n};\n\nvar pullTranslateYFromHeader = function pullTranslateYFromHeader(str) {\n  return str.replace(/^(transform: matrix)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d*,)(.*\\d*)(\\).*;)/, \'$6\');\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/utils/frp-tools.js\n')},"./src/spyne/utils/gc.js":
/*!*******************************!*\
  !*** ./src/spyne/utils/gc.js ***!
  \*******************************/
/*! exports provided: gc */function srcSpyneUtilsGcJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gc", function() { return gc; });\nvar R = __webpack_require__(/*! ramda */ "ramda");\n\nfunction gc() {\n  var _this = this;\n\n  var cleanup = function cleanup() {\n    var loopM = function loopM(m) {\n      return void 0;\n    };\n\n    R.forEach(loopM, _this);\n  };\n\n  setTimeout(cleanup, 1);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9nYy5qcz8wMDZlIl0sIm5hbWVzIjpbIlIiLCJyZXF1aXJlIiwiZ2MiLCJjbGVhbnVwIiwibG9vcE0iLCJmb3JFYWNoIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUEsSUFBTUEsSUFBSSxtQkFBQUMsQ0FBUSxvQkFBUixDQUFWOztBQUNPLFNBQVNDLEVBQVQsR0FBYztBQUFBOztBQUNuQixNQUFJQyxVQUFVLFNBQVZBLE9BQVUsR0FBTTtBQUNsQixRQUFJQyxRQUFRLFNBQVJBLEtBQVE7QUFBQSxhQUFLLEtBQUssQ0FBVjtBQUFBLEtBQVo7O0FBQ0FKLE1BQUVLLE9BQUYsQ0FBVUQsS0FBVixFQUFpQixLQUFqQjtBQUNELEdBSEQ7O0FBSUFFLGFBQVdILE9BQVgsRUFBb0IsQ0FBcEI7QUFDRCIsImZpbGUiOiIuL3NyYy9zcHluZS91dGlscy9nYy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFIgPSByZXF1aXJlKCdyYW1kYScpO1xuZXhwb3J0IGZ1bmN0aW9uIGdjKCkge1xuICBsZXQgY2xlYW51cCA9ICgpID0+IHtcbiAgICBsZXQgbG9vcE0gPSBtID0+IHZvaWQgMDtcbiAgICBSLmZvckVhY2gobG9vcE0sIHRoaXMpO1xuICB9O1xuICBzZXRUaW1lb3V0KGNsZWFudXAsIDEpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/utils/gc.js\n')},"./src/spyne/utils/mixins/base-core-mixins.js":
/*!****************************************************!*\
  !*** ./src/spyne/utils/mixins/base-core-mixins.js ***!
  \****************************************************/
/*! exports provided: baseCoreMixins */function srcSpyneUtilsMixinsBaseCoreMixinsJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseCoreMixins", function() { return baseCoreMixins; });\nfunction baseCoreMixins() {\n  return {\n    createpropsMap: function createpropsMap() {\n      var wm = new WeakMap();\n      var objKey = {\n        cid: this.props.cid\n      };\n      wm.set(objKey, this.props);\n      return {\n        key: objKey,\n        weakMap: wm\n      };\n    },\n    gc: function gc() {\n      for (var m in this) {\n        delete this[m];\n      }\n\n      delete this;\n    },\n    createId: function createId() {\n      var num = Math.floor(Math.random(10000000) * 10000000);\n      return "cid-" + num;\n    },\n    setTraceFunc: function setTraceFunc(debug) {\n      return debug === true ? console.log : function () {};\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9taXhpbnMvYmFzZS1jb3JlLW1peGlucy5qcz8yNjA2Il0sIm5hbWVzIjpbImJhc2VDb3JlTWl4aW5zIiwiY3JlYXRlcHJvcHNNYXAiLCJ3bSIsIldlYWtNYXAiLCJvYmpLZXkiLCJjaWQiLCJwcm9wcyIsInNldCIsImtleSIsIndlYWtNYXAiLCJnYyIsIm0iLCJjcmVhdGVJZCIsIm51bSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInNldFRyYWNlRnVuYyIsImRlYnVnIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBTyxTQUFTQSxjQUFULEdBQTBCO0FBQy9CLFNBQU87QUFDTEMsb0JBQWdCLDBCQUFXO0FBQ3pCLFVBQUlDLEtBQUssSUFBSUMsT0FBSixFQUFUO0FBQ0EsVUFBSUMsU0FBUztBQUFDQyxhQUFLLEtBQUtDLEtBQUwsQ0FBV0Q7QUFBakIsT0FBYjtBQUNBSCxTQUFHSyxHQUFILENBQU9ILE1BQVAsRUFBZSxLQUFLRSxLQUFwQjtBQUNBLGFBQU87QUFDTEUsYUFBS0osTUFEQTtBQUVMSyxpQkFBU1A7QUFGSixPQUFQO0FBSUQsS0FUSTtBQVVMUSxRQUFJLGNBQVc7QUFDYixXQUFLLElBQUlDLENBQVQsSUFBYyxJQUFkLEVBQW9CO0FBQ2xCLGVBQU8sS0FBS0EsQ0FBTCxDQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxJQUFQO0FBQ0QsS0FmSTtBQWdCTEMsY0FBVSxvQkFBVztBQUNuQixVQUFJQyxNQUFNQyxLQUFLQyxLQUFMLENBQVdELEtBQUtFLE1BQUwsQ0FBWSxRQUFaLElBQXdCLFFBQW5DLENBQVY7QUFDQSxzQkFBY0gsR0FBZDtBQUNELEtBbkJJO0FBb0JMSSxrQkFBYyxzQkFBU0MsS0FBVCxFQUFnQjtBQUM1QixhQUFPQSxVQUFVLElBQVYsR0FBaUJDLFFBQVFDLEdBQXpCLEdBQStCLFlBQU0sQ0FDM0MsQ0FERDtBQUVEO0FBdkJJLEdBQVA7QUF5QkQiLCJmaWxlIjoiLi9zcmMvc3B5bmUvdXRpbHMvbWl4aW5zL2Jhc2UtY29yZS1taXhpbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gYmFzZUNvcmVNaXhpbnMoKSB7XG4gIHJldHVybiB7XG4gICAgY3JlYXRlcHJvcHNNYXA6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHdtID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgIGxldCBvYmpLZXkgPSB7Y2lkOiB0aGlzLnByb3BzLmNpZH07XG4gICAgICB3bS5zZXQob2JqS2V5LCB0aGlzLnByb3BzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtleTogb2JqS2V5LFxuICAgICAgICB3ZWFrTWFwOiB3bVxuICAgICAgfTtcbiAgICB9LFxuICAgIGdjOiBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAobGV0IG0gaW4gdGhpcykge1xuICAgICAgICBkZWxldGUgdGhpc1ttXTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzO1xuICAgIH0sXG4gICAgY3JlYXRlSWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG51bSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oMTAwMDAwMDApICogMTAwMDAwMDApO1xuICAgICAgcmV0dXJuIGBjaWQtJHtudW19YDtcbiAgICB9LFxuICAgIHNldFRyYWNlRnVuYzogZnVuY3Rpb24oZGVidWcpIHtcbiAgICAgIHJldHVybiBkZWJ1ZyA9PT0gdHJ1ZSA/IGNvbnNvbGUubG9nIDogKCkgPT4ge1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/spyne/utils/mixins/base-core-mixins.js\n')},"./src/spyne/utils/mixins/base-streams-mixins.js":
/*!*******************************************************!*\
  !*** ./src/spyne/utils/mixins/base-streams-mixins.js ***!
  \*******************************************************/
/*! exports provided: baseStreamsMixins */function srcSpyneUtilsMixinsBaseStreamsMixinsJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"baseStreamsMixins\", function() { return baseStreamsMixins; });\n/* harmony import */ var _channels_channels_payload__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../channels/channels-payload */ \"./src/spyne/channels/channels-payload.js\");\n/* harmony import */ var _channels_lifestream_payload__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../channels/lifestream-payload */ \"./src/spyne/channels/lifestream-payload.js\");\n\n\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nfunction baseStreamsMixins() {\n  return {\n    testFunc: function testFunc(str) {\n      console.log('stream mixin is ', str);\n    },\n    sendRoutePayload: function sendRoutePayload(obs, data) {\n      return new _channels_channels_payload__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsPayload\"]('ROUTE', obs, data, 'subscribe');\n    },\n    sendUIPayload: function sendUIPayload(obs, data) {\n      return new _channels_channels_payload__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsPayload\"]('UI', obs, data, 'subscribe');\n    },\n    sendChannelPayload: function sendChannelPayload(channelName, payload) {\n      var _this = this;\n\n      var getProp = function getProp(str) {\n        return R.prop(str, _this.props);\n      };\n\n      var channel = channelName;\n      var srcElement = {\n        cid: getProp('cid'),\n        el: getProp('el'),\n        viewName: getProp('name')\n      };\n      var data = {\n        payload: payload,\n        channel: channel,\n        srcElement: srcElement\n      };\n      return new _channels_channels_payload__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsPayload\"](channelName, new Rx.Observable.of(''), data, 'subscribe');\n    },\n    sendLifeStreamPayload: function sendLifeStreamPayload(obs, data) {\n      return new _channels_channels_payload__WEBPACK_IMPORTED_MODULE_0__[\"ChannelsPayload\"]('LIFESTREAM', obs, data, 'subscribe');\n    },\n    createLifeStreamPayload: function createLifeStreamPayload(STEP, data, type) {\n      if (data === void 0) {\n        data = {};\n      }\n\n      if (type === void 0) {\n        type = 'parent';\n      }\n\n      var viewId = this.props.name + \": \" + this.props.cid;\n      return new _channels_lifestream_payload__WEBPACK_IMPORTED_MODULE_1__[\"LifestreamPayload\"]('LIFESTREAM', STEP, type, viewId, data).data;\n    }\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy9taXhpbnMvYmFzZS1zdHJlYW1zLW1peGlucy5qcz9lMzViIl0sIm5hbWVzIjpbIlIiLCJyZXF1aXJlIiwiUngiLCJiYXNlU3RyZWFtc01peGlucyIsInRlc3RGdW5jIiwic3RyIiwiY29uc29sZSIsImxvZyIsInNlbmRSb3V0ZVBheWxvYWQiLCJvYnMiLCJkYXRhIiwic2VuZFVJUGF5bG9hZCIsInNlbmRDaGFubmVsUGF5bG9hZCIsImNoYW5uZWxOYW1lIiwicGF5bG9hZCIsImdldFByb3AiLCJwcm9wIiwicHJvcHMiLCJjaGFubmVsIiwic3JjRWxlbWVudCIsImNpZCIsImVsIiwidmlld05hbWUiLCJPYnNlcnZhYmxlIiwib2YiLCJzZW5kTGlmZVN0cmVhbVBheWxvYWQiLCJjcmVhdGVMaWZlU3RyZWFtUGF5bG9hZCIsIlNURVAiLCJ0eXBlIiwidmlld0lkIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBQ0EsSUFBTUEsSUFBSSxtQkFBQUMsQ0FBUSxvQkFBUixDQUFWOztBQUNBLElBQU1DLEtBQUssbUJBQUFELENBQVEsa0JBQVIsQ0FBWDs7QUFFTyxTQUFTRSxpQkFBVCxHQUE2QjtBQUNsQyxTQUFPO0FBQ0xDLGNBQVUsa0JBQVNDLEdBQVQsRUFBYztBQUN0QkMsY0FBUUMsR0FBUixDQUFZLGtCQUFaLEVBQWdDRixHQUFoQztBQUNELEtBSEk7QUFJTEcsc0JBQWtCLDBCQUFTQyxHQUFULEVBQWNDLElBQWQsRUFBb0I7QUFDcEMsYUFBTyxJQUFJLDBFQUFKLENBQW9CLE9BQXBCLEVBQTZCRCxHQUE3QixFQUFrQ0MsSUFBbEMsRUFBd0MsV0FBeEMsQ0FBUDtBQUNELEtBTkk7QUFPTEMsbUJBQWUsdUJBQVNGLEdBQVQsRUFBY0MsSUFBZCxFQUFvQjtBQUNqQyxhQUFPLElBQUksMEVBQUosQ0FBb0IsSUFBcEIsRUFBMEJELEdBQTFCLEVBQStCQyxJQUEvQixFQUFxQyxXQUFyQyxDQUFQO0FBQ0QsS0FUSTtBQVVMRSx3QkFBb0IsNEJBQVNDLFdBQVQsRUFBc0JDLE9BQXRCLEVBQStCO0FBQUE7O0FBQ2pELFVBQU1DLFVBQVUsU0FBVkEsT0FBVTtBQUFBLGVBQU9mLEVBQUVnQixJQUFGLENBQU9YLEdBQVAsRUFBWSxNQUFLWSxLQUFqQixDQUFQO0FBQUEsT0FBaEI7O0FBQ0EsVUFBTUMsVUFBVUwsV0FBaEI7QUFDQSxVQUFJTSxhQUFhO0FBQ2ZDLGFBQUtMLFFBQVEsS0FBUixDQURVO0FBRWZNLFlBQUlOLFFBQVEsSUFBUixDQUZXO0FBR2ZPLGtCQUFVUCxRQUFRLE1BQVI7QUFISyxPQUFqQjtBQUtBLFVBQUlMLE9BQU87QUFDVEksd0JBRFM7QUFDQUksd0JBREE7QUFDU0M7QUFEVCxPQUFYO0FBSUEsYUFBTyxJQUFJLDBFQUFKLENBQW9CTixXQUFwQixFQUFpQyxJQUFJWCxHQUFHcUIsVUFBSCxDQUFjQyxFQUFsQixDQUFxQixFQUFyQixDQUFqQyxFQUEyRGQsSUFBM0QsRUFDTCxXQURLLENBQVA7QUFFRCxLQXhCSTtBQXlCTGUsMkJBQXVCLCtCQUFTaEIsR0FBVCxFQUFjQyxJQUFkLEVBQW9CO0FBQ3pDLGFBQU8sSUFBSSwwRUFBSixDQUFvQixZQUFwQixFQUFrQ0QsR0FBbEMsRUFBdUNDLElBQXZDLEVBQTZDLFdBQTdDLENBQVA7QUFDRCxLQTNCSTtBQTZCTGdCLDZCQUF5QixpQ0FBU0MsSUFBVCxFQUFlakIsSUFBZixFQUEwQmtCLElBQTFCLEVBQTJDO0FBQUEsVUFBNUJsQixJQUE0QjtBQUE1QkEsWUFBNEIsR0FBckIsRUFBcUI7QUFBQTs7QUFBQSxVQUFqQmtCLElBQWlCO0FBQWpCQSxZQUFpQixHQUFWLFFBQVU7QUFBQTs7QUFDbEUsVUFBSUMsU0FBWSxLQUFLWixLQUFMLENBQVdhLElBQXZCLFVBQWdDLEtBQUtiLEtBQUwsQ0FBV0csR0FBL0M7QUFDQSxhQUFPLElBQUksOEVBQUosQ0FBc0IsWUFBdEIsRUFBb0NPLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnREMsTUFBaEQsRUFBd0RuQixJQUF4RCxFQUE4REEsSUFBckU7QUFDRDtBQWhDSSxHQUFQO0FBa0NEIiwiZmlsZSI6Ii4vc3JjL3NweW5lL3V0aWxzL21peGlucy9iYXNlLXN0cmVhbXMtbWl4aW5zLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFubmVsc1BheWxvYWR9IGZyb20gJy4uLy4uL2NoYW5uZWxzL2NoYW5uZWxzLXBheWxvYWQnO1xuaW1wb3J0IHtMaWZlc3RyZWFtUGF5bG9hZH0gZnJvbSAnLi4vLi4vY2hhbm5lbHMvbGlmZXN0cmVhbS1wYXlsb2FkJztcbmNvbnN0IFIgPSByZXF1aXJlKCdyYW1kYScpO1xuY29uc3QgUnggPSByZXF1aXJlKCdyeGpzJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBiYXNlU3RyZWFtc01peGlucygpIHtcbiAgcmV0dXJuIHtcbiAgICB0ZXN0RnVuYzogZnVuY3Rpb24oc3RyKSB7XG4gICAgICBjb25zb2xlLmxvZygnc3RyZWFtIG1peGluIGlzICcsIHN0cik7XG4gICAgfSxcbiAgICBzZW5kUm91dGVQYXlsb2FkOiBmdW5jdGlvbihvYnMsIGRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgQ2hhbm5lbHNQYXlsb2FkKCdST1VURScsIG9icywgZGF0YSwgJ3N1YnNjcmliZScpO1xuICAgIH0sXG4gICAgc2VuZFVJUGF5bG9hZDogZnVuY3Rpb24ob2JzLCBkYXRhKSB7XG4gICAgICByZXR1cm4gbmV3IENoYW5uZWxzUGF5bG9hZCgnVUknLCBvYnMsIGRhdGEsICdzdWJzY3JpYmUnKTtcbiAgICB9LFxuICAgIHNlbmRDaGFubmVsUGF5bG9hZDogZnVuY3Rpb24oY2hhbm5lbE5hbWUsIHBheWxvYWQpIHtcbiAgICAgIGNvbnN0IGdldFByb3AgPSBzdHIgPT4gUi5wcm9wKHN0ciwgdGhpcy5wcm9wcyk7XG4gICAgICBjb25zdCBjaGFubmVsID0gY2hhbm5lbE5hbWU7XG4gICAgICBsZXQgc3JjRWxlbWVudCA9IHtcbiAgICAgICAgY2lkOiBnZXRQcm9wKCdjaWQnKSxcbiAgICAgICAgZWw6IGdldFByb3AoJ2VsJyksXG4gICAgICAgIHZpZXdOYW1lOiBnZXRQcm9wKCduYW1lJylcbiAgICAgIH07XG4gICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgcGF5bG9hZCwgY2hhbm5lbCwgc3JjRWxlbWVudFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIG5ldyBDaGFubmVsc1BheWxvYWQoY2hhbm5lbE5hbWUsIG5ldyBSeC5PYnNlcnZhYmxlLm9mKCcnKSwgZGF0YSxcbiAgICAgICAgJ3N1YnNjcmliZScpO1xuICAgIH0sXG4gICAgc2VuZExpZmVTdHJlYW1QYXlsb2FkOiBmdW5jdGlvbihvYnMsIGRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgQ2hhbm5lbHNQYXlsb2FkKCdMSUZFU1RSRUFNJywgb2JzLCBkYXRhLCAnc3Vic2NyaWJlJyk7XG4gICAgfSxcblxuICAgIGNyZWF0ZUxpZmVTdHJlYW1QYXlsb2FkOiBmdW5jdGlvbihTVEVQLCBkYXRhID0ge30sIHR5cGUgPSAncGFyZW50Jykge1xuICAgICAgbGV0IHZpZXdJZCA9IGAke3RoaXMucHJvcHMubmFtZX06ICR7dGhpcy5wcm9wcy5jaWR9YDtcbiAgICAgIHJldHVybiBuZXcgTGlmZXN0cmVhbVBheWxvYWQoJ0xJRkVTVFJFQU0nLCBTVEVQLCB0eXBlLCB2aWV3SWQsIGRhdGEpLmRhdGE7XG4gICAgfVxuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/utils/mixins/base-streams-mixins.js\n")},"./src/spyne/utils/viewstream-animations.js":
/*!**************************************************!*\
  !*** ./src/spyne/utils/viewstream-animations.js ***!
  \**************************************************/
/*! exports provided: fadein, fadeout */function srcSpyneUtilsViewstreamAnimationsJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fadein\", function() { return fadein; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fadeout\", function() { return fadeout; });\nvar createFaderInlineText = function createFaderInlineText(isInBool, t, e, startZeroBool) {\n  if (isInBool === void 0) {\n    isInBool = false;\n  }\n\n  if (t === void 0) {\n    t = 1;\n  }\n\n  if (e === void 0) {\n    e = 'ease';\n  }\n\n  if (startZeroBool === void 0) {\n    startZeroBool = false;\n  }\n\n  var initOpacityZero = startZeroBool === true ? 'opacity:0;' : '';\n  var opacity = isInBool === true ? 1 : 0;\n  return initOpacityZero + \"transition: opacity \" + t + \"s \" + e + \"; opacity: \" + opacity + \";\";\n};\n\nfunction fadein(el, t) {\n  var currentOpacity = window.getComputedStyle(el).opacity * 1;\n  var startAtZero = currentOpacity === 1;\n  var inlineCss = createFaderInlineText(true, t, 'ease', startAtZero);\n  el.style.cssText += inlineCss;\n}\nfunction fadeout(el, t, callback) {\n  var inlineCss = createFaderInlineText(false, t, 'ease');\n  el.style.cssText += inlineCss;\n  console.log(t, ' inline is ', inlineCss); // window.setTimeout(callback, t * 1000);\n\n  el.addEventListener('transitionend', callback, false);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS91dGlscy92aWV3c3RyZWFtLWFuaW1hdGlvbnMuanM/NzQyZSJdLCJuYW1lcyI6WyJjcmVhdGVGYWRlcklubGluZVRleHQiLCJpc0luQm9vbCIsInQiLCJlIiwic3RhcnRaZXJvQm9vbCIsImluaXRPcGFjaXR5WmVybyIsIm9wYWNpdHkiLCJmYWRlaW4iLCJlbCIsImN1cnJlbnRPcGFjaXR5Iiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN0YXJ0QXRaZXJvIiwiaW5saW5lQ3NzIiwic3R5bGUiLCJjc3NUZXh0IiwiZmFkZW91dCIsImNhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFBQSxJQUFJQSx3QkFBd0IsU0FBeEJBLHFCQUF3QixDQUFDQyxRQUFELEVBQW1CQyxDQUFuQixFQUEwQkMsQ0FBMUIsRUFBc0NDLGFBQXRDLEVBQWdFO0FBQUEsTUFBL0RILFFBQStEO0FBQS9EQSxZQUErRCxHQUFwRCxLQUFvRDtBQUFBOztBQUFBLE1BQTdDQyxDQUE2QztBQUE3Q0EsS0FBNkMsR0FBekMsQ0FBeUM7QUFBQTs7QUFBQSxNQUF0Q0MsQ0FBc0M7QUFBdENBLEtBQXNDLEdBQWxDLE1BQWtDO0FBQUE7O0FBQUEsTUFBMUJDLGFBQTBCO0FBQTFCQSxpQkFBMEIsR0FBVixLQUFVO0FBQUE7O0FBQzFGLE1BQUlDLGtCQUFrQkQsa0JBQWtCLElBQWxCLEdBQXlCLFlBQXpCLEdBQXdDLEVBQTlEO0FBQ0EsTUFBSUUsVUFBVUwsYUFBYSxJQUFiLEdBQW9CLENBQXBCLEdBQXdCLENBQXRDO0FBQ0EsU0FBVUksZUFBViw0QkFBZ0RILENBQWhELFVBQXNEQyxDQUF0RCxtQkFBcUVHLE9BQXJFO0FBQ0QsQ0FKRDs7QUFLTyxTQUFTQyxNQUFULENBQWdCQyxFQUFoQixFQUFvQk4sQ0FBcEIsRUFBdUI7QUFDNUIsTUFBSU8saUJBQWlCQyxPQUFPQyxnQkFBUCxDQUF3QkgsRUFBeEIsRUFBNEJGLE9BQTVCLEdBQXNDLENBQTNEO0FBQ0EsTUFBSU0sY0FBY0gsbUJBQW1CLENBQXJDO0FBQ0EsTUFBSUksWUFBWWIsc0JBQXNCLElBQXRCLEVBQTRCRSxDQUE1QixFQUErQixNQUEvQixFQUF1Q1UsV0FBdkMsQ0FBaEI7QUFDQUosS0FBR00sS0FBSCxDQUFTQyxPQUFULElBQW9CRixTQUFwQjtBQUNEO0FBQ00sU0FBU0csT0FBVCxDQUFpQlIsRUFBakIsRUFBcUJOLENBQXJCLEVBQXdCZSxRQUF4QixFQUFrQztBQUN2QyxNQUFJSixZQUFZYixzQkFBc0IsS0FBdEIsRUFBNkJFLENBQTdCLEVBQWdDLE1BQWhDLENBQWhCO0FBQ0FNLEtBQUdNLEtBQUgsQ0FBU0MsT0FBVCxJQUFvQkYsU0FBcEI7QUFDQUssVUFBUUMsR0FBUixDQUFZakIsQ0FBWixFQUFlLGFBQWYsRUFBOEJXLFNBQTlCLEVBSHVDLENBS3ZDOztBQUNBTCxLQUFHWSxnQkFBSCxDQUFvQixlQUFwQixFQUFxQ0gsUUFBckMsRUFBK0MsS0FBL0M7QUFDRCIsImZpbGUiOiIuL3NyYy9zcHluZS91dGlscy92aWV3c3RyZWFtLWFuaW1hdGlvbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY3JlYXRlRmFkZXJJbmxpbmVUZXh0ID0gKGlzSW5Cb29sID0gZmFsc2UsIHQgPSAxLCBlID0gJ2Vhc2UnLCBzdGFydFplcm9Cb29sID0gZmFsc2UpID0+IHtcbiAgbGV0IGluaXRPcGFjaXR5WmVybyA9IHN0YXJ0WmVyb0Jvb2wgPT09IHRydWUgPyAnb3BhY2l0eTowOycgOiAnJztcbiAgbGV0IG9wYWNpdHkgPSBpc0luQm9vbCA9PT0gdHJ1ZSA/IDEgOiAwO1xuICByZXR1cm4gYCR7aW5pdE9wYWNpdHlaZXJvfXRyYW5zaXRpb246IG9wYWNpdHkgJHt0fXMgJHtlfTsgb3BhY2l0eTogJHtvcGFjaXR5fTtgO1xufTtcbmV4cG9ydCBmdW5jdGlvbiBmYWRlaW4oZWwsIHQpIHtcbiAgbGV0IGN1cnJlbnRPcGFjaXR5ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLm9wYWNpdHkgKiAxO1xuICBsZXQgc3RhcnRBdFplcm8gPSBjdXJyZW50T3BhY2l0eSA9PT0gMTtcbiAgbGV0IGlubGluZUNzcyA9IGNyZWF0ZUZhZGVySW5saW5lVGV4dCh0cnVlLCB0LCAnZWFzZScsIHN0YXJ0QXRaZXJvKTtcbiAgZWwuc3R5bGUuY3NzVGV4dCArPSBpbmxpbmVDc3M7XG59XG5leHBvcnQgZnVuY3Rpb24gZmFkZW91dChlbCwgdCwgY2FsbGJhY2spIHtcbiAgbGV0IGlubGluZUNzcyA9IGNyZWF0ZUZhZGVySW5saW5lVGV4dChmYWxzZSwgdCwgJ2Vhc2UnKTtcbiAgZWwuc3R5bGUuY3NzVGV4dCArPSBpbmxpbmVDc3M7XG4gIGNvbnNvbGUubG9nKHQsICcgaW5saW5lIGlzICcsIGlubGluZUNzcyk7XG5cbiAgLy8gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIHQgKiAxMDAwKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGNhbGxiYWNrLCBmYWxzZSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/spyne/utils/viewstream-animations.js\n")},"./src/spyne/utils/viewstream-lifecycle-observables.js":
/*!*************************************************************!*\
  !*** ./src/spyne/utils/viewstream-lifecycle-observables.js ***!
  \*************************************************************/
/*! exports provided: LifecyleObservables */function srcSpyneUtilsViewstreamLifecycleObservablesJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LifecyleObservables\", function() { return LifecyleObservables; });\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar LifecyleObservables =\n/*#__PURE__*/\nfunction () {\n  function LifecyleObservables(props) {\n    this.props.observableStreams = LifecyleObservables.createDirectionalObservables();\n  }\n\n  LifecyleObservables.createDirectionalFiltersObject = function createDirectionalFiltersObject() {\n    var dirInternal = 'internal';\n    var dirParent = 'parent';\n    var dirChild = 'child';\n    return {\n      P: [dirParent],\n      C: [dirChild],\n      PCI: [dirParent, dirInternal, dirChild],\n      CI: [dirChild, dirInternal],\n      PI: [dirParent, dirInternal],\n      PC: [dirParent, dirChild]\n    };\n  };\n\n  LifecyleObservables.addDefaultDir = function addDefaultDir(obj) {\n    var defaults = R.flip(R.merge);\n    return defaults({\n      $dir: ['internal']\n    }, R.clone(obj));\n  };\n\n  LifecyleObservables.addDownInternalDir = function addDownInternalDir(obj, arr) {\n    if (arr === void 0) {\n      arr = ['internal', 'down'];\n    }\n\n    var defaults = R.flip(R.merge);\n    return defaults(R.clone(obj), {\n      $dir: arr\n    });\n  };\n\n  LifecyleObservables.addChildAndInternalDir = function addChildAndInternalDir(obj, arr) {\n    if (arr === void 0) {\n      arr = ['child', 'down'];\n    }\n\n    var defaults = R.flip(R.merge);\n    return defaults(R.clone(obj), {\n      $dir: arr\n    });\n  };\n\n  LifecyleObservables.mapToDefaultDir = function mapToDefaultDir(p) {\n    return this.addDefaultDir(p);\n  };\n\n  LifecyleObservables.createDirectionalObservables = function createDirectionalObservables(obs$, viewName, cid) {\n    if (obs$ === void 0) {\n      obs$ = new Rx.Subject();\n    }\n\n    if (viewName !== undefined && cid !== undefined) {\n      obs$['viewName'] = viewName;\n      obs$['cid'] = cid;\n    }\n\n    var filterStreams = function filterStreams(val) {\n      return R.propSatisfies(function (arrType) {\n        return arrType.includes(val);\n      }, '$dir');\n    };\n\n    var filterParent = filterStreams('parent');\n    var filterChild = filterStreams('child');\n    var filterInternal = filterStreams('internal');\n\n    var addfrom$ = function addfrom$(relStr) {\n      return R.merge({\n        from$: relStr\n      });\n    };\n\n    var addParentfrom$ = addfrom$('child');\n    var addInternalfrom$ = addfrom$('internal');\n    var addChildfrom$ = addfrom$('parent');\n    var raw$ = obs$.filter(function (payload) {\n      return payload !== undefined && payload.action !== undefined;\n    }); // .filter(p => p.$dir !== undefined)\n    // .do(p => console.log('payload : ', p.$dir, p));\n\n    var toInternal$ = obs$.filter(filterInternal).map(addInternalfrom$);\n    var toParent$ = obs$.filter(filterParent).map(addParentfrom$);\n    var toChild$ = obs$.filter(filterChild).map(addChildfrom$); // const upObs$ = obs$.do(p => console.log('UP: ', p));\n\n    var streamObj = {\n      parent: toParent$,\n      internal: toInternal$,\n      child: toChild$\n    };\n\n    var completeStream = function completeStream(arr) {\n      if (arr === void 0) {\n        arr = [];\n      }\n\n      var endStream = function endStream(o) {\n        o.complete();\n        o.isStopped = true;\n      };\n\n      var setCompleteStream = function setCompleteStream(str) {\n        if (streamObj[str] !== undefined) {\n          var _obs$ = streamObj[str];\n          endStream(_obs$);\n        }\n      };\n\n      if (arr !== undefined && arr.length >= 1) {\n        arr.forEach(setCompleteStream);\n      }\n    };\n\n    var completeAll = function completeAll() {\n      var completeStream = function completeStream(o) {\n        o.complete();\n        o.isStopped = true;\n      };\n\n      R.forEach(completeStream, [raw$, toInternal$, toParent$, toChild$]);\n    };\n\n    return {\n      raw$: raw$,\n      toInternal$: toInternal$,\n      toParent$: toParent$,\n      toChild$: toChild$,\n      completeAll: completeAll,\n      completeStream: completeStream\n    };\n  };\n\n  return LifecyleObservables;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/utils/viewstream-lifecycle-observables.js\n")},"./src/spyne/views/dom-item-selectors.js":
/*!***********************************************!*\
  !*** ./src/spyne/views/dom-item-selectors.js ***!
  \***********************************************/
/*! exports provided: DomItemSelectors */function srcSpyneViewsDomItemSelectorsJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomItemSelectors", function() { return DomItemSelectors; });\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar R = __webpack_require__(/*! ramda */ "ramda"); // const Rx = require(\'rxjs\');\n\n\nvar DomItemSelectors =\n/*#__PURE__*/\nfunction () {\n  function DomItemSelectors(cxt, str) {\n    this.el = str !== undefined ? cxt.querySelectorAll(str) : cxt;\n    this.queryStr = str;\n\n    if (this.el.length === 1) {\n      this.el = R.head(this.el);\n    } else if (this.el.constructor.name === \'NodeList\') {\n      this.el = DomItemSelectors.createArrayFromNodeList(this.el);\n    }\n\n    this.cList = this.el.classList;\n    this.elProps = new Map();\n    this.createMethods();\n  }\n\n  DomItemSelectors.createArrayFromNodeList = function createArrayFromNodeList(nList) {\n    var reducer = function reducer(acc, item) {\n      acc.push(item);\n      return acc;\n    };\n\n    return R.reduce(reducer, [], nList);\n  };\n\n  var _proto = DomItemSelectors.prototype;\n\n  _proto.createMethods = function createMethods() {\n    var mapAddClass = function mapAddClass(item, s) {\n      return item.classList.add(s);\n    };\n\n    var mapRemoveClass = function mapRemoveClass(item, s) {\n      return item.classList.remove(s);\n    };\n\n    var mapSetClass = function mapSetClass(item, s) {\n      item.classList.value = s;\n      return item;\n    };\n\n    var mapInlineCss = function mapInlineCss(item, s) {\n      item.style.cssText = s;\n      return item;\n    };\n\n    var mapToggleClass = function mapToggleClass(item, s, bool) {\n      if (bool === void 0) {\n        bool = true;\n      }\n\n      item.classList.toggle(s, bool);\n      return item;\n    };\n\n    this.addClass = this.mapToValue(mapAddClass);\n    this.removeClass = this.mapToValue(mapRemoveClass);\n    this.setClass = this.mapToValue(mapSetClass);\n    this.inlineCss = this.mapToValue(mapInlineCss);\n    this.toggleClass = this.mapToValue(mapToggleClass);\n  };\n\n  _proto.mapMethod = function mapMethod(fn) {\n    var _this = this;\n\n    // Add a function to the class that will wait for a string param\n    return function (str) {\n      _this.elArr.map(fn);\n\n      return _this;\n    };\n  };\n\n  _proto.addAnimClass = function addAnimClass(str) {\n    var _this2 = this;\n\n    var adder = function adder() {\n      return _this2.addClass(str);\n    };\n\n    requestAnimationFrame(function () {\n      setTimeout(adder, 0);\n    });\n    return this;\n  };\n\n  _proto.mapToValue = function mapToValue(f) {\n    var _this3 = this;\n\n    return function (str) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      // console.log(\'str f this\', str, f, this);\n      _this3.elArr.map(function (item) {\n        return f.apply(void 0, [item, str].concat(args));\n      });\n\n      return _this3;\n    };\n  };\n\n  _proto.setClassOnBool = function setClassOnBool(str, bool) {\n    if (str === void 0) {\n      str = \'\';\n    }\n\n    if (bool === void 0) {\n      bool = true;\n    }\n\n    if (bool) {\n      this.addClass(str);\n    } else {\n      this.removeClass(str);\n    }\n\n    return this;\n  };\n\n  _proto.setActiveItem = function setActiveItem(query, str) {\n    var activeEl = document.querySelector(this.queryStr + query);\n\n    var filterForActive = function filterForActive(item) {\n      return item === activeEl;\n    }; // const onActive = bool => bool === true ? item.addClass(str) : item.removeClass(str);\n\n\n    var adder = function adder(item) {\n      item.classList.add(str);\n    };\n\n    var remover = function remover(item) {\n      item.classList.remove(str);\n    };\n\n    var mapTheActive = R.ifElse(filterForActive, adder, remover);\n    this.elArr.map(mapTheActive);\n  };\n\n  _proto.query = function query(str) {\n    var elementExists = this.el.querySelector(str); //console.log(\'query is \',this.el,str, elementExists);\n\n    if (elementExists !== null) {\n      return new DomItemSelectors(this.el, str);\n    } else {\n      var id = this.el.getAttribute(\'id\');\n      console.warn("Spyne Warning: the element, \\"" + str + "\\" does not exist in this element, \\"" + id + "\\"!");\n    }\n  };\n\n  _proto.getEl = function getEl() {\n    return this.el;\n  };\n\n  /*\n    getBoxEl() {\n      console.log(\'getbox el \',this.el);\n      return [].concat(this.el);\n    }\n  */\n  _proto.unmount = function unmount() {\n    this.el = undefined;\n    this.cList = undefined;\n    this.inline = undefined;\n  };\n\n  _createClass(DomItemSelectors, [{\n    key: "elArr",\n    get: function get() {\n      if (this.el.constructor.name === \'NodeList\') {\n        return DomItemSelectors.createArrayFromNodeList(this.el);\n      } else {\n        return [].concat(this.el);\n      }\n    }\n  }]);\n\n  return DomItemSelectors;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/views/dom-item-selectors.js\n')},"./src/spyne/views/dom-item.js":
/*!*************************************!*\
  !*** ./src/spyne/views/dom-item.js ***!
  \*************************************/
/*! exports provided: DomItem */function srcSpyneViewsDomItemJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomItem\", function() { return DomItem; });\n/* harmony import */ var _utils_mixins_base_core_mixins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mixins/base-core-mixins */ \"./src/spyne/utils/mixins/base-core-mixins.js\");\n/* harmony import */ var _dom_template_renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-template-renderer */ \"./src/spyne/views/dom-template-renderer.js\");\n/* harmony import */ var _utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/deep-merge */ \"./src/spyne/utils/deep-merge.js\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// import {createElement} from '../utils/dom-methods';\n\n\n // import {DomTemplateRenderer} from './template-renderer';\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar DomItem =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @module DomItem\n   *\n   * @desc\n   * This class is mostly used internally by the ViewStream object, but it can be also used to generate a lightweight dom element that contains no props or parameters.\n   *\n   * @constructor\n   * @param {string} tagName the tagname for this dom element.\n   * @param {object} attributes any domElement attribute (except for class )\n   * @param {string|object} content string for text tags and json for templates\n   * @param {template} template\n   */\n  function DomItem(tagName, attributes, content, template) {\n    if (tagName === void 0) {\n      tagName = 'div';\n    }\n\n    if (attributes === void 0) {\n      attributes = {};\n    }\n\n    if (content === void 0) {\n      content = undefined;\n    }\n\n    if (template === void 0) {\n      template = undefined;\n    }\n\n    var isSimpleView = R.is(String, attributes);\n\n    if (isSimpleView === true) {\n      content = attributes;\n      attributes = {};\n    }\n\n    this.props = new Map();\n    this.setProp('fragment', document.createDocumentFragment());\n    this.setProp('tagName', tagName);\n    this.setProp('attrs', this.updateAttrs(attributes));\n    this.setProp('content', content);\n    this.setProp('template', template);\n    this.addMixins();\n  }\n\n  var _proto = DomItem.prototype;\n\n  _proto.setProp = function setProp(key, val) {\n    this.props.set(key, val);\n  };\n\n  _proto.getProp = function getProp(val) {\n    return this.props.get(val);\n  };\n\n  _proto.setElAttrs = function setElAttrs(el, params) {\n    var addAttributes = function addAttributes(val, key) {\n      var addToDataset = function addToDataset(val, key) {\n        el.dataset[key] = val;\n      };\n\n      if (key === 'dataset') {\n        R.forEachObjIndexed(addToDataset, val);\n      } else {\n        el.setAttribute(key, val);\n      }\n    };\n\n    this.getProp('attrs').forEach(addAttributes);\n    return el;\n  };\n\n  _proto.updateAttrs = function updateAttrs(params, m) {\n    var theMap = m !== undefined ? m : new Map();\n\n    var addAttributes = function addAttributes(val, key) {\n      return theMap.set(key, val);\n    };\n\n    R.mapObjIndexed(addAttributes, params);\n    return theMap;\n  };\n\n  _proto.addTemplate = function addTemplate(el) {\n    var _this = this;\n\n    var template = this.getProp('template');\n\n    var addTmpl = function addTmpl(template) {\n      var data = _this.getProp('content');\n\n      data = R.is(Object, data) ? data : {};\n      var frag = new _dom_template_renderer__WEBPACK_IMPORTED_MODULE_1__[\"DomTemplateRenderer\"](template, data).getTemplateNode();\n      el.appendChild(frag);\n      return el;\n    };\n\n    var doNothing = function doNothing(el) {\n      return el;\n    };\n\n    return template !== undefined ? addTmpl(template) : doNothing(el);\n  };\n\n  _proto.createElement = function createElement(tagName) {\n    if (tagName === void 0) {\n      tagName = 'div';\n    }\n\n    return document.createElement(tagName);\n  };\n\n  _proto.addContent = function addContent(el) {\n    var text = this.getProp('content');\n    var isText = R.is(String, text);\n\n    if (isText === true) {\n      var txt = document.createTextNode(text);\n      el.appendChild(txt);\n    }\n\n    return el;\n  };\n\n  _proto.execute = function execute() {\n    var el = R.pipe(this.createElement.bind(this), this.setElAttrs.bind(this), this.addTemplate.bind(this), this.addContent.bind(this))(this.getProp('tagName')); // this.getProp('fragment').appendChild(el);\n\n    this.props.set('el', el);\n  };\n\n  _proto.render = function render() {\n    this.execute();\n    return this.getProp('el');\n  };\n\n  _proto.returnIfDefined = function returnIfDefined(obj, val) {\n    if (val !== undefined) {\n      var isObj = typeof val === 'undefined';\n      isObj === false ? obj[val] = val : obj[val] = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])(obj[va], val); // Object.assign(obj[val], val);\n    }\n  };\n\n  _proto.updateprops = function updateprops(val) {\n    this.returnIfDefined(this.props, val);\n    return this;\n  };\n\n  _proto.updatepropsAndRun = function updatepropsAndRun(val) {\n    this.updateprops(val);\n    this.execute();\n    return this.getProp('fragment');\n  };\n\n  _proto.unmount = function unmount() {\n    if (this.props !== undefined) {\n      // console.log('dom item unmounting ', this, this.props);\n      this.getProp('el').remove();\n      this.props.clear();\n      this.gc();\n    }\n  };\n\n  _proto.updateTag = function updateTag(tagName) {\n    if (tagName === void 0) {\n      tagName = 'div';\n    }\n\n    this.updateprops(tagName);\n  };\n\n  _proto.updateAttributes = function updateAttributes(attrs) {\n    if (attrs === void 0) {\n      attrs = {};\n    }\n\n    this.updateprops(attrs);\n  };\n\n  _proto.updateTemplate = function updateTemplate(template) {\n    this.updateprops(template);\n  };\n\n  _proto.updateData = function updateData(data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    this.updateprops(data);\n  };\n\n  _proto.addTagAndRender = function addTagAndRender(tagName) {\n    if (tagName === void 0) {\n      tagName = 'div';\n    }\n\n    this.updatepropsAndRun(tagName);\n  };\n\n  _proto.addAttrsibutesAndRender = function addAttrsibutesAndRender(attrs) {\n    if (attrs === void 0) {\n      attrs = {};\n    }\n\n    this.updatepropsAndRun(attrs);\n  };\n\n  _proto.addTemplateAndRender = function addTemplateAndRender(template) {\n    this.updatepropsAndRun(template);\n  };\n\n  _proto.addDataAndRender = function addDataAndRender(data) {\n    if (data === void 0) {\n      data = {};\n    }\n\n    this.updatepropsAndRun(data);\n  }; //  ==================================\n  // BASE CORE MIXINS\n  //  ==================================\n\n\n  _proto.addMixins = function addMixins() {\n    var coreMixins = Object(_utils_mixins_base_core_mixins__WEBPACK_IMPORTED_MODULE_0__[\"baseCoreMixins\"])();\n    this.gc = coreMixins.gc.bind(this);\n  };\n\n  _createClass(DomItem, [{\n    key: \"el\",\n    get: function get() {\n      return this.props.get('el');\n    }\n  }]);\n\n  return DomItem;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/views/dom-item.js\n")},"./src/spyne/views/dom-template-renderer.js":
/*!**************************************************!*\
  !*** ./src/spyne/views/dom-template-renderer.js ***!
  \**************************************************/
/*! exports provided: DomTemplateRenderer */function srcSpyneViewsDomTemplateRendererJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DomTemplateRenderer\", function() { return DomTemplateRenderer; });\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar DomTemplateRenderer =\n/*#__PURE__*/\nfunction () {\n  function DomTemplateRenderer(template, data) {\n    var _this = this;\n\n    this.template = this.formatTemplate(template);\n    this.templateData = data;\n    var strArr = DomTemplateRenderer.getStringArray(this.template);\n    var strMatches = this.template.match(DomTemplateRenderer.findTmplLoopsRE());\n    strMatches = strMatches === null ? [] : strMatches;\n\n    var mapTmplLoop = function mapTmplLoop(str, data) {\n      return str.replace(DomTemplateRenderer.parseTmplLoopsRE(), _this.parseTheTmplLoop.bind(_this));\n    };\n\n    var findTmplLoopsPred = R.contains(R.__, strMatches);\n    var checkForMatches = R.ifElse(findTmplLoopsPred, mapTmplLoop, this.addParams.bind(this));\n    this.finalArr = strArr.map(checkForMatches);\n  }\n\n  DomTemplateRenderer.getStringArray = function getStringArray(template) {\n    var strArr = template.split(DomTemplateRenderer.findTmplLoopsRE());\n    var emptyRE = /^([\\\\n\\s\\W]+)$/;\n\n    var filterOutEmptyStrings = function filterOutEmptyStrings(s) {\n      return s.match(emptyRE);\n    };\n\n    return R.reject(filterOutEmptyStrings, strArr);\n  };\n\n  DomTemplateRenderer.findTmplLoopsRE = function findTmplLoopsRE() {\n    return /({{#\\w+}}[\\w\\n\\s\\W]+?{{\\/\\w+}})/gm;\n  };\n\n  DomTemplateRenderer.parseTmplLoopsRE = function parseTmplLoopsRE() {\n    return /({{#(\\w+)}})([\\w\\n\\s\\W]+?)({{\\/\\2}})/gm;\n  };\n\n  DomTemplateRenderer.swapParamsForTagsRE = function swapParamsForTagsRE() {\n    return /({{)(.*?)(}})/gm;\n  };\n\n  var _proto = DomTemplateRenderer.prototype;\n\n  _proto.removeThis = function removeThis() {\n    this.finalArr = undefined;\n    this.templateData = undefined;\n    this.template = undefined;\n  };\n\n  _proto.getTemplateNode = function getTemplateNode() {\n    var html = this.finalArr.join(' ');\n    var el = document.createRange().createContextualFragment(html);\n    window.setTimeout(this.removeThis(), 10);\n    return el;\n  };\n\n  _proto.getTemplateString = function getTemplateString() {\n    return this.finalArr.join(' ');\n  };\n\n  _proto.formatTemplate = function formatTemplate(template) {\n    return typeof template === 'string' ? template : template.text;\n  };\n\n  _proto.addParams = function addParams(str) {\n    var _this2 = this;\n\n    var replaceTags = function replaceTags(str, p1, p2, p3) {\n      var dataVal = _this2.templateData[p2];\n      var defaultIsEmptyStr = R.defaultTo('');\n      return defaultIsEmptyStr(dataVal);\n    };\n\n    return str.replace(DomTemplateRenderer.swapParamsForTagsRE(), replaceTags);\n  };\n\n  _proto.parseTheTmplLoop = function parseTheTmplLoop(str, p1, p2, p3) {\n    var subStr = p3;\n    var elData = this.templateData[p2];\n\n    var parseString = function parseString(item, str) {\n      return str.replace(DomTemplateRenderer.swapParamsForTagsRE(), item);\n    };\n\n    var parseObject = function parseObject(obj, str) {\n      var loopObj = function loopObj(str, p1, p2) {\n        return obj[p2];\n      };\n\n      return str.replace(DomTemplateRenderer.swapParamsForTagsRE(), loopObj);\n    };\n\n    var mapStringData = function mapStringData(d) {\n      if (typeof d === 'string') {\n        d = parseString(d, subStr);\n      } else {\n        d = parseObject(d, subStr);\n      }\n\n      return d;\n    };\n\n    return elData.map(mapStringData).join(' ');\n  };\n\n  return DomTemplateRenderer;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/views/dom-template-renderer.js\n")},"./src/spyne/views/view-stream-broadcaster.js":
/*!****************************************************!*\
  !*** ./src/spyne/views/view-stream-broadcaster.js ***!
  \****************************************************/
/*! exports provided: ViewStreamBroadcaster */function srcSpyneViewsViewStreamBroadcasterJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ViewStreamBroadcaster\", function() { return ViewStreamBroadcaster; });\n/* harmony import */ var _utils_mixins_base_streams_mixins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mixins/base-streams-mixins */ \"./src/spyne/utils/mixins/base-streams-mixins.js\");\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/frp-tools */ \"./src/spyne/utils/frp-tools.js\");\n\n\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar ViewStreamBroadcaster =\n/*#__PURE__*/\nfunction () {\n  function ViewStreamBroadcaster(props, broadcastFn) {\n    this.addMixins();\n    this.props = props;\n    this.broadcastFn = broadcastFn;\n    this.broadcaster(this.broadcastFn);\n  }\n\n  var _proto = ViewStreamBroadcaster.prototype;\n\n  _proto.addDblClickEvt = function addDblClickEvt(q) {\n    var dblclick$ = Rx.Observable.fromEvent(q, 'click'); // console.log('ADDING DBL CLICK ', q);\n\n    var stream$ = dblclick$.buffer(dblclick$.debounceTime(250)).filter(function (p) {\n      return p.length === 2;\n    }).map(function (p) {\n      var data = R.clone(p[0]); // ADD DOUBLECLICK TO UI EVENTS\n\n      data['typeOverRide'] = 'dblclick';\n      return data;\n    });\n    return stream$;\n  }; //  ==================================================================\n  // BROADCAST BUTTON EVENTS\n  //  ==================================================================\n\n\n  _proto.broadcast = function broadcast(args) {\n    var _this = this;\n\n    // payloads to send, based on either the array or the elements dataMap\n    var channelPayloads = {\n      'UI': this.sendUIPayload,\n      'ROUTE': this.sendRoutePayload\n    }; // spread operator to select variables from arrays\n\n    var selector = args[0],\n        event = args[1],\n        local = args[2]; //console.log('args is ',args);\n    // btn query\n    // let query = this.props.el.querySelectorAll(selector);\n\n    var channel; // hoist channel and later check if chnl exists\n\n    var query = this.props.el.querySelectorAll(selector);\n    var isLocalEvent = local !== undefined;\n\n    var addObservable = function addObservable(q) {\n      // the  btn observable\n      var observable = event !== 'dblClick' ? Rx.Observable.fromEvent(q, event) : _this.addDblClickEvt(q); // select channel and data values from either the array or the element's dom Map\n\n      channel = q.dataset.channel; //ifNilThenUpdate(chnl, q.dataset.channel);\n\n      var data = {}; // convertDomStringMapToObj(q.dataset);\n\n      data['payload'] = Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_1__[\"convertDomStringMapToObj\"])(q.dataset);\n      data.payload = R.omit(['channel'], data.payload);\n      data['channel'] = channel; // payload needs cid# to pass verification\n      // data['event'] = event;\n      // data['el'] = q;\n\n      data['srcElement'] = {}; // R.pick(['cid','viewName'], data);\n\n      data.srcElement['cid'] = _this.props.id;\n      data.srcElement['isLocalEvent'] = isLocalEvent;\n      data.srcElement['viewName'] = _this.props.name;\n      data.srcElement['event'] = event;\n      data.srcElement['el'] = q; // select the correct payload\n\n      var channelPayload = channel !== undefined ? channelPayloads[channel] : channelPayloads['UI']; // run payload\n\n      channelPayload(observable, data);\n    };\n\n    if (query === undefined || query.length <= 0) {\n      query = this.props.el;\n      addObservable(query, event);\n    } else {\n      query.forEach = Array.prototype.forEach;\n      query.forEach(addObservable);\n    }\n  };\n\n  _proto.broadcaster = function broadcaster(arrFn) {\n    var _this2 = this;\n\n    var broadcastArr = arrFn();\n    broadcastArr.forEach(function (args) {\n      return _this2.broadcast(args);\n    });\n  }; //  =================================================================\n\n\n  _proto.addMixins = function addMixins() {\n    //  ==================================\n    // BASE STREAM MIXINS\n    //  ==================================\n    var streamMixins = Object(_utils_mixins_base_streams_mixins__WEBPACK_IMPORTED_MODULE_0__[\"baseStreamsMixins\"])();\n    this.sendUIPayload = streamMixins.sendUIPayload;\n    this.sendRoutePayload = streamMixins.sendRoutePayload;\n    this.createLifeStreamPayload = streamMixins.createLifeStreamPayload;\n  };\n\n  return ViewStreamBroadcaster;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/views/view-stream-broadcaster.js\n")},"./src/spyne/views/view-stream-enhancer-loader.js":
/*!********************************************************!*\
  !*** ./src/spyne/views/view-stream-enhancer-loader.js ***!
  \********************************************************/
/*! exports provided: ViewStreamEnhancerLoader */function srcSpyneViewsViewStreamEnhancerLoaderJs(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewStreamEnhancerLoader", function() { return ViewStreamEnhancerLoader; });\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/frp-tools */ "./src/spyne/utils/frp-tools.js");\n\n\nvar R = __webpack_require__(/*! ramda */ "ramda");\n\nvar ViewStreamEnhancerLoader =\n/*#__PURE__*/\nfunction () {\n  function ViewStreamEnhancerLoader(parent, enhancersArr) {\n    this.context = parent;\n    this.enhancersMap = new Map();\n    this.enhancersArr = enhancersArr;\n    this.initMap();\n    this.addAllEnhancerMethods();\n  }\n\n  var _proto = ViewStreamEnhancerLoader.prototype;\n\n  _proto.initMap = function initMap() {\n    this.enhancersMap.set(\'ALL\', []);\n    var allMethodsArr = Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_0__["getAllMethodNames"])(this.context).allMethods;\n    this.updateMap(\'LOCAL\', allMethodsArr);\n  };\n\n  _proto.getEnhancersMap = function getEnhancersMap() {\n    return this.enhancersMap;\n  };\n\n  _proto.updateMap = function updateMap(name, arr) {\n    var allArr = R.concat(this.enhancersMap.get(\'ALL\'), arr);\n    this.enhancersMap.set(name, arr);\n    this.enhancersMap.set(\'ALL\', allArr);\n  };\n\n  _proto.getMethodsArr = function getMethodsArr(str) {\n    return this.enhancersMap.get(str);\n  };\n\n  _proto.createEnhancerMethodsObj = function createEnhancerMethodsObj(EnhancerClass) {\n    var _this = this;\n\n    var sendError = function sendError(str) {\n      return console.error("Spyne Error: The following enhancer method, \\"" + str + "\\", already exists and cannot be added to the " + enhancer.name + " Enhancer!");\n    };\n\n    var enhancer = new EnhancerClass(this.context);\n\n    var validateMethods = function validateMethods(arr) {\n      var methodsExistsFilter = R.contains(R.__, _this.getMethodsArr(\'ALL\'));\n      var dupedMethods = R.filter(methodsExistsFilter, arr);\n      dupedMethods.forEach(sendError);\n      return dupedMethods;\n    };\n\n    var enhancerMethodsObj = enhancer.getEnhancerMethods();\n    var dupedMethodsArr = validateMethods(enhancerMethodsObj.allMethods);\n    var dropDupedMethodsFromArr = R.dropWhile(R.contains(R.__, dupedMethodsArr));\n    enhancerMethodsObj = R.map(dropDupedMethodsFromArr, enhancerMethodsObj);\n    this.updateMap(enhancer.name, enhancerMethodsObj.allMethods);\n    enhancerMethodsObj[\'enhancer\'] = enhancer;\n    enhancerMethodsObj[\'name\'] = enhancer.name;\n    return enhancerMethodsObj;\n  };\n\n  _proto.addAllEnhancerMethods = function addAllEnhancerMethods() {\n    var _this2 = this;\n\n    var addEnhancerMethods = function addEnhancerMethods(enhancerClass) {\n      var enhancerMethodsObj = _this2.createEnhancerMethodsObj(enhancerClass);\n\n      var enhancer = enhancerMethodsObj.enhancer;\n      enhancer.bindParentViewStream(enhancerMethodsObj, _this2.context);\n    };\n\n    R.forEach(addEnhancerMethods, this.enhancersArr);\n  };\n\n  return ViewStreamEnhancerLoader;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS8uL3NyYy9zcHluZS92aWV3cy92aWV3LXN0cmVhbS1lbmhhbmNlci1sb2FkZXIuanM/ODgxZiJdLCJuYW1lcyI6WyJSIiwicmVxdWlyZSIsIlZpZXdTdHJlYW1FbmhhbmNlckxvYWRlciIsInBhcmVudCIsImVuaGFuY2Vyc0FyciIsImNvbnRleHQiLCJlbmhhbmNlcnNNYXAiLCJNYXAiLCJpbml0TWFwIiwiYWRkQWxsRW5oYW5jZXJNZXRob2RzIiwic2V0IiwiYWxsTWV0aG9kc0FyciIsImdldEFsbE1ldGhvZE5hbWVzIiwiYWxsTWV0aG9kcyIsInVwZGF0ZU1hcCIsImdldEVuaGFuY2Vyc01hcCIsIm5hbWUiLCJhcnIiLCJhbGxBcnIiLCJjb25jYXQiLCJnZXQiLCJnZXRNZXRob2RzQXJyIiwic3RyIiwiY3JlYXRlRW5oYW5jZXJNZXRob2RzT2JqIiwiRW5oYW5jZXJDbGFzcyIsInNlbmRFcnJvciIsImNvbnNvbGUiLCJlcnJvciIsImVuaGFuY2VyIiwidmFsaWRhdGVNZXRob2RzIiwibWV0aG9kc0V4aXN0c0ZpbHRlciIsImNvbnRhaW5zIiwiX18iLCJkdXBlZE1ldGhvZHMiLCJmaWx0ZXIiLCJmb3JFYWNoIiwiZW5oYW5jZXJNZXRob2RzT2JqIiwiZ2V0RW5oYW5jZXJNZXRob2RzIiwiZHVwZWRNZXRob2RzQXJyIiwiZHJvcER1cGVkTWV0aG9kc0Zyb21BcnIiLCJkcm9wV2hpbGUiLCJtYXAiLCJhZGRFbmhhbmNlck1ldGhvZHMiLCJlbmhhbmNlckNsYXNzIiwiYmluZFBhcmVudFZpZXdTdHJlYW0iXSwibWFwcGluZ3MiOiI7OztBQUFBOztBQUVBLElBQU1BLElBQUksbUJBQUFDLENBQVEsb0JBQVIsQ0FBVjs7QUFFQSxJQUFhQyx3QkFBYjtBQUFBO0FBQUE7QUFDRSxvQ0FBWUMsTUFBWixFQUFvQkMsWUFBcEIsRUFBa0M7QUFDaEMsU0FBS0MsT0FBTCxHQUFlRixNQUFmO0FBQ0EsU0FBS0csWUFBTCxHQUFvQixJQUFJQyxHQUFKLEVBQXBCO0FBQ0EsU0FBS0gsWUFBTCxHQUFvQkEsWUFBcEI7QUFFQSxTQUFLSSxPQUFMO0FBQ0EsU0FBS0MscUJBQUw7QUFDRDs7QUFSSDs7QUFBQSxTQVVFRCxPQVZGLHNCQVVZO0FBQ1IsU0FBS0YsWUFBTCxDQUFrQkksR0FBbEIsQ0FBc0IsS0FBdEIsRUFBNkIsRUFBN0I7QUFDQSxRQUFJQyxnQkFBZ0IsMEVBQUFDLENBQWtCLEtBQUtQLE9BQXZCLEVBQWdDUSxVQUFwRDtBQUNBLFNBQUtDLFNBQUwsQ0FBZSxPQUFmLEVBQXdCSCxhQUF4QjtBQUNELEdBZEg7O0FBQUEsU0FnQkVJLGVBaEJGLDhCQWdCb0I7QUFDaEIsV0FBTyxLQUFLVCxZQUFaO0FBQ0QsR0FsQkg7O0FBQUEsU0FvQkVRLFNBcEJGLHNCQW9CWUUsSUFwQlosRUFvQmtCQyxHQXBCbEIsRUFvQnVCO0FBQ25CLFFBQUlDLFNBQVNsQixFQUFFbUIsTUFBRixDQUFTLEtBQUtiLFlBQUwsQ0FBa0JjLEdBQWxCLENBQXNCLEtBQXRCLENBQVQsRUFBdUNILEdBQXZDLENBQWI7QUFDQSxTQUFLWCxZQUFMLENBQWtCSSxHQUFsQixDQUFzQk0sSUFBdEIsRUFBNEJDLEdBQTVCO0FBQ0EsU0FBS1gsWUFBTCxDQUFrQkksR0FBbEIsQ0FBc0IsS0FBdEIsRUFBNkJRLE1BQTdCO0FBQ0QsR0F4Qkg7O0FBQUEsU0EwQkVHLGFBMUJGLDBCQTBCZ0JDLEdBMUJoQixFQTBCcUI7QUFDakIsV0FBTyxLQUFLaEIsWUFBTCxDQUFrQmMsR0FBbEIsQ0FBc0JFLEdBQXRCLENBQVA7QUFDRCxHQTVCSDs7QUFBQSxTQThCRUMsd0JBOUJGLHFDQThCMkJDLGFBOUIzQixFQThCMEM7QUFBQTs7QUFDdEMsUUFBTUMsWUFBWSxTQUFaQSxTQUFZO0FBQUEsYUFBT0MsUUFBUUMsS0FBUixvREFDeUJMLEdBRHpCLHNEQUM0RU0sU0FBU1osSUFEckYsZ0JBQVA7QUFBQSxLQUFsQjs7QUFFQSxRQUFJWSxXQUFXLElBQUlKLGFBQUosQ0FBa0IsS0FBS25CLE9BQXZCLENBQWY7O0FBRUEsUUFBTXdCLGtCQUFrQixTQUFsQkEsZUFBa0IsTUFBTztBQUM3QixVQUFJQyxzQkFBc0I5QixFQUFFK0IsUUFBRixDQUFXL0IsRUFBRWdDLEVBQWIsRUFBaUIsTUFBS1gsYUFBTCxDQUFtQixLQUFuQixDQUFqQixDQUExQjtBQUNBLFVBQUlZLGVBQWVqQyxFQUFFa0MsTUFBRixDQUFTSixtQkFBVCxFQUE4QmIsR0FBOUIsQ0FBbkI7QUFDQWdCLG1CQUFhRSxPQUFiLENBQXFCVixTQUFyQjtBQUNBLGFBQU9RLFlBQVA7QUFDRCxLQUxEOztBQU9BLFFBQUlHLHFCQUFxQlIsU0FBU1Msa0JBQVQsRUFBekI7QUFDQSxRQUFJQyxrQkFBa0JULGdCQUFnQk8sbUJBQW1CdkIsVUFBbkMsQ0FBdEI7QUFDQSxRQUFJMEIsMEJBQTBCdkMsRUFBRXdDLFNBQUYsQ0FDNUJ4QyxFQUFFK0IsUUFBRixDQUFXL0IsRUFBRWdDLEVBQWIsRUFBaUJNLGVBQWpCLENBRDRCLENBQTlCO0FBR0FGLHlCQUFxQnBDLEVBQUV5QyxHQUFGLENBQU1GLHVCQUFOLEVBQStCSCxrQkFBL0IsQ0FBckI7QUFFQSxTQUFLdEIsU0FBTCxDQUFlYyxTQUFTWixJQUF4QixFQUE4Qm9CLG1CQUFtQnZCLFVBQWpEO0FBRUF1Qix1QkFBbUIsVUFBbkIsSUFBaUNSLFFBQWpDO0FBQ0FRLHVCQUFtQixNQUFuQixJQUE2QlIsU0FBU1osSUFBdEM7QUFFQSxXQUFPb0Isa0JBQVA7QUFDRCxHQXZESDs7QUFBQSxTQXlERTNCLHFCQXpERixvQ0F5RDBCO0FBQUE7O0FBQ3RCLFFBQU1pQyxxQkFBcUIsU0FBckJBLGtCQUFxQixDQUFDQyxhQUFELEVBQW1CO0FBQzVDLFVBQUlQLHFCQUFxQixPQUFLYix3QkFBTCxDQUE4Qm9CLGFBQTlCLENBQXpCOztBQUNBLFVBQUlmLFdBQVdRLG1CQUFtQlIsUUFBbEM7QUFDQUEsZUFBU2dCLG9CQUFULENBQThCUixrQkFBOUIsRUFBa0QsT0FBSy9CLE9BQXZEO0FBQ0QsS0FKRDs7QUFNQUwsTUFBRW1DLE9BQUYsQ0FBVU8sa0JBQVYsRUFBOEIsS0FBS3RDLFlBQW5DO0FBQ0QsR0FqRUg7O0FBQUE7QUFBQSIsImZpbGUiOiIuL3NyYy9zcHluZS92aWV3cy92aWV3LXN0cmVhbS1lbmhhbmNlci1sb2FkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldEFsbE1ldGhvZE5hbWVzfSBmcm9tICcuLi91dGlscy9mcnAtdG9vbHMnO1xuXG5jb25zdCBSID0gcmVxdWlyZSgncmFtZGEnKTtcblxuZXhwb3J0IGNsYXNzIFZpZXdTdHJlYW1FbmhhbmNlckxvYWRlciB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgZW5oYW5jZXJzQXJyKSB7XG4gICAgdGhpcy5jb250ZXh0ID0gcGFyZW50O1xuICAgIHRoaXMuZW5oYW5jZXJzTWFwID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuZW5oYW5jZXJzQXJyID0gZW5oYW5jZXJzQXJyO1xuXG4gICAgdGhpcy5pbml0TWFwKCk7XG4gICAgdGhpcy5hZGRBbGxFbmhhbmNlck1ldGhvZHMoKTtcbiAgfVxuXG4gIGluaXRNYXAoKSB7XG4gICAgdGhpcy5lbmhhbmNlcnNNYXAuc2V0KCdBTEwnLCBbXSk7XG4gICAgbGV0IGFsbE1ldGhvZHNBcnIgPSBnZXRBbGxNZXRob2ROYW1lcyh0aGlzLmNvbnRleHQpLmFsbE1ldGhvZHM7XG4gICAgdGhpcy51cGRhdGVNYXAoJ0xPQ0FMJywgYWxsTWV0aG9kc0Fycik7XG4gIH1cblxuICBnZXRFbmhhbmNlcnNNYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5oYW5jZXJzTWFwO1xuICB9XG5cbiAgdXBkYXRlTWFwKG5hbWUsIGFycikge1xuICAgIGxldCBhbGxBcnIgPSBSLmNvbmNhdCh0aGlzLmVuaGFuY2Vyc01hcC5nZXQoJ0FMTCcpLCBhcnIpO1xuICAgIHRoaXMuZW5oYW5jZXJzTWFwLnNldChuYW1lLCBhcnIpO1xuICAgIHRoaXMuZW5oYW5jZXJzTWFwLnNldCgnQUxMJywgYWxsQXJyKTtcbiAgfVxuXG4gIGdldE1ldGhvZHNBcnIoc3RyKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5oYW5jZXJzTWFwLmdldChzdHIpO1xuICB9XG5cbiAgY3JlYXRlRW5oYW5jZXJNZXRob2RzT2JqKEVuaGFuY2VyQ2xhc3MpIHtcbiAgICBjb25zdCBzZW5kRXJyb3IgPSBzdHIgPT4gY29uc29sZS5lcnJvcihcbiAgICAgIGBTcHluZSBFcnJvcjogVGhlIGZvbGxvd2luZyBlbmhhbmNlciBtZXRob2QsIFwiJHtzdHJ9XCIsIGFscmVhZHkgZXhpc3RzIGFuZCBjYW5ub3QgYmUgYWRkZWQgdG8gdGhlICR7ZW5oYW5jZXIubmFtZX0gRW5oYW5jZXIhYCk7XG4gICAgbGV0IGVuaGFuY2VyID0gbmV3IEVuaGFuY2VyQ2xhc3ModGhpcy5jb250ZXh0KTtcblxuICAgIGNvbnN0IHZhbGlkYXRlTWV0aG9kcyA9IGFyciA9PiB7XG4gICAgICBsZXQgbWV0aG9kc0V4aXN0c0ZpbHRlciA9IFIuY29udGFpbnMoUi5fXywgdGhpcy5nZXRNZXRob2RzQXJyKCdBTEwnKSk7XG4gICAgICBsZXQgZHVwZWRNZXRob2RzID0gUi5maWx0ZXIobWV0aG9kc0V4aXN0c0ZpbHRlciwgYXJyKTtcbiAgICAgIGR1cGVkTWV0aG9kcy5mb3JFYWNoKHNlbmRFcnJvcik7XG4gICAgICByZXR1cm4gZHVwZWRNZXRob2RzO1xuICAgIH07XG5cbiAgICBsZXQgZW5oYW5jZXJNZXRob2RzT2JqID0gZW5oYW5jZXIuZ2V0RW5oYW5jZXJNZXRob2RzKCk7XG4gICAgbGV0IGR1cGVkTWV0aG9kc0FyciA9IHZhbGlkYXRlTWV0aG9kcyhlbmhhbmNlck1ldGhvZHNPYmouYWxsTWV0aG9kcyk7XG4gICAgbGV0IGRyb3BEdXBlZE1ldGhvZHNGcm9tQXJyID0gUi5kcm9wV2hpbGUoXG4gICAgICBSLmNvbnRhaW5zKFIuX18sIGR1cGVkTWV0aG9kc0FycikpO1xuXG4gICAgZW5oYW5jZXJNZXRob2RzT2JqID0gUi5tYXAoZHJvcER1cGVkTWV0aG9kc0Zyb21BcnIsIGVuaGFuY2VyTWV0aG9kc09iaik7XG5cbiAgICB0aGlzLnVwZGF0ZU1hcChlbmhhbmNlci5uYW1lLCBlbmhhbmNlck1ldGhvZHNPYmouYWxsTWV0aG9kcyk7XG5cbiAgICBlbmhhbmNlck1ldGhvZHNPYmpbJ2VuaGFuY2VyJ10gPSBlbmhhbmNlcjtcbiAgICBlbmhhbmNlck1ldGhvZHNPYmpbJ25hbWUnXSA9IGVuaGFuY2VyLm5hbWU7XG5cbiAgICByZXR1cm4gZW5oYW5jZXJNZXRob2RzT2JqO1xuICB9XG5cbiAgYWRkQWxsRW5oYW5jZXJNZXRob2RzKCkge1xuICAgIGNvbnN0IGFkZEVuaGFuY2VyTWV0aG9kcyA9IChlbmhhbmNlckNsYXNzKSA9PiB7XG4gICAgICBsZXQgZW5oYW5jZXJNZXRob2RzT2JqID0gdGhpcy5jcmVhdGVFbmhhbmNlck1ldGhvZHNPYmooZW5oYW5jZXJDbGFzcyk7XG4gICAgICBsZXQgZW5oYW5jZXIgPSBlbmhhbmNlck1ldGhvZHNPYmouZW5oYW5jZXI7XG4gICAgICBlbmhhbmNlci5iaW5kUGFyZW50Vmlld1N0cmVhbShlbmhhbmNlck1ldGhvZHNPYmosIHRoaXMuY29udGV4dCk7XG4gICAgfTtcblxuICAgIFIuZm9yRWFjaChhZGRFbmhhbmNlck1ldGhvZHMsIHRoaXMuZW5oYW5jZXJzQXJyKTtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/spyne/views/view-stream-enhancer-loader.js\n')},"./src/spyne/views/view-stream.js":
/*!****************************************!*\
  !*** ./src/spyne/views/view-stream.js ***!
  \****************************************/
/*! exports provided: ViewStream */function srcSpyneViewsViewStreamJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ViewStream\", function() { return ViewStream; });\n/* harmony import */ var _utils_mixins_base_core_mixins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mixins/base-core-mixins */ \"./src/spyne/utils/mixins/base-core-mixins.js\");\n/* harmony import */ var _utils_mixins_base_streams_mixins__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/mixins/base-streams-mixins */ \"./src/spyne/utils/mixins/base-streams-mixins.js\");\n/* harmony import */ var _utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/deep-merge */ \"./src/spyne/utils/deep-merge.js\");\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/frp-tools */ \"./src/spyne/utils/frp-tools.js\");\n/* harmony import */ var _view_to_dom_mediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view-to-dom-mediator */ \"./src/spyne/views/view-to-dom-mediator.js\");\n/* harmony import */ var _view_stream_enhancer_loader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view-stream-enhancer-loader */ \"./src/spyne/views/view-stream-enhancer-loader.js\");\n/* harmony import */ var _channels_channels_config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../channels/channels-config */ \"./src/spyne/channels/channels-config.js\");\n/* harmony import */ var _view_stream_broadcaster__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./view-stream-broadcaster */ \"./src/spyne/views/view-stream-broadcaster.js\");\n/* harmony import */ var _channels_channels_payload__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../channels/channels-payload */ \"./src/spyne/channels/channels-payload.js\");\n/* harmony import */ var _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/viewstream-lifecycle-observables */ \"./src/spyne/utils/viewstream-lifecycle-observables.js\");\n/* harmony import */ var _dom_item_selectors__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dom-item-selectors */ \"./src/spyne/views/dom-item-selectors.js\");\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n // import {gc} from '../utils/gc';\n\n\n\n\n\n\n\n\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar ViewStream =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @module ViewStream\n   *\n   * @desc\n   * The ViewStream object creates or references  a dom elment; the dom element can be as simple as a &#60;p&gt; tag, or the dom element can be a large dom chunk that is generated from data and an html template.\n   * <br><br>\n   * Generally, the idea is to extend the ViewStream class and add the custom values within the constructor function, but all of the values can be passed as parameters as well.\n   *\n   * @example\n   * // returns <h2>Hello World</h2>\n   * new ViewStream({tagName:'h2', data:'Hello World'};\n   * @example\n   * //  returns\n   * <ul>\n   *    <li>firstName: Jane<li>\n   *    <li>lastName: Doe<li>\n   *    <li>Age: 23<li>\n   * </ul>\n   *\n   * let myTemplate = '<li>firstName: {{fName}}<li>lastName: {{lName}}<li>Age: {{age}}';\n   * let myData = {fName: Jane, lName: Doe, age:23};\n   * new ViewStream({tagName:'ul', data:myData, template:myTemplate});\n   *\n   *\n   *\n   * @constructor\n   * @param {object} props This json object takes in parameters to generate or reference the dom element\n   * @property {string} props.tagName  - 'div'  This can be any dom tag\n   * @property {domItem} props.el undefined, if defined, ViewStream will connect to that element\n   * @property {string|object} props.data undefined, // string for innerText or Json object for html template\n   * @property {boolean} props.animateIn - false, animates in View\n   * @property {number} props.animateInTime - .5\n   * @property {boolean} props.animateOut false, animates in View\n   * @property {number} props.animateOutTime .5\n   * @property {string} props.id - undefined, generates a random id if left undefined\n   * @property {boolean} props.debug false\n   * @property {template} props.template undefined, // html template\n   *\n   */\n  function ViewStream(props) {\n    var _this = this;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    this.checker = Math.random();\n    this.addMixins();\n\n    this.defaults = function () {\n      var cid = _this.createId();\n\n      var id = props.id ? props.id : cid;\n      return {\n        cid: cid,\n        id: id,\n        tagName: 'div',\n        el: undefined,\n        data: undefined,\n        animateIn: false,\n        animateInTime: 0.5,\n        animateOut: false,\n        animateOutTime: 0.5,\n        hashId: \"#\" + id,\n        viewClass: _view_to_dom_mediator__WEBPACK_IMPORTED_MODULE_4__[\"ViewToDomMediator\"],\n        extendedSourcesHashMethods: {},\n        debug: false,\n        template: undefined,\n        node: document.createDocumentFragment(),\n        name: Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__[\"getConstructorName\"])(_this)\n      };\n    };\n\n    this._state = {};\n    this.$dirs = _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_9__[\"LifecyleObservables\"].createDirectionalFiltersObject();\n    this.addDefaultDirection = _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_9__[\"LifecyleObservables\"].addDefaultDir;\n    this.addDownInternalDir = _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_9__[\"LifecyleObservables\"].addDownInternalDir; //this.props = Object.assign({}, this.defaults(), props);\n\n    this.props = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])(this.defaults(), props); //window.Spyne['config'] = deepMerge(defaultConfig, config);// Object.assign({}, defaultConfig, config);// config !== undefined ? config : defaultConfig;\n\n    this.props['domAttributes'] = R.pick(['id', 'class', 'dataset'], this.props);\n    this.loadEnhancers();\n    this.loadAllMethods();\n    this.props.action = 'LOADED';\n    this.sink$ = new Rx.Subject();\n    var ViewClass = this.props.viewClass;\n    this.view = new ViewClass(this.sink$, {}, this.props.cid, this.constructor.name); // new this.props.viewClass(this.sink$);\n\n    this.sourceStreams = this.view.sourceStreams;\n    this._rawSource$ = this.view.getSourceStream();\n    this._rawSource$['viewName'] = this.props.name;\n    this.sendEventsDownStream = this.sendEventsDownStreamFn;\n    this.init();\n    this.checkIfElementAlreadyExists();\n  }\n\n  var _proto = ViewStream.prototype;\n\n  _proto.checkIfElementAlreadyExists = function checkIfElementAlreadyExists() {\n    var elIsDomElement = function elIsDomElement(el) {\n      return el !== undefined && el.tagName !== undefined;\n    };\n\n    var elIsRendered = function elIsRendered(el) {\n      return document.body.contains(el);\n    };\n\n    var elIsReadyBool = R.propSatisfies(R.allPass([elIsRendered, elIsDomElement]), 'el');\n\n    if (elIsReadyBool(this.props)) {\n      this.postRender();\n    }\n  };\n\n  _proto.loadEnhancers = function loadEnhancers(arr) {\n    if (arr === void 0) {\n      arr = [];\n    }\n\n    var enhancerLoader = new _view_stream_enhancer_loader__WEBPACK_IMPORTED_MODULE_5__[\"ViewStreamEnhancerLoader\"](this, arr);\n    this.props['enhancersMap'] = enhancerLoader.getEnhancersMap();\n    enhancerLoader = undefined;\n  };\n\n  _proto.loadAllMethods = function loadAllMethods() {\n    var _this2 = this;\n\n    var channelFn = R.curry(this.onChannelMethodCall.bind(this));\n\n    var createExtraStatesMethod = function createExtraStatesMethod(arr) {\n      var action = arr[0],\n          funcStr = arr[1],\n          enhancer = arr[2];\n      var defaultEnhancer = R.defaultTo('LOCAL');\n      _this2.props.extendedSourcesHashMethods[action] = channelFn(funcStr, defaultEnhancer(enhancer));\n    };\n\n    this.addActionListeners().forEach(createExtraStatesMethod);\n    this.props.hashSourceMethods = this.setSourceHashMethods(this.props.extendedSourcesHashMethods);\n  };\n\n  _proto.addActionListeners = function addActionListeners() {\n    return [];\n  };\n\n  _proto.onChannelMethodCall = function onChannelMethodCall(str, enhancer, p) {\n    if (p.$dir !== undefined && p.$dir.includes('child') && this.deleted !== true) {\n      var obj = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])({}, p); // Object.assign({}, p);\n\n      obj['$dir'] = this.$dirs.C;\n      this.sourceStreams.raw$.next(obj);\n    }\n\n    var methodsArr = this.props.enhancersMap.get(enhancer);\n\n    if (R.contains(str, methodsArr) === false) {\n      console.warn(\"Spyne Warning: The method, \\\"\" + str + \"\\\", does not appear to exist in \" + enhancer + \" file! \");\n    } else {\n      this[str](p);\n    }\n  };\n\n  _proto.setSourceHashMethods = function setSourceHashMethods(extendedSourcesHashMethods) {\n    var _this3 = this;\n\n    if (extendedSourcesHashMethods === void 0) {\n      extendedSourcesHashMethods = {};\n    }\n\n    var hashSourceKeys = {\n      'DISPOSING': function DISPOSING(p) {\n        return _this3.checkParentDispose(p);\n      },\n      'DISPOSE': function DISPOSE(p) {\n        return _this3.onDispose(p);\n      },\n      // 'CHILD_DISPOSE'                    : (p) => this.onDispose(p),\n      'RENDERED': function RENDERED(p) {\n        return _this3.onRendered(p);\n      },\n      'RENDERED_AND_ATTACHED_TO_DOM': function RENDERED_AND_ATTACHED_TO_DOM(p) {\n        return _this3.onRendered(p);\n      },\n      'RENDERED_AND_ATTACHED_TO_PARENT': function RENDERED_AND_ATTACHED_TO_PARENT(p) {\n        return _this3.onRendered(p);\n      },\n      // 'CHILD_RENDERED'                   : (p) => this.attachChildToView(p),\n      'READY_FOR_GC': function READY_FOR_GC(p) {\n        return _this3.onReadyToGC(p);\n      },\n      'NOTHING': function NOTHING() {\n        return {};\n      }\n    };\n    return _utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"].all([{}, hashSourceKeys, extendedSourcesHashMethods]);\n  }; //  =====================================================================\n  // ====================== MAIN STREAM METHODS ==========================\n\n\n  _proto.init = function init() {\n    var _this4 = this;\n\n    this._source$ = this._rawSource$.map(function (payload) {\n      return _this4.onMapViewSource(payload);\n    }).takeWhile(this.notGCSTATE);\n    this.initAutoMergeSourceStreams();\n    this.updateSourceSubscription(this._source$, true);\n  };\n\n  _proto.notGCSTATE = function notGCSTATE(p) {\n    return !p.action.includes('READY_FOR_GC');\n  };\n\n  _proto.eqGCSTATE = function eqGCSTATE(p) {\n    return !p.action.includes('READY_FOR_GC');\n  };\n\n  _proto.notCOMPLETED = function notCOMPLETED(p) {\n    return !p.action.includes('COMPLETED');\n  };\n\n  _proto.notGCCOMPLETE = function notGCCOMPLETE(p) {\n    return !p.action.includes('GC_COMPLETE');\n  };\n\n  _proto.testVal = function testVal(p) {\n    console.log('TESTING VALL IS ', p);\n  };\n\n  _proto.addParentStream = function addParentStream(obs, attachData) {\n    var _this5 = this;\n\n    var filterOutNullData = function filterOutNullData(data) {\n      return data !== undefined && data.action !== undefined;\n    };\n\n    var checkIfDisposeOrFadeout = function checkIfDisposeOrFadeout(d) {\n      var data = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])({}, d);\n\n      if (data.action === 'DISPOSE_AND_READY_FOR_GC') {\n        _this5.onDispose(data);\n\n        data.action = 'READY_FOR_GC';\n      }\n\n      return data;\n    };\n\n    this.parent$ = obs.filter(filterOutNullData).map(checkIfDisposeOrFadeout).takeWhile(this.notGCCOMPLETE);\n    this.updateSourceSubscription(this.parent$, false, 'PARENT');\n    this.renderAndAttachToParent(attachData);\n  };\n\n  _proto.addChildStream = function addChildStream(obs$) {\n    var _this6 = this;\n\n    var filterOutNullData = function filterOutNullData(data) {\n      return data !== undefined && data.action !== undefined;\n    };\n\n    var child$ = obs$.filter(filterOutNullData).do(function (p) {\n      return _this6.tracer('addChildStraem do ', p);\n    }).map(function (p) {\n      return p;\n    }) // .takeWhile(this.notGCSTATE)\n    .finally(function (p) {\n      return _this6.onChildCompleted(child$.source);\n    });\n    this.updateSourceSubscription(child$, true, 'CHILD');\n  };\n\n  _proto.onChildDisposed = function onChildDisposed(p) {};\n\n  _proto.onChildCompleted = function onChildCompleted(p) {\n    var findName = function findName(x) {\n      var finalDest = function finalDest(y) {\n        while (y.destination !== undefined) {\n          y = finalDest(y.destination);\n        }\n\n        return y;\n      };\n\n      return R.pick(['viewName', 'cid'], finalDest(x));\n    };\n\n    var childCompletedData = findName(p);\n    this.tracer('onChildCompleted ', this.checker, p); //console.log('obj is ',childCompletedName,obj,this.props);\n\n    this.onChildDisposed(childCompletedData, p);\n    return childCompletedData;\n  };\n\n  _proto.initAutoMergeSourceStreams = function initAutoMergeSourceStreams() {\n    var _this7 = this;\n\n    // ====================== SUBSCRIPTION SOURCE =========================\n    var subscriber = {\n      next: this.onSubscribeToSourcesNext.bind(this),\n      error: this.onSubscribeToSourcesError.bind(this),\n      complete: this.onSubscribeToSourcesComplete.bind(this)\n    }; // let takeBeforeGCOld = (val) => val.action !== 'GARBAGE_COLLECTED';\n    // let takeBeforeGC = (p) => !p.action.includes('READY_FOR_GC');\n    // let mapToState = (val) => ({action:val});\n    //  =====================================================================\n    // ========== METHODS TO CHECK FOR WHEN TO COMPLETE THE STREAM =========\n\n    var completeAll = function completeAll() {\n      _this7.props.el$.unmount();\n\n      _this7.uberSource$.complete();\n\n      _this7.autoSubscriber$.complete();\n\n      _this7.sink$.complete();\n\n      _this7.props = undefined;\n      _this7.deleted = true;\n\n      _this7.tracer('completeAll', _this7.deleted, _this7.props);\n    };\n\n    var decrementOnObservableClosed = function decrementOnObservableClosed() {\n      obsCount -= 1;\n\n      if (obsCount === 0) {\n        completeAll();\n      }\n    }; //  =====================================================================\n    // ======================== INIT STREAM METHODS ========================\n\n\n    var obsCount = 0;\n    this.uberSource$ = new Rx.Subject(); // ======================= COMPOSED RXJS OBSERVABLE ======================\n\n    var incrementObservablesThatCloses = function incrementObservablesThatCloses() {\n      obsCount += 1;\n    };\n\n    this.autoMergeSubject$ = this.uberSource$.mergeMap(function (obsData) {\n      var branchObservable$ = obsData.observable.filter(function (p) {\n        return p !== undefined && p.action !== undefined;\n      }).map(function (p) {\n        // console.log('PAYLOAD IS ', p, this.constructor.name)\n        var payload = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])({}, p);\n        payload.action = p.action; // addRelationToState(obsData.rel, p.action);\n\n        _this7.tracer('autoMergeSubject$', payload);\n\n        return payload;\n      });\n\n      if (obsData.autoClosesBool === false) {\n        return branchObservable$;\n      } else {\n        incrementObservablesThatCloses();\n        return branchObservable$.finally(decrementOnObservableClosed);\n      }\n    }); // ============================= SUBSCRIBER ==============================\n\n    this.autoSubscriber$ = this.autoMergeSubject$ // .do((p) => console.log('SINK DATA ', this.constructor.name, p))\n    .filter(function (p) {\n      return p !== undefined && p.action !== undefined;\n    }).subscribe(subscriber);\n  }; // ========================= MERGE STREAMS TO MAIN SUBSCRIBER =================\n\n\n  _proto.updateSourceSubscription = function updateSourceSubscription(obs$, autoClosesBool, rel) {\n    if (autoClosesBool === void 0) {\n      autoClosesBool = false;\n    }\n\n    // const directionArr = sendDownStream === true ? this.$dirs.DI : this.$dirs.I;\n    var obj = {\n      observable: obs$,\n      autoClosesBool: autoClosesBool,\n      rel: rel\n    };\n    this.tracer('updateSourceSubscription ', this.checker, obj);\n    this.uberSource$.next(obj);\n  }; // ============================= SUBSCRIBER METHODS ==============================\n\n\n  _proto.onSubscribeToSourcesNext = function onSubscribeToSourcesNext(payload) {\n    var _this8 = this;\n\n    if (payload === void 0) {\n      payload = {};\n    }\n\n    var defaultToFn = R.defaultTo(function (p) {\n      return _this8.sendExtendedStreams(p);\n    }); // ****USE REGEX AS PREDICATE CHECK FOR PAYLOAD.ACTION IN HASH METHODS OBJ\n    // const hashAction = this.props.hashSourceMethods[payload.action];\n\n    var hashActionStr = Object(_utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__[\"findStrOrRegexMatchStr\"])(this.props.hashSourceMethods, payload.action);\n    var hashAction = this.props.hashSourceMethods[hashActionStr]; // console.log('S PAYLOAD ', this.props.name, typeof (hashAction), payload);\n\n    var fn = defaultToFn(hashAction); // console.log('hash methods ', fn, this.props.name, payload.action, hashActionStr, this.props.hashSourceMethods);\n\n    fn(payload); // console.log(fn, payload, ' THE PAYLOAD FROM SUBSCRIBE IS ', ' ---- ', ' ---\x3e ', this.props);\n    // console.log('DISPOSER VS NEXT', this.constructor.name, payload);\n\n    this.tracer('onSubscribeToSourcesNext', {\n      payload: payload\n    });\n  };\n\n  _proto.onSubscribeToSourcesError = function onSubscribeToSourcesError(payload) {\n    if (payload === void 0) {\n      payload = '';\n    }\n\n    console.log('ALL ERROR  ', this.constructor.name, payload);\n  };\n\n  _proto.onSubscribeToSourcesComplete = function onSubscribeToSourcesComplete() {\n    // console.log('==== DISPOSER ALL COMPLETED ====', this.constructor.name);\n    this.tracer('onSubscribeToSourcesComplete', 'GARBAGE_COLLECT');\n    this.openSpigot('GARBAGE_COLLECT');\n  }; //  =======================================================================================\n  // ============================= HASH KEY AND SPIGOT METHODS==============================\n\n\n  _proto.sendExtendedStreams = function sendExtendedStreams(payload) {\n    this.tracer('sendExtendedStreams', payload); // console.log('extended methods ', payload.action, payload);\n\n    this.openSpigot(payload.action, payload);\n  }; // ===================================== RENDER METHODS ==================================\n\n\n  _proto.renderAndAttachToParent = function renderAndAttachToParent(attachData) {\n    // let childRenderData = attachData;\n    this.openSpigot('RENDER_AND_ATTACH_TO_PARENT', attachData);\n  };\n\n  _proto.renderView = function renderView() {\n    this.openSpigot('RENDER');\n  };\n\n  _proto.renderViewAndAttachToDom = function renderViewAndAttachToDom(node, type, attachType) {\n    var attachData = {\n      node: node,\n      type: type,\n      attachType: attachType\n    };\n    this.openSpigot('RENDER_AND_ATTACH_TO_DOM', {\n      attachData: attachData\n    });\n  };\n\n  _proto.attachChildToView = function attachChildToView(data) {} // let childRenderData = data.attachData;\n  // console.log('CHILD DATA ', this.constructor.name, childRenderData);\n  // this.openSpigot('ATTACH_CHILD_TO_SELF', {childRenderData});\n  // ===================================== DISPOSE METHODS =================================\n  ;\n\n  _proto.checkParentDispose = function checkParentDispose(p) {\n    if (p.from$ === 'parent') {\n      this.onDispose(p);\n    }\n  };\n\n  _proto.onBeforeDispose = function onBeforeDispose() {};\n\n  _proto.onDispose = function onDispose(p) {\n    // console.log('DISPOSER VS onDispose ', this.constructor.name);\n    this.onBeforeDispose();\n    this.openSpigot('DISPOSE');\n  };\n\n  _proto.onChildDispose = function onChildDispose(p) {};\n\n  _proto.onParentDisposing = function onParentDisposing(p) {\n    // this.updateSourceSubscription(this._source$);\n    this.openSpigot('DISPOSE');\n  };\n\n  _proto.onReadyToGC = function onReadyToGC(p) {\n    var isInternal = p.from$ !== undefined && p.from$ === 'internal';\n\n    if (isInternal) {// this.openSpigot('GARBAGE_COLLECT');\n    }\n\n    this.tracer('onReadyToGC', isInternal, p);\n  }; // ===================================== SINK$ METHODS =================================\n\n\n  _proto.sendEventsDownStreamFn = function sendEventsDownStreamFn(o, action) {\n    if (action === void 0) {\n      action = {};\n    }\n\n    // console.log('OBJ ACTION ', o, action);\n    var obj = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])({\n      action: action\n    }, o); // obj['action'] = action;\n\n    obj['$dir'] = this.$dirs.C; // console.log('OBJ FINAL ', obj);\n\n    this.sourceStreams.raw$.next(obj);\n  };\n\n  _proto.openSpigot = function openSpigot(action, obj) {\n    if (obj === void 0) {\n      obj = {};\n    }\n\n    if (this.props !== undefined) {\n      this.props.action = action;\n      var data = R.merge(this.props, obj);\n      this.sink$.next(Object.freeze(data));\n    }\n  };\n\n  _proto.setAttachData = function setAttachData(attachType, query) {\n    return {\n      node: this.props.el,\n      type: 'ViewToDomMediator',\n      attachType: attachType,\n      query: this.props.el.querySelector(query)\n    };\n  };\n\n  _proto.getParentEls = function getParentEls(el, num) {\n    var getElem = function getElem(el) {\n      return el.parentElement;\n    };\n\n    var iter = 0;\n    var parentEl = el;\n\n    while (iter < num) {\n      parentEl = getElem(parentEl);\n      iter++;\n    }\n\n    return parentEl;\n  };\n\n  _proto.setAttachParentData = function setAttachParentData(attachType, query, level) {\n    return {\n      node: this.getParentEls(this.props.el, level),\n      type: 'ViewToDomMediator',\n      attachType: attachType,\n      query: this.props.el.parentElement.querySelector(query)\n    };\n  };\n\n  _proto.onMapViewSource = function onMapViewSource(payload) {\n    if (payload === void 0) {\n      payload = {};\n    }\n\n    this.props = R.merge(this.props, payload);\n    return payload;\n  }; // ====================== ATTACH STREAM AND DOM DATA AGGREGATORS==========================\n\n\n  _proto.exchangeViewsWithChild = function exchangeViewsWithChild(childView, attachData) {\n    this.addChildStream(childView.sourceStreams.toParent$);\n    childView.addParentStream(this.sourceStreams.toChild$, attachData);\n  };\n  /**\n   *  Appends a ViewStream object to an existing dom element.\n   *  @param {dom} node the ViewStream child that is to be attached.\n   * @example\n   * //  returns\n   * <body>\n   *    <h2>Hello World</h2>\n   * </body>\n   *\n   * let viewStream = new ViewStream('h2', 'Hello World');\n   * viewStream.appendToDom(document.body);\n   *\n   */\n\n\n  _proto.appendToDom = function appendToDom(node) {\n    this.renderViewAndAttachToDom(node, 'dom', 'appendChild');\n  };\n  /**\n   * Prepends the current ViewStream object to an existing dom element.\n   * @param {dom} node the ViewStream child that is to be attached.\n   *\n   * @example\n   * this.prependToDom(document.body);\n   *\n   */\n\n\n  _proto.prependToDom = function prependToDom(node) {\n    this.renderViewAndAttachToDom(node, 'dom', 'prependChild');\n  };\n  /**\n   * This method appends a child ViewStream object. <br>After the attachment, rxjs observables are exchanged between the parent and child ViewStream objects.<br><br>\n   * @param {ViewStream} v the ViewStream child that is to be attached.\n   * @param {string} query a querySelector within this ViewStream.\n   *\n   * @example\n   * //  returns\n   * <body>\n   *    <main>\n   *        <h2>Hello World</h2>\n   *    </main>\n   * </body>\n   *\n   *\n   * let parentView = new ViewStream('main');\n   * parentView.appendToDom(document.body);\n   *\n   * let childView = new ViewStream({tagName:'h2', data:'Hello World'};\n   * parentView.appendView(childView)\n   *\n   * */\n\n\n  _proto.appendView = function appendView(v, query) {\n    this.exchangeViewsWithChild(v, this.setAttachData('appendChild', query));\n  };\n  /**\n   * This method appends a child ViewStream object to a parent ViewStream object.\n   * @param {ViewStream} v the ViewStream parent.\n   * @param {string} query a querySelector within this ViewStream.\n   * @param {level} this parameters can attach the viewStream's dom element up the dom tree while still maintaining the parent-child relationship of the ViewStream objects.\n   *\n   * @example\n   * //  returns\n   * <body>\n   *    <main>\n   *        <h2>Hello World</h2>\n   *    </main>\n   * </body>\n   *\n   *\n   * let parentView = new ViewStream('main');\n   * parentView.appendToDom(document.body);\n   *\n   * let childView = new ViewStream({tagName:'h2', data:'Hello World'};\n   * childView.appendToParent(parentView)\n   *\n   * */\n\n\n  _proto.appendViewToParent = function appendViewToParent(v, query, level) {\n    if (level === void 0) {\n      level = 1;\n    }\n\n    this.exchangeViewsWithChild(v, this.setAttachParentData('appendChild', query, level));\n  };\n  /**\n   * This method prepends a child ViewStream object to a parent ViewStream object.\n   * @param {ViewStream} v the ViewStream parent.\n   * @param {string} query a querySelector within this ViewStream.\n   * @param {number} level this parameter can attach the viewStream's dom element up the dom tree while still maintaining the parent-child relationship of the ViewStream objects.\n   *\n   * @example\n   * let parentView = new ViewStream('main');\n   * parentView.prependToDom(document.body);\n   *\n   * let childView = new ViewStream({tagName:'h2', data:'Hello World'};\n   * childView.prependViewToParent(parentView)\n   *\n   * */\n\n\n  _proto.prependViewToParent = function prependViewToParent(v, query, level) {\n    if (level === void 0) {\n      level = 1;\n    }\n\n    this.exchangeViewsWithChild(v, this.setAttachParentData('prependChild', query, level));\n  };\n  /**\n   *\n   *\n   * This method prepends a child ViewStream object to the current ViewStream object. <br>After the attachment, rxjs observables are exchanged between the parent and child ViewStream objects.<br><br>\n   * @param {ViewStream} v the ViewStream child that is to be attached.\n   * @param {string} query a querySelector within this ViewStream.\n   *\n   * @example\n   * //  returns\n   * <body>\n   *    <main>\n   *        <h2>Hello World</h2>\n   *    </main>\n   * </body>\n   *\n   * let parentView = new ViewStream('main');\n   * parentView.appendToDom(document.body);\n   *\n   * let childView = new ViewStream({tagName:'h2', data:'Hello World'};\n   * parentView.prependView(childView);\n   *\n   * */\n\n\n  _proto.prependView = function prependView(v, query) {\n    this.exchangeViewsWithChild(v, this.setAttachData('prependChild', query));\n  };\n\n  _proto.onRendered = function onRendered(payload) {\n    // console.log('RENDER: ', this.props.name, payload);\n    if (payload.from$ === 'internal') {\n      // this.props['el'] = payload.el.el;\n      this.postRender(); // this.broadcaster = new Spyne.ViewStreamBroadcaster(this.props, this.broadcastEvents);\n    }\n  };\n\n  _proto.postRender = function postRender() {\n    this.beforeAfterRender();\n    this.afterRender();\n    this.viewsStreamBroadcaster = new _view_stream_broadcaster__WEBPACK_IMPORTED_MODULE_7__[\"ViewStreamBroadcaster\"](this.props, this.broadcastEvents);\n  };\n\n  _proto.beforeAfterRender = function beforeAfterRender() {\n    this.props.el$ = new _dom_item_selectors__WEBPACK_IMPORTED_MODULE_10__[\"DomItemSelectors\"](this.props.el); // console.log('EL IS ', this.props.el$.elArr);\n    // window.theEl$ = this.props.el$;\n  }; // ================================= METHODS TO BE EXTENDED ==============================\n\n  /**\n   *\n   * This method is called once the ViewStream's domElement has been rendered and attached to the dom.\n   * <br>\n   * This method is empty and is meant to be overridden.\n   *\n   * */\n  // THIS IS AN EVENT HOLDER METHOD BECAUSE SENDING DOWNSTREAM REQUIRE THE PARENT TO HAVE A METHOD\n\n\n  _proto.downStream = function downStream() {};\n\n  _proto.afterRender = function afterRender() {};\n  /**\n   *\n   * Add any query within the ViewStream's dom and any dom events to automatically be observed by the UI Channel.\n   * <br>\n   * @example\n   *\n   *  broadcastEvents() {\n     *  // ADD BUTTON EVENTS AS NESTED ARRAYS\n     *  return [\n     *       ['#my-button', 'mouseover'],\n     *       ['#my-input', 'change']\n     *     ]\n     *   }\n   *\n   *\n   * */\n\n\n  _proto.broadcastEvents = function broadcastEvents() {\n    // ADD BUTTON EVENTS AS NESTED ARRAYS\n    return [];\n  };\n  /**\n   *\n   * Automatically connect to an instance of registered channels, such as 'DOM', 'UI', and 'ROUTE' channels.\n   *\n   *\n   * @example\n   *\n   * let uiChannel = this.getChannel('UI');\n   *\n   * uiChannel\n   *    .filter((p) => p.data.id==='#my-button')\n   *    .subscribe((p) => console.log('my button was clicked ', p));\n   *\n   * */\n\n\n  _proto.getChannel = function getChannel(channel) {\n    var _this9 = this;\n\n    var isValidChannel = function isValidChannel(c) {\n      return Object(_channels_channels_config__WEBPACK_IMPORTED_MODULE_6__[\"registeredStreamNames\"])().includes(c);\n    };\n\n    var error = function error(c) {\n      return console.warn(\"channel name \" + c + \" is not within \" + _channels_channels_config__WEBPACK_IMPORTED_MODULE_6__[\"registeredStreamNames\"]);\n    };\n\n    var startSubscribe = function startSubscribe(c) {\n      return window.Spyne.channels.getStream(c).observer.takeWhile(function (p) {\n        return _this9.deleted !== true;\n      });\n    }; // getGlobalParam('streamsController').getStream(c).observer;\n\n\n    var fn = R.ifElse(isValidChannel, startSubscribe, error);\n    return fn(channel);\n  };\n  /**\n   *\n   * Preferred method to connect to instances of registered channels, such as 'DOM', 'UI', and 'ROUTE' channels.\n   *\n   * Add Channel will automatically unsubscribe to the channel, whereas the getChannel method requires the developer to manually unsubscribe.\n   *\n   * @param {string} str The name of the registered Channel that was added to the Channels Controller.\n   * @param {boolean} bool false, add true if the View should wait for this channel to unsubscribe before removing itself.\n   * @param {sendDownStream} bool The direction where the stream is allowed to travel.\n   *\n   * @example\n   *\n   * let routeChannel = this.addChannel('ROUTE');\n   *\n   *      addActionListeners() {\n     *           return [\n     *             ['CHANNEL_ROUTE_CHANGE_EVENT', 'onMapRouteEvent']\n     *           ]\n     *       }\n   *\n   *       onMapRouteEvent(p) {\n     *          console.log('the route value is ', p);\n     *       }\n   *\n   *\n   * */\n\n\n  _proto.addChannel = function addChannel(str, sendDownStream, bool) {\n    var _this10 = this;\n\n    if (sendDownStream === void 0) {\n      sendDownStream = false;\n    }\n\n    if (bool === void 0) {\n      bool = false;\n    }\n\n    var directionArr = sendDownStream === true ? this.$dirs.CI : this.$dirs.I;\n\n    var mapDirection = function mapDirection(p) {\n      var p2 = R.defaultTo({}, R.clone(p));\n      var dirObj = {\n        $dir: directionArr\n      };\n      return Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_2__[\"deepMerge\"])(dirObj, p2); // Object.assign({$dir: directionArr}, R.clone(p))\n    };\n\n    var isLocalEventCheck = R.path(['srcElement', 'isLocalEvent']);\n    var cidCheck = R.path(['srcElement', 'cid']);\n\n    var cidMatches = function cidMatches(p) {\n      var cid = cidCheck(p);\n      var isLocalEvent = isLocalEventCheck(p);\n      var filterEvent = isLocalEvent !== true || cid === _this10.props.cid; //console.log(\"checks \",cid,this.props.cid, isLocalEvent,filterEvent);\n\n      return filterEvent;\n    };\n\n    var channel$ = this.getChannel(str).map(mapDirection).filter(cidMatches);\n    this.updateSourceSubscription(channel$, false);\n  };\n  /**\n   * Method to send data to any registered channel.\n   * @param {string} channelName The name of the registered Channel that was added to the Channels Controller.\n   * @param {string} action The event type that listeners can point to.\n   * @param {object} payload {}, The main data to send to the channel.\n   * @example\n   * let payload = {'location' : 'about'};\n   * let action = 'PAGE_CHANGE_EVENT';\n   * this.sendChannelPayload('ROUTE', paylaod, action);\n   *\n   * */\n\n\n  _proto.sendChannelPayload = function sendChannelPayload(channelName, payload, action) {\n    if (payload === void 0) {\n      payload = {};\n    }\n\n    if (action === void 0) {\n      action = \"VIEWSTREAM_EVENT\";\n    }\n\n    var data = {\n      payload: payload,\n      action: action\n    };\n    data['srcElement'] = {}; // R.pick(['cid','viewName'], data);\n\n    data.srcElement['cid'] = this.props.id;\n    data.srcElement['isLocalEvent'] = false;\n    data.srcElement['viewName'] = this.props.name;\n    var obs$ = Rx.Observable.of(data);\n    return new _channels_channels_payload__WEBPACK_IMPORTED_MODULE_8__[\"ChannelsPayload\"](channelName, obs$, data);\n  };\n\n  _proto.tracer = function tracer() {};\n\n  _proto.isLocalEvent = function isLocalEvent(channelStreamItem) {\n    var itemEl = R.path(['srcElement', 'el'], channelStreamItem);\n    return itemEl !== undefined && this.props.el.contains(channelStreamItem.srcElement.el);\n  }; //  =======================================================================================\n\n\n  _proto.addMixins = function addMixins() {\n    //  ==================================\n    // BASE CORE MIXINS\n    //  ==================================\n    var coreMixins = Object(_utils_mixins_base_core_mixins__WEBPACK_IMPORTED_MODULE_0__[\"baseCoreMixins\"])();\n    this.createId = coreMixins.createId;\n    this.createpropsMap = coreMixins.createpropsMap;\n    this.convertDomStringMapToObj = _utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__[\"convertDomStringMapToObj\"];\n    this.ifNilThenUpdate = _utils_frp_tools__WEBPACK_IMPORTED_MODULE_3__[\"ifNilThenUpdate\"]; // this.gc = gc.bind(this);\n    //  ==================================\n    // BASE STREAM MIXINS\n    //  ==================================\n\n    var streamMixins = Object(_utils_mixins_base_streams_mixins__WEBPACK_IMPORTED_MODULE_1__[\"baseStreamsMixins\"])();\n    this.sendUIPayload = streamMixins.sendUIPayload;\n    this.sendRoutePayload = streamMixins.sendRoutePayload;\n    this.createLifeStreamPayload = streamMixins.createLifeStreamPayload;\n  };\n\n  _createClass(ViewStream, [{\n    key: \"source$\",\n    get: function get() {\n      return this._source$;\n    }\n  }]);\n\n  return ViewStream;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/views/view-stream.js\n")},"./src/spyne/views/view-to-dom-mediator.js":
/*!*************************************************!*\
  !*** ./src/spyne/views/view-to-dom-mediator.js ***!
  \*************************************************/
/*! exports provided: ViewToDomMediator */function srcSpyneViewsViewToDomMediatorJs(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ViewToDomMediator\", function() { return ViewToDomMediator; });\n/* harmony import */ var _utils_mixins_base_core_mixins__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/mixins/base-core-mixins */ \"./src/spyne/utils/mixins/base-core-mixins.js\");\n/* harmony import */ var _dom_item__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom-item */ \"./src/spyne/views/dom-item.js\");\n/* harmony import */ var _utils_frp_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/frp-tools */ \"./src/spyne/utils/frp-tools.js\");\n/* harmony import */ var _utils_viewstream_animations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/viewstream-animations */ \"./src/spyne/utils/viewstream-animations.js\");\n/* harmony import */ var _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/viewstream-lifecycle-observables */ \"./src/spyne/utils/viewstream-lifecycle-observables.js\");\n/* harmony import */ var _utils_deep_merge__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/deep-merge */ \"./src/spyne/utils/deep-merge.js\");\n\n\n\n\n\n\n\nvar Rx = __webpack_require__(/*! rxjs */ \"rxjs\");\n\nvar R = __webpack_require__(/*! ramda */ \"ramda\");\n\nvar ViewToDomMediator =\n/*#__PURE__*/\nfunction () {\n  function ViewToDomMediator(sink$, viewProps, cid, vsName) {\n    var _this = this;\n\n    if (viewProps === void 0) {\n      viewProps = {};\n    }\n\n    if (cid === void 0) {\n      cid = '';\n    }\n\n    if (vsName === void 0) {\n      vsName = 'theName';\n    }\n\n    this.addMixins();\n    this._state = 'INIT';\n    this.cid = cid;\n    this.vsName = vsName;\n    this.defaults = {\n      debug: false,\n      extendedHashMethods: {}\n    };\n    this.options = Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_5__[\"deepMerge\"])(this.defaults, viewProps);\n\n    var createExtraStatesMethod = function createExtraStatesMethod(arr) {\n      var action = arr[0],\n          funcStr = arr[1];\n\n      _this.options.extendedHashMethods[action] = function (p) {\n        return _this[funcStr](p);\n      };\n    };\n\n    this.addActionListeners().forEach(createExtraStatesMethod);\n    this.options.hashMethods = this.setHashMethods(this.options.extendedHashMethods);\n    this.sink$ = sink$;\n    this.sink$.subscribe(this.onSinkSubscribe.bind(this));\n    this.$dirs = _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_4__[\"LifecyleObservables\"].createDirectionalFiltersObject();\n    this.addDefaultDir = _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_4__[\"LifecyleObservables\"].addDefaultDir;\n    this.sourceStreams = _utils_viewstream_lifecycle_observables__WEBPACK_IMPORTED_MODULE_4__[\"LifecyleObservables\"].createDirectionalObservables(new Rx.Subject(), this.vsName, this.cid);\n    this._source$ = this.sourceStreams.toInternal$; //  new Rx.Subject();\n  }\n\n  var _proto = ViewToDomMediator.prototype;\n\n  _proto.addActionListeners = function addActionListeners() {\n    return [];\n  };\n\n  _proto.setHashMethods = function setHashMethods(extendedHashMethodsObj) {\n    var _this2 = this;\n\n    if (extendedHashMethodsObj === void 0) {\n      extendedHashMethodsObj = {};\n    }\n\n    var defaultHashMethods = {\n      'GARBAGE_COLLECT': function GARBAGE_COLLECT(p) {\n        return _this2.onGarbageCollect(p);\n      },\n      'READY_FOR_GC': function READY_FOR_GC(p) {\n        return _this2.onReadyForGC(p);\n      },\n      'DISPOSE': function DISPOSE(p) {\n        return _this2.onDispose(p);\n      },\n      'RENDER': function RENDER(p) {\n        return _this2.onRender(p);\n      },\n      'RENDER_AND_ATTACH_TO_PARENT': function RENDER_AND_ATTACH_TO_PARENT(p) {\n        return _this2.onRenderAndAttachToParent(p);\n      },\n      'RENDER_AND_ATTACH_TO_DOM': function RENDER_AND_ATTACH_TO_DOM(p) {\n        return _this2.onRenderAndAttachToDom(p);\n      },\n      'ATTACH_CHILD_TO_SELF': function ATTACH_CHILD_TO_SELF(p) {\n        return _this2.onAttachChildToSelf(p);\n      }\n    };\n    return Object(_utils_deep_merge__WEBPACK_IMPORTED_MODULE_5__[\"deepMerge\"])(defaultHashMethods, extendedHashMethodsObj);\n  };\n\n  _proto.createDomItem = function createDomItem() {\n    this.props = this.props !== undefined ? this.props : {};\n\n    var removeIsNil = function removeIsNil(val) {\n      return val !== undefined;\n    };\n\n    var attrs = R.filter(removeIsNil, R.pick(['id', 'className'], this.props));\n    return new _dom_item__WEBPACK_IMPORTED_MODULE_1__[\"DomItem\"](this.props.tagName, attrs, this.props.data, this.props.template);\n  };\n\n  _proto.onDisposeCompleted = function onDisposeCompleted(d) {// console.log('bv self disposed after animateOut ', d, this);\n  };\n\n  _proto.animateInTween = function animateInTween(el, time) {\n    Object(_utils_viewstream_animations__WEBPACK_IMPORTED_MODULE_3__[\"fadein\"])(el, time);\n  };\n\n  _proto.animateOutTween = function animateOutTween(el, time, callback) {\n    // console.log('anim out ', {el, time, callback});\n    Object(_utils_viewstream_animations__WEBPACK_IMPORTED_MODULE_3__[\"fadeout\"])(el, time, callback);\n  };\n\n  _proto.setAnimateIn = function setAnimateIn(d) {\n    if (d.animateIn === true) {\n      var el = d.el !== undefined ? d.el : this.domItem.el;\n      this.animateInTween(el, d.animateOutTime);\n    }\n  };\n\n  _proto.disposeMethodOld = function disposeMethodOld(d) {\n    var _this3 = this;\n\n    var animateOut = function animateOut(d, callback) {\n      var el = d.el.el !== undefined ? d.el.el : d.el; // DOM ITEMS HAVE THEIR EL ITEMS NESTED\n\n      _this3.animateOutTween(el, d.animateOutTime, callback);\n    };\n\n    var fadeOutObs = Rx.Observable.bindCallback(animateOut);\n\n    var onFadeoutCompleted = function onFadeoutCompleted(e) {\n      // console.log('fade out completed ', e, d);\n      _this3._source$.next({\n        action: 'READY_FOR_GC',\n        $dir: _this3.$dirs.I\n      });\n    };\n\n    var onFadeoutObs = function onFadeoutObs(d) {\n      fadeOutObs(d).subscribe(onFadeoutCompleted);\n      return {\n        action: 'DISPOSING',\n        $dir: _this3.$dirs.CI\n      };\n    };\n\n    var onEmptyObs = function onEmptyObs() {\n      return {\n        action: 'DISPOSE_AND_READY_FOR_GC',\n        $dir: _this3.$dirs.PCI\n      };\n    };\n\n    var fn = d.animateOut === true ? onFadeoutObs : onEmptyObs;\n    return fn(d);\n  };\n\n  _proto.disposeMethod = function disposeMethod(d) {\n    var _this4 = this;\n\n    var onFadeoutObs = function onFadeoutObs() {\n      var el = d.el.el !== undefined ? d.el.el : d.el; // DOM ITEMS HAVE THEIR EL ITEMS NESTED\n\n      var gcData = {\n        action: 'READY_FOR_GC',\n        $dir: _this4.$dirs.PI,\n        el: el\n      };\n      d.el$.setClass(d.animateOutClass); // console.log('DISPOSE FADE OUT ', el, this.$dirs, d.animateOutClass);\n\n      var subscriber = function subscriber() {\n        // console.log('MEDIATOR FADEOUT COMPLETE ', this.cid, gcData, this.animateOutClass, d);\n        _this4._source$.next(gcData);\n      };\n\n      Rx.Observable.fromEvent(el, 'transitionend').filter(function (e) {\n        return e.target === el;\n      }).take(1).subscribe(subscriber);\n    };\n\n    var onEmptyObs = function onEmptyObs() {\n      return {\n        action: 'DISPOSE_AND_READY_FOR_GC',\n        $dir: _this4.$dirs.CI\n      };\n    };\n\n    if (d.animateOutClass !== undefined) {\n      onFadeoutObs();\n      return {\n        action: 'DISPOSING',\n        $dir: this.$dirs.CI\n      };\n    } else {\n      return onEmptyObs();\n    }\n  };\n\n  _proto.onDispose = function onDispose(d) {\n    return this.disposeMethod(d);\n  };\n\n  _proto.removeStream = function removeStream() {\n    // this.sourceStreams.completeAll();\n    if (this.sourceStreams !== undefined) {\n      this.sourceStreams.completeStream(['internal', 'child']);\n    } // this._source$.complete();\n    // this._source$.isStopped = true;\n\n  };\n\n  _proto.onGarbageCollect9 = function onGarbageCollect9(p) {\n    // console.log('MEDIATOR onGarbageCollect ', this.cid, this.vsName, p);\n    var t = this.vsName === 'PageChildBox' ? 1000 : 0;\n    window.setTimeout(this.onGarbageCollectRun.bind(this), t);\n  };\n\n  _proto.onReadyForGC = function onReadyForGC(p) {\n    this.removeStream();\n  };\n\n  _proto.onGarbageCollect = function onGarbageCollect(p) {\n    // console.log('MEDIATOR onGarbageCollect ', this.cid, this.vsName, p);\n    this.domItem.unmount();\n\n    if (this.sourceStreams !== undefined) {\n      this.sourceStreams.completeStream(['parent']);\n    }\n\n    delete this;\n  };\n\n  _proto.getSourceStream = function getSourceStream() {\n    return this._source$;\n  };\n\n  _proto.combineDomItems = function combineDomItems(d) {\n    var container = R.isNil(d.query) ? d.node : d.query;\n\n    var prepend = function prepend(node, item) {\n      return node.insertBefore(item, node.firstChild);\n    };\n\n    var append = function append(node, item) {\n      return node.appendChild(item);\n    }; // DETERMINE WHETHER TO USE APPEND OR PREPEND\n    // ON CONNECTING DOM ITEMS TO EACH OTHER\n    // this.domItemEl = this.domItem.render();\n\n\n    var attachFunc = d.attachType === 'appendChild' ? append : prepend; // d.node = R.isNil(d.query) ? d.node : d.query;\n\n    attachFunc(container, this.domItem.render());\n    this.setAnimateIn(d);\n  };\n\n  _proto.onAttachChildToSelf = function onAttachChildToSelf(p) {\n    var data = p.childRenderData;\n    this.combineDomItems(data);\n    return {\n      action: 'CHILD_ATTACHED',\n      $dir: this.$dirs.PI\n    };\n  };\n\n  _proto.onRenderAndAttachToParent = function onRenderAndAttachToParent(d) {\n    this.onRender(d);\n    this.combineDomItems(d);\n    return {\n      action: 'RENDERED_AND_ATTACHED_TO_PARENT',\n      el: this.domItem.el,\n      $dir: this.$dirs.PI\n    };\n  };\n\n  _proto.renderDomItem = function renderDomItem(d) {\n    this.domItem = new (Function.prototype.bind.apply(_dom_item__WEBPACK_IMPORTED_MODULE_1__[\"DomItem\"], [null].concat(d)))();\n    return this.domItem;\n  };\n\n  _proto.onRender = function onRender(d) {\n    var _this5 = this;\n\n    var getEl = function getEl(data) {\n      return _this5.renderDomItem(data);\n    };\n\n    var el = getEl(R.props(['tagName', 'domAttributes', 'data', 'template'], d));\n    return {\n      action: 'RENDERED',\n      el: el,\n      $dir: this.$dirs.I\n    };\n  };\n\n  _proto.extendedMethods = function extendedMethods(data) {};\n\n  _proto.onRenderAndAttachToDom = function onRenderAndAttachToDom(d) {\n    var _this6 = this;\n\n    var getEl = function getEl(data) {\n      return _this6.renderDomItem(data);\n    }; // let getEl = (data) => new DomItem(...data);\n\n\n    d.attachData['el'] = getEl(R.props(['tagName', 'domAttributes', 'data', 'template'], d));\n    this.combineDomItems(d.attachData);\n    return {\n      action: 'RENDERED_AND_ATTACHED_TO_DOM',\n      el: d.attachData['el'].el,\n      $dir: this.$dirs.CI\n    };\n  };\n\n  _proto.onSinkSubscribe = function onSinkSubscribe(payload) {\n    var _this7 = this;\n\n    var action = payload.action;\n    var defaultToFn = R.defaultTo(function (data) {\n      return _this7.extendedMethods(data);\n    });\n    var fn = defaultToFn(this.options.hashMethods[action]); // console.log('MEDIATOR onSinkSubscribe before ', this.cid, action, payload);\n\n    var data = fn(payload); // data = this.addDefaultDir(data);\n    // console.log('add default dir ', data);\n\n    var sendData = function sendData(d) {\n      return _this7._source$.next(d);\n    };\n\n    if (data !== undefined) {\n      // console.log('MEDIATOR onSinkSubscribe ', this.cid, data, payload);\n      sendData(Object.freeze(data));\n    }\n  };\n\n  _proto.addMixins = function addMixins() {\n    //  ==================================\n    // BASE CORE MIXINS\n    //  ==================================\n    var coreMixins = Object(_utils_mixins_base_core_mixins__WEBPACK_IMPORTED_MODULE_0__[\"baseCoreMixins\"])();\n    this.createId = coreMixins.createId;\n    this.createpropsMap = coreMixins.createpropsMap;\n    this.convertDomStringMapToObj = _utils_frp_tools__WEBPACK_IMPORTED_MODULE_2__[\"convertDomStringMapToObj\"];\n    this.ifNilThenUpdate = _utils_frp_tools__WEBPACK_IMPORTED_MODULE_2__[\"ifNilThenUpdate\"];\n  };\n\n  return ViewToDomMediator;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spyne/views/view-to-dom-mediator.js\n")},ramda:
/*!**********************************************************************************!*\
  !*** external {"commonjs":"ramda","commonjs2":"ramda","amd":"ramda","root":"R"} ***!
  \**********************************************************************************/
/*! no static exports found */function ramda(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE_ramda__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS9leHRlcm5hbCB7XCJjb21tb25qc1wiOlwicmFtZGFcIixcImNvbW1vbmpzMlwiOlwicmFtZGFcIixcImFtZFwiOlwicmFtZGFcIixcInJvb3RcIjpcIlJcIn0/YmRhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiJyYW1kYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yYW1kYV9fOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///ramda\n")},rxjs:
/*!********************************************************************************!*\
  !*** external {"commonjs":"rxjs","commonjs2":"rxjs","amd":"rxjs","root":"Rx"} ***!
  \********************************************************************************/
/*! no static exports found */function rxjs(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE_rxjs__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcHluZS9leHRlcm5hbCB7XCJjb21tb25qc1wiOlwicnhqc1wiLFwiY29tbW9uanMyXCI6XCJyeGpzXCIsXCJhbWRcIjpcInJ4anNcIixcInJvb3RcIjpcIlJ4XCJ9PzU5MDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoicnhqcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yeGpzX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///rxjs\n")}})},module.exports=factory(__webpack_require__(330),__webpack_require__(628))},329:function(Q,F,n){"use strict";n.r(F);n(8),n(11);var B=n(29);var U=function(Q){var F,B;function U(F){return void 0===F&&(F={}),F.tagName="article",F.class="photogs-view",F.template=n(331),Q.call(this,F)||this}B=Q,(F=U).prototype=Object.create(B.prototype),F.prototype.constructor=F,F.__proto__=B;var s=U.prototype;return s.addActionListeners=function(){return[]},s.broadcastEvents=function(){return[]},s.afterRender=function(){},U}(B.ViewStream);var s=n(8),t=function(Q){var F,n;function B(F){return void 0===F&&(F={}),F.tagName="section",F.class="page-content",F.id="photogs-container",Q.call(this,F)||this}n=Q,(F=B).prototype=Object.create(n.prototype),F.prototype.constructor=F,F.__proto__=n;var t=B.prototype;return t.addActionListeners=function(){return[]},t.broadcastEvents=function(){return[]},t.loadImages=function(Q){var F=this;this.props.data=s.prop("channelPayload",Q),console.log("photog data ",Q,this.props.data);var n,B;this.userData=this.props.data.map(function(Q){return Q.user}),this.userData=(n=this.userData,B="id",n.filter(function(Q,F,n){return n.map(function(Q){return Q[B]}).indexOf(Q[B])===F})),this.userData.forEach(function(Q){F.appendView(new U({data:Q}))})},t.afterRender=function(){this.getChannel("ChannelData500px").take(1).subscribe(this.loadImages.bind(this))},B}(B.ViewStream),e=n(327);n(333);var i=function(Q){var F,B;function U(F){return void 0===F&&(F={}),F.tagName="article",F.template=n(332),Q.call(this,F)||this}B=Q,(F=U).prototype=Object.create(B.prototype),F.prototype.constructor=F,F.__proto__=B;var s=U.prototype;return s.addActionListeners=function(){return[["CHANNEL_ROUTE_CHANGE_EVENT","onRouteChangeEvent"]]},s.broadcastEvents=function(){return[["article dl","click"]]},s.onRouteChangeEvent=function(Q){},s.onAnimate=function(Q){var F=this;this.props.el$.addClass("expand");var n=this.props.el.offsetTop+45,B=document.querySelector("html"),U=window.pageYOffset;!function(){F.hideOverflow(!0),window.pageYOffset=0;var Q="top:"+-1*U+"px;";B.style.cssText=Q,console.log({elHtml:B,styleStr:Q,topNum:n})}(),e.TweenMax.to(B,.3,{top:-1*n,ease:Sine.easeInOut})},s.hideOverflow=function(Q){void 0===Q&&(Q=!0),document.querySelector("html").classList.toggle("expand",Q)},s.afterRender=function(){var Q=this;!function(){var F=Q.props.el$.query("img").el;Q.hideOverflow(!1);F.onload=function(n){void 0!==Q&&void 0!==Q.props?(F.classList.add("reveal"),Q.props.el$.query("aside").el.remove(),F.onload=function(){},F=void 0):(F.onload=function(){},F=void 0)}}(),Q.addChannel("ROUTE")},U}(B.ViewStream);var a=function(Q){var F,n;function B(F){return void 0===F&&(F={}),F.tagName="section",F.class="page-content",F.id="images-container",Q.call(this,F)||this}n=Q,(F=B).prototype=Object.create(n.prototype),F.prototype.constructor=F,F.__proto__=n;var U=B.prototype;return U.addActionListeners=function(){return[]},U.broadcastEvents=function(){return[]},U.loadImages=function(Q){var F=this;this.photosData=Q.channelPayload;this.photosData.forEach(function(Q,n){Q.indexNum=n+1,F.appendView(new i({data:Q}))})},U.afterRender2=function(){},U.afterRender=function(){this.getChannel("ChannelData500px").take(1).subscribe(this.loadImages.bind(this))},B}(B.ViewStream);var l=function(Q){var F,B;function U(F){return void 0===F&&(F={}),F.tagName="section",F.class="empty",F.template=n(334),Q.call(this,F)||this}B=Q,(F=U).prototype=Object.create(B.prototype),F.prototype.constructor=F,F.__proto__=B;var s=U.prototype;return s.addActionListeners=function(){return[]},s.broadcastEvents=function(){return[]},s.afterRender=function(){},U}(B.ViewStream);var I=function(Q){var F,n;function B(F){var n;return void 0===F&&(F={}),F.class="page-view",F.pageId=F.routeInfo.keywords.pageId,(n=Q.call(this,F)||this).disposeReady=!1,n}n=Q,(F=B).prototype=Object.create(n.prototype),F.prototype.constructor=F,F.__proto__=n;var U=B.prototype;return U.getPageType=function(Q){return{home:l,gallery:a,photographers:t}[Q]||l},U.addActionListeners=function(){return[["CHANNEL_ROUTE_CHANGE_EVENT","onRouteChangeEvent"]]},U.broadcastEvents=function(){return[]},U.onRouteChangeEvent=function(Q){var F=R.path(["channelPayload","keywords","pageId"],Q),n=this.props.pageId===F;!1===n&&(console.log("dispose is ready",Q,{routePageId:F,isNotCurrentPageId:n}),this.onDispose()),this.disposeReady=!0},U.getLocationVal=function(){var Q=window.location.pathname;if(Q.length>1){Q=Q.replace(/^\//g,"")}return Q},U.afterRender=function(){console.log("page view route info ",this.props.routeInfo);this.props.routeInfo.keywords.pageId;var Q=this.getPageType(this.props.pageId);this.appendView(new Q),this.addChannel("ROUTE")},B}(B.ViewStream);n(8);var c=function(Q){var F,n;function B(F){return void 0===F&&(F={}),F.id="pages-holder",F.class="stage",Q.call(this,F)||this}n=Q,(F=B).prototype=Object.create(n.prototype),F.prototype.constructor=F,F.__proto__=n;var U=B.prototype;return U.addActionListeners=function(){return[["CHANNEL_ROUTE.*","onRouteChangeEvent"],["CHANNEL_UI.*","onUIEvent"],["CHANNEL_WINDOW.*","onDomChannel"]]},U.broadcastEvents=function(){return[]},U.onUIEvent=function(Q){this.isLocalEvent(Q)?console.log("LCOAL EVENT ",Q):console.log("GLOBAL EVENT ",Q)},U.onDomChannel=function(Q){console.log("CHANNEL WINDOW ",this.isLocalEvent(Q))},U.onRouteDeepLink=function(Q){console.log("route deep link ",Q,this.isLocalEvent(Q))},U.onRouteChangeEvent=function(Q){var F=Q.channelPayload;console.log("route info ",F);F.pageId;this.appendView(new I({routeInfo:F}))},U.afterRender=function(){this.addChannel("ROUTE"),this.addChannel("UI"),this.addChannel("WINDOW")},B}(B.ViewStream);n(8);var d=function(Q){var F,B;function U(F){return void 0===F&&(F={}),F.tagName="section",F.id="menu",F.template=n(629),Q.call(this,F)||this}B=Q,(F=U).prototype=Object.create(B.prototype),F.prototype.constructor=F,F.__proto__=B;var s=U.prototype;return s.addActionListeners=function(){return[["SCROLL_EVENT","onScrollEvent"]]},s.broadcastEvents=function(){return[]},s.onScrollEvent=function(Q){console.log("scroll event is ",Q);var F=Q.scrollY>=45;this.props.el.classList.toggle("hide",F)},s.afterRender=function(){},U}(B.ViewStream);var C=function(Q){var F,n;function B(F){return void 0===F&&(F={}),Q.call(this,F)||this}n=Q,(F=B).prototype=Object.create(n.prototype),F.prototype.constructor=F,F.__proto__=n;var U=B.prototype;return U.addActionListeners=function(){return[]},U.broadcastEvents=function(){return[[".nav-btn","click"],[".nav-btn-ui","click"]]},U.testSendPayload=function(){},U.afterRender=function(){this.appendView(new d),this.appendView(new c),this.testSendPayload(),this.getChannel("WINDOW").subscribe(function(Q){console.log("window event  ",Q.action,Q)}),this.getChannel("ChannelData500px").subscribe(function(Q){console.log("data ",Q)})},B}(B.ViewStream),b=n(927),o=n(328);console.log("loaded"),n(632).polyfill();n(934);var r={channels:{WINDOW:{mediqQueries:{test:"screen and (max-width:500px)",newTest:"screen and (max-width:800px)"}},ROUTE:{type:"slash",isHash:!1,isHidden:!1,routes:{route:{keyword:"pageId",home:"",images:{route:{keyword:"imageNum",route:{keyword:"author"}}},photographers:{route:{keyword:"photogNum"}},"page-.*":{route:{keyword:"randomNum"}}}}}}};window.onStartApp=function(){console.log("polys are loaded");var Q={dataUrl:"https://api.500px.com/v1/photos/search?term=10&exclude=people&consumer_key=XbScUOttPINmCIoKkeXhRmdBWCM5Nqf0LNZ9Siiv&image_size=5",name:"ChannelData500px",map:function(Q){return Q.photos=B.map(function(Q){return Q.description=null===Q.description?Q.name:Q.description,Q.perpsectiveNum=String(Q.height/Q.width*100+"%"),Q},Q.photos),Q.photos}};new b.a(r).registerDataChannel(new o.a(Q));new C({el:document.getElementById("example-app")});var F=n(11),B=n(8);window.R=B,window.Rx=F};!function Q(){!0===window.polysAreLoaded?onStartApp():window.setTimeout(Q,100)}()},331:function(Q,F){Q.exports='<dl>\n    <dt>\n        <img src="{{userpic_url}}" />\n        <span>{{username}}</span>\n    </dt>\n    <dd>\n        <header>\n\n            <h3>{{fullname}}</h3>\n        </header>\n\n\n    </dd>\n\n</dd>\n'},332:function(Q,F){Q.exports='\n\n<dl data-channel="ROUTE" data-route-val="page-one/{{indexNum}}" data-page-id="page-one" data-image-num ={{indexNum}} data-name="{{name}}" data-description="{{description}}">\n    <dt class="card-header image" style=\'padding-bottom:{{perpsectiveNum}};\'>\n        <aside class=\'spinner\'></aside>\n        <img src="{{image_url}}" width="{{width}}" height="auto" />\n        <span>{{name}}</span>\n    </dt>\n    <dd class="card-content image">\n        <p>{{description}}</p>\n    </dd>\n</dl>\n'},334:function(Q,F){Q.exports="<article>\n    <h3>Example App Homepage</h3>\n</article>\n"},629:function(Q,F){Q.exports='<header id="navbar">\n\n    <h4 data-channel="ROUTE"  data-page-id="home" class="nav-btn home-btn">App</h4>\n    <h6 data-channel="ROUTE"  data-page-id="gallery" class="nav-btn page-btn">gallery</h6>\n    <h6 data-channel="ROUTE"  data-page-id="photographers" class="nav-btn page-btn">photographers</h6>\n    <h6 data-channel="UI" data-route-val="/ui" data-page-id="test-ui" class="nav-btn page-btn">TEST UI</h6>\n    <h6 data-channel="UI" data-route-val="/ui-btn" data-page-id="ui-btn" class="nav-btn-ui page-btn">UI Btn</h6>\n\n</header>\n'},934:function(Q,F){}});