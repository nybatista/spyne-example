!function(t){function e(e){for(var r,a,s=e[0],c=e[1],u=e[2],l=0,p=[];l<s.length;l++)a=s[l],o[a]&&p.push(o[a][0]),o[a]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(t[r]=c[r]);for(d&&d(e);p.length;)p.shift()();return i.push.apply(i,u||[]),n()}function n(){for(var t,e=0;e<i.length;e++){for(var n=i[e],r=!0,s=1;s<n.length;s++){var c=n[s];0!==o[c]&&(r=!1)}r&&(i.splice(e--,1),t=a(a.s=n[0]))}return t}var r={},o={0:0},i=[];function a(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=t,a.c=r,a.d=function(t,e,n){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)a.d(n,r,function(e){return t[e]}.bind(null,r));return n},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var u=0;u<s.length;u++)e(s[u]);var d=c;i.push([365,1]),n()}({358:function(t,e){t.exports='<div id="pwd">\n    <div id="error-msg"><p>The password is incorrect. Please try again.</p></div>\n\n    <form>\n\n        <div class="form-group">\n            <input data-channel="UI" type="password" class="form-control" autocomplete="off" id="password-dw" placeholder="Password">\n        </div>\n\n        <button  data-channel="UI" id="submit" type="submit" class="btn btn-primary">Submit</button>\n    </form>\n\n</div>\n\n'},359:function(t,e){t.exports='<header id="navbar">\n\n    <h4  class="nav-btn home-btn">Audio Scroll Test</h4>\n\x3c!--    <h4 data-channel="ROUTE"  data-page-id="home" class="nav-btn home-btn">App</h4>\n    <h6 data-channel="ROUTE"  data-page-id="gallery" class="nav-btn page-btn">gallery</h6>\n    <h6 data-channel="ROUTE"  data-page-id="photographers" class="nav-btn page-btn">photographers</h6>\n    <h6 data-channel="UI" data-route-val="/ui" data-page-id="test-ui" class="nav-btn page-btn">TEST UI</h6>\n    <h6 data-channel="UI" data-route-val="/ui-btn" data-page-id="ui-btn" class="nav-btn-ui page-btn">UI Btn</h6>\n\n</header>--\x3e\n'},360:function(t,e){t.exports='<article class="test">\n    <h3>Example App Homepage 07/15/18 02:12am</h3>\n    <button id="testbtn">CLICK BTN</button>\n</article>\n'},362:function(t,e){t.exports='\n\n<dl data-channel="ROUTE" data-route-val="page-one/{{indexNum}}" data-page-id="page-one" data-image-num ={{indexNum}} data-name="{{name}}" data-description="{{description}}">\n    <dd class="card-content image">\n        <h4>{{description}}</h4>\n    </dd>\n    <dt class="card-header image" style=\'padding-bottom:{{perpsectiveNum}};\'>\n        <aside class=\'spinner\'></aside>\n        <img src="{{image_url}}" width="{{width}}" height="auto" />\n        <span>{{name}}</span>\n    </dt>\n\n</dl>\n'},363:function(t,e){t.exports='<dl data-channel="ROUTE" data-page-id="photographers" data-photog-num="3">\n    <dt>\n        <img src="{{userpic_url}}" />\n        <span>{{username}}</span>\n    </dt>\n    <dd>\n        <header>\n\n            <h3>{{name}}</h3>\n        </header>\n\n\n    </dd>\n\n</dd>\n'},364:function(t,e){t.exports='<audio controls>\n    <source src="http://assetscontainer.com/temp/autoscroll/audioscroll_mixdown.mp3" type="audio/mpeg">\n\n</audio>\n'},365:function(t,e,n){"use strict";function r(){return{createpropsMap:function(){var t=new WeakMap,e={cid:this.props.cid};return t.set(e,this.props),{key:e,weakMap:t}},gc:function(){for(var t in this)delete this[t]},createId:function(){return"cid-"+Math.floor(1e7*Math.random(1e7))},setTraceFunc:function(t){return!0===t?console.log:function(){}}}}n.r(e);var o=n(19),i=function(t){if(void 0!==t.constructor.name)return t.constructor.name;var e=t.toString();return o.defaultTo(String(e).substr(0,12),o.match(/^(function\s)(\w+)(\(.*)$/,e)[2])},a=function(t){var e={};for(var n in t)e[n]=t[n];return e},s=function t(e){return{map:function(n){return t(n(e))},fold:function(t,n){return n(e)},inspect:function(){return"right("+e+")"}}},c=function(t,e){return o.isNil(t)?e:t},u=function t(e){return{map:function(n){return t(e)},fold:function(t,n){return t(e)},inspect:function(){return"left("+e+")"}}},d=n(19),l=n(2),p=n(2),h=function(){return{includes:function(){return void 0!==window.Spyne?function(t){var e=[];return o.forEach(function(t,n,r){return e.push(n)},t),e}(window.Spyne.channels.map):["ROUTE","UI","WINDOW","DISPATCHER"]}}},f=["LOAD","RENDER","MOUNT","UNMOUNT","DISPOSE","GARBAGE_COLLECT","UPDATE"],E=["parent","self","child","children","view"],m=["Observable","BehaviorSubject","Subject","Observer","Subscriber","FromEventObservable"],v=["subscribe","combineLatest"],N=[],_=[],g=[],A=[],b=[],y=[];if(void 0!==d&&void 0!==l){N=[{error:"need to match a valid name within "+m,predicate:function(t){return h().includes(t.name)}},{error:"param 'observable' must contain a valid Observable",predicate:function(t){return function(t){return void 0!==t.subscribe}(t.observable)}},{error:"param action must be a registered action",predicate:function(t){return v.includes(t.action)}}],_=[{error:"needs cid number in srcElement",predicate:d.compose(d.is(String),d.path(["data","srcElement","cid"]))},{error:"needs a viewName in srcElement",predicate:d.compose(d.is(String),d.path(["data","srcElement","viewName"]))}],g=function(){return[].concat(N).concat(_)};var S=[{error:"need to match a valid name within "+m,predicate:function(t){return h().includes(t.name)}},{error:"needs one of the following step strings: "+f,predicate:function(t){return f.includes(t.STEP)}},{error:"type needs to one of the following: "+E,predicate:function(t){return E.includes(t.type)}},{error:"viewId needs to be added ",predicate:function(t){return void 0!==t.viewId}}];A=function(){return[].concat(S)},b=function(){return[{error:"DISPOSE STEP requires a disposeItem param in the data object",predicate:function(t){return"DISPOSE"===t.STEP&&void 0!==t.data.disposeItems}}].concat(S)},y=function(){var t=[{error:"UPDATE STEP requires a data object ",predicate:function(t){return"UPDATE"===t.STEP&&void 0!==t.data}}];return t.concat(S)},function(){return S.concat(N).concat(_)},function(){return[].concat(N).concat(_)},function(){var t=[{error:"param 'name' must be of a registered type",predicate:function(t){return h().includes(t.name)}},{error:"param 'observable' must contain a valid Observable",predicate:function(t){return m.includes(function(t){return t().constructor.name}(t.observable))}},{error:"param action must be a registered action",predicate:function(t){return v.includes(t.action)}}];return{streams:[{init:{name:"DISPATCHER",observable:function(){return new p},action:"subscribe"},structure:{type:String,observable:l||p,action:String},validations:t},{init:{name:"UBU",observable:function(){return new p},action:"subscribe"},structure:{type:String,observable:l||p,action:String},validations:t}]}}}var C=n(119),T=n.n(C),O=n(19),w=T.a.Success,I=T.a.Failure,D=function(){};void 0!==O&&(D=O.curry(function(t,e){var n=w(O.curryN(O.length(t),O.always(e)));return O.reduce(function(t,n){return t.ap(n.predicate(e)?w(e):I([n.error]))},n,t)}));var L=n(19);function R(){var t=this;setTimeout(function(){L.forEach(function(t){},t)},1)}n(19);var P=function(){function t(t,e,n,r,o){void 0===r&&(r="subscribe"),void 0===o&&(o=!1),this.addMixins(),this.options={name:t,observable:e,data:n,action:r},this.getValidationChecks(t)}var e=t.prototype;return e.getValidationChecks=function(t){var e=this,n=window.Spyne.channels.map;return!0===n.has(t)?function(t){return e.onRunValidations(t)}(g):function(t){return console.warn(t)}("payload Needs a Valid Stream Name!")},e.onRunValidations=function(t){D(t(),this.options).fold(this.onError.bind(this),this.onSuccess.bind(this))},e.onPayloadValidated=function(t){this.sendToDirectorStream(t)},e.sendToDirectorStream=function(t){window.Spyne.channels.getStream("DISPATCHER").next(t),this.gc()},e.onError=function(t){console.warn("payload failed due to:\n"+t.map(function(t){return"* "+t}).join("\n")),this.gc()},e.onSuccess=function(t){this.onPayloadValidated(t)},e.addMixins=function(){this.gc=R},t}();function V(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H=function(){function t(t,e,n,r,o,i){void 0===o&&(o={}),void 0===i&&(i=!0),this.addMixins(),this.options={name:t,STEP:e,type:n,viewId:r,data:o},this.getValidationChecks(e)}var e=t.prototype;return e.getValidationChecks=function(t){var e=this;return function(t,e,n){void 0===n&&(n=null);var r=t[e];return r?s(r):u(n)}({LOAD:A,RENDER:A,MOUNT:A,DISPOSE:b,UNMOUNT:A,GARBAGE_COLLECT:A,UPDATE:y},t,"lifestream payload Needs a Valid Stream Name!").fold(function(t){return console.warn(t)},function(t){return e.onRunValidations(t)})},e.onRunValidations=function(t){D(t(),this.options).fold(this.onError.bind(this),this.onSuccess.bind(this))},e.onPayloadValidated=function(t){return this._data=t,t},e.onError=function(t){console.error("payload failed due to:\n"+t.map(function(t){return"* "+t}).join("\n")),this.gc()},e.onSuccess=function(t){this.onPayloadValidated(t)},e.addMixins=function(){this.gc=R},function(t,e,n){e&&V(t.prototype,e),n&&V(t,n)}(t,[{key:"data",get:function(){return this._data}}]),t}(),M=n(5),W=n(19);function k(){return{testFunc:function(t){console.log("stream mixin is ",t)},sendRoutePayload:function(t,e){return new P("ROUTE",t,e,"subscribe")},sendUIPayload:function(t,e){return new P("UI",t,e,"subscribe")},sendChannelPayload:function(t,e){var n=this,r=function(t){return W.prop(t,n.props)},o={payload:e,channel:t,srcElement:{cid:r("cid"),el:r("el"),viewName:r("name")}};return new P(t,new M.a.of(""),o,"subscribe")},sendLifeStreamPayload:function(t,e){return new P("LIFESTREAM",t,e,"subscribe")},createLifeStreamPayload:function(t,e,n){void 0===e&&(e={}),void 0===n&&(n="parent");var r=this.props.name+": "+this.props.cid;return new H("LIFESTREAM",t,n,r,e).data}}}function U(t){return t&&"object"==typeof t&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function $(t,e){return e&&!0===e.clone&&U(t)?F(function(t){return Array.isArray(t)?[]:{}}(t),t,e):t}function x(t,e,n){var r=t.slice();return e.forEach(function(e,o){void 0===r[o]?r[o]=$(e,n):U(e)?r[o]=F(t[o],e,n):-1===t.indexOf(e)&&r.push($(e,n))}),r}function F(t,e,n){var r=Array.isArray(e),o=(n||{arrayMerge:x}).arrayMerge||x;return r?Array.isArray(t)?o(t,e,n):$(e,n):function(t,e,n){var r={};return U(t)&&Object.keys(t).forEach(function(e){r[e]=$(t[e],n)}),Object.keys(e).forEach(function(o){U(e[o])&&t[o]?r[o]=F(t[o],e[o],n):r[o]=$(e[o],n)}),r}(t,e,n)}F.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce(function(t,n){return F(t,n,e)})};var j=n(19),G=function(){function t(e,n){var r=this;this.template=this.formatTemplate(e),this.templateData=n;var o=t.getStringArray(this.template),i=this.template.match(t.findTmplLoopsRE());i=null===i?[]:i;var a=j.contains(j.__,i),s=j.ifElse(a,function(e,n){return e.replace(t.parseTmplLoopsRE(),r.parseTheTmplLoop.bind(r))},this.addParams.bind(this));this.finalArr=o.map(s)}t.getStringArray=function(e){var n=e.split(t.findTmplLoopsRE()),r=/^([\\n\s\W]+)$/;return j.reject(function(t){return t.match(r)},n)},t.findTmplLoopsRE=function(){return/({{#\w+}}[\w\n\s\W]+?{{\/\w+}})/gm},t.parseTmplLoopsRE=function(){return/({{#(\w+)}})([\w\n\s\W]+?)({{\/\2}})/gm},t.swapParamsForTagsRE=function(){return/({{)(.*?)(}})/gm};var e=t.prototype;return e.removeThis=function(){this.finalArr=void 0,this.templateData=void 0,this.template=void 0},e.getTemplateNode=function(){var t=this.finalArr.join(" "),e=document.createRange().createContextualFragment(t);return window.setTimeout(this.removeThis(),10),e},e.getTemplateString=function(){return this.finalArr.join(" ")},e.formatTemplate=function(t){return"string"==typeof t?t:t.text},e.addParams=function(e){var n=this;return e.replace(t.swapParamsForTagsRE(),function(t,e,r,o){var i=n.templateData[r];return j.defaultTo("")(i)})},e.parseTheTmplLoop=function(e,n,r,o){var i=o;return this.templateData[r].map(function(e){return e="string"==typeof e?function(e,n){return n.replace(t.swapParamsForTagsRE(),e)}(e,i):function(e,n){return n.replace(t.swapParamsForTagsRE(),function(t,n,r){return e[r]})}(e,i)}).join(" ")},t}();function Y(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var K=n(19),q=function(){function t(t,e,n,r){void 0===t&&(t="div"),void 0===e&&(e={}),void 0===n&&(n=void 0),void 0===r&&(r=void 0),!0===K.is(String,e)&&(n=e,e={}),this.props=new Map,this.setProp("fragment",document.createDocumentFragment()),this.setProp("tagName",t),this.setProp("attrs",this.updateAttrs(e)),this.setProp("content",n),this.setProp("template",r),this.addMixins()}var e=t.prototype;return e.setProp=function(t,e){this.props.set(t,e)},e.getProp=function(t){return this.props.get(t)},e.setElAttrs=function(t,e){return this.getProp("attrs").forEach(function(e,n){"dataset"===n?K.forEachObjIndexed(function(e,n){t.dataset[n]=e},e):t.setAttribute(n,e)}),t},e.updateAttrs=function(t,e){var n=void 0!==e?e:new Map;return K.mapObjIndexed(function(t,e){return n.set(e,t)},t),n},e.addTemplate=function(t){var e=this,n=this.getProp("template");return void 0!==n?function(n){var r=e.getProp("content");r=K.is(Object,r)?r:{};var o=new G(n,r).getTemplateNode();return t.appendChild(o),t}(n):function(t){return t}(t)},e.createElement=function(t){return void 0===t&&(t="div"),document.createElement(t)},e.addContent=function(t){var e=this.getProp("content");if(!0===K.is(String,e)){var n=document.createTextNode(e);t.appendChild(n)}return t},e.execute=function(){var t=K.pipe(this.createElement.bind(this),this.setElAttrs.bind(this),this.addTemplate.bind(this),this.addContent.bind(this))(this.getProp("tagName"));this.props.set("el",t)},e.render=function(){return this.execute(),this.getProp("el")},e.returnIfDefined=function(t,e){if(void 0!==e){var n=void 0===e;t[e]=!1===n?e:F(t[va],e)}},e.updateprops=function(t){return this.returnIfDefined(this.props,t),this},e.updatepropsAndRun=function(t){return this.updateprops(t),this.execute(),this.getProp("fragment")},e.unmount=function(){void 0!==this.props&&(this.getProp("el").remove(),this.props.clear(),this.gc())},e.updateTag=function(t){void 0===t&&(t="div"),this.updateprops(t)},e.updateAttributes=function(t){void 0===t&&(t={}),this.updateprops(t)},e.updateTemplate=function(t){this.updateprops(t)},e.updateData=function(t){void 0===t&&(t={}),this.updateprops(t)},e.addTagAndRender=function(t){void 0===t&&(t="div"),this.updatepropsAndRun(t)},e.addAttrsibutesAndRender=function(t){void 0===t&&(t={}),this.updatepropsAndRun(t)},e.addTemplateAndRender=function(t){this.updatepropsAndRun(t)},e.addDataAndRender=function(t){void 0===t&&(t={}),this.updatepropsAndRun(t)},e.addMixins=function(){var t=r();this.gc=t.gc.bind(this)},function(t,e,n){e&&Y(t.prototype,e),n&&Y(t,n)}(t,[{key:"el",get:function(){return this.props.get("el")}}]),t}(),B=function(t,e,n,r){return void 0===t&&(t=!1),void 0===e&&(e=1),void 0===n&&(n="ease"),void 0===r&&(r=!1),(!0===r?"opacity:0;":"")+"transition: opacity "+e+"s "+n+"; opacity: "+(!0===t?1:0)+";"};var Q=n(6),z=(n(125),n(19)),J=function(){function t(e){this.props.observableStreams=t.createDirectionalObservables()}return t.createDirectionalFiltersObject=function(){return{P:["parent"],C:["child"],PCI:["parent","internal","child"],CI:["child","internal"],PI:["parent","internal"],PC:["parent","child"]}},t.addDefaultDir=function(t){return z.flip(z.merge)({$dir:["internal"]},z.clone(t))},t.addDownInternalDir=function(t,e){return void 0===e&&(e=["internal","down"]),z.flip(z.merge)(z.clone(t),{$dir:e})},t.addChildAndInternalDir=function(t,e){return void 0===e&&(e=["child","down"]),z.flip(z.merge)(z.clone(t),{$dir:e})},t.mapToDefaultDir=function(t){return this.addDefaultDir(t)},t.createDirectionalObservables=function(t,e,n){void 0===t&&(t=new Q.b),void 0!==e&&void 0!==n&&(t.viewName=e,t.cid=n);var r=function(t){return z.propSatisfies(function(e){return e.includes(t)},"$dir")},o=r("parent"),i=r("child"),a=r("internal"),s=function(t){return z.merge({from$:t})},c=s("child"),u=s("internal"),d=s("parent"),l=t.filter(function(t){return void 0!==t&&void 0!==t.action}),p=t.filter(a).map(u),h=t.filter(o).map(c),f=t.filter(i).map(d),E={parent:h,internal:p,child:f};return{raw$:l,toInternal$:p,toParent$:h,toChild$:f,completeAll:function(){z.forEach(function(t){t.complete(),t.isStopped=!0},[l,p,h,f])},completeStream:function(t){void 0===t&&(t=[]);void 0!==t&&t.length>=1&&t.forEach(function(t){void 0!==E[t]&&function(t){t.complete(),t.isStopped=!0}(E[t])})}}},t}();function X(t,e,n){return(X=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],function(){})),!0}catch(t){return!1}}()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var o=new(Function.bind.apply(t,r));return n&&Z(o,n.prototype),o}).apply(null,arguments)}function Z(t,e){return(Z=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var tt=n(19),et=function(){function t(t,e,n,r){var o=this;void 0===e&&(e={}),void 0===n&&(n=""),void 0===r&&(r="theName"),this.addMixins(),this._state="INIT",this.cid=n,this.vsName=r,this.defaults={debug:!1,extendedHashMethods:{}},this.options=F(this.defaults,e);this.addActionListeners().forEach(function(t){var e=t[0],n=t[1];o.options.extendedHashMethods[e]=function(t){return o[n](t)}}),this.options.hashMethods=this.setHashMethods(this.options.extendedHashMethods),this.sink$=t,this.sink$.subscribe(this.onSinkSubscribe.bind(this)),this.$dirs=J.createDirectionalFiltersObject(),this.addDefaultDir=J.addDefaultDir,this.sourceStreams=J.createDirectionalObservables(new Q.b,this.vsName,this.cid),this._source$=this.sourceStreams.toInternal$}var e=t.prototype;return e.addActionListeners=function(){return[]},e.setHashMethods=function(t){var e=this;return void 0===t&&(t={}),F({GARBAGE_COLLECT:function(t){return e.onGarbageCollect(t)},READY_FOR_GC:function(t){return e.onReadyForGC(t)},DISPOSE:function(t){return e.onDispose(t)},RENDER:function(t){return e.onRender(t)},RENDER_AND_ATTACH_TO_PARENT:function(t){return e.onRenderAndAttachToParent(t)},RENDER_AND_ATTACH_TO_DOM:function(t){return e.onRenderAndAttachToDom(t)},ATTACH_CHILD_TO_SELF:function(t){return e.onAttachChildToSelf(t)}},t)},e.createDomItem=function(){this.props=void 0!==this.props?this.props:{};var t=tt.filter(function(t){return void 0!==t},tt.pick(["id","className"],this.props));return new q(this.props.tagName,t,this.props.data,this.props.template)},e.onDisposeCompleted=function(t){},e.animateInTween=function(t,e){!function(t,e){var n=1*window.getComputedStyle(t).opacity,r=B(!0,e,"ease",1===n);t.style.cssText+=r}(t,e)},e.animateOutTween=function(t,e,n){!function(t,e,n){var r=B(!1,e,"ease");t.style.cssText+=r,console.log(e," inline is ",r),t.addEventListener("transitionend",n,!1)}(t,e,n)},e.setAnimateIn=function(t){if(!0===t.animateIn){var e=void 0!==t.el?t.el:this.domItem.el;this.animateInTween(e,t.animateInTime)}},e.disposeMethodOld=function(t){var e=this,n=M.a.bindCallback(function(t,n){var r=void 0!==t.el.el?t.el.el:t.el;e.animateOutTween(r,t.animateOutTime,n)}),r=function(t){e._source$.next({action:"READY_FOR_GC",$dir:e.$dirs.I})};return(!0===t.animateOut?function(t){return n(t).subscribe(r),{action:"DISPOSING",$dir:e.$dirs.CI}}:function(){return{action:"DISPOSE_AND_READY_FOR_GC",$dir:e.$dirs.PCI}})(t)},e.disposeMethod=function(t){var e=this;return void 0!==t.animateOutClass?(function(){var n=void 0!==t.el.el?t.el.el:t.el,r={action:"READY_FOR_GC",$dir:e.$dirs.PI,el:n};t.el$.setClass(t.animateOutClass);M.a.fromEvent(n,"transitionend").filter(function(t){return t.target===n}).take(1).subscribe(function(){e._source$.next(r)})}(),{action:"DISPOSING",$dir:this.$dirs.CI}):{action:"DISPOSE_AND_READY_FOR_GC",$dir:e.$dirs.CI}},e.onDispose=function(t){return this.disposeMethod(t)},e.removeStream=function(){void 0!==this.sourceStreams&&this.sourceStreams.completeStream(["internal","child"])},e.onGarbageCollect9=function(t){var e="PageChildBox"===this.vsName?1e3:0;window.setTimeout(this.onGarbageCollectRun.bind(this),e)},e.onReadyForGC=function(t){this.removeStream()},e.onGarbageCollect=function(t){this.domItem.unmount(),void 0!==this.sourceStreams&&this.sourceStreams.completeStream(["parent"])},e.getSourceStream=function(){return this._source$},e.combineDomItems=function(t){var e=tt.isNil(t.query)?t.node:t.query;("appendChild"===t.attachType?function(t,e){return t.appendChild(e)}:function(t,e){return t.insertBefore(e,t.firstChild)})(e,this.domItem.render()),this.setAnimateIn(t)},e.onAttachChildToSelf=function(t){var e=t.childRenderData;return this.combineDomItems(e),{action:"CHILD_ATTACHED",$dir:this.$dirs.PI}},e.onRenderAndAttachToParent=function(t){return this.onRender(t),this.combineDomItems(t),{action:"RENDERED_AND_ATTACHED_TO_PARENT",el:this.domItem.el,$dir:this.$dirs.PI}},e.renderDomItem=function(t){return this.domItem=X(q,t),this.domItem},e.onRender=function(t){var e=this;return{action:"RENDERED",el:function(t){return e.renderDomItem(t)}(tt.props(["tagName","domAttributes","data","template"],t)),$dir:this.$dirs.I}},e.extendedMethods=function(t){},e.onRenderAndAttachToDom=function(t){var e=this;return t.attachData.el=function(t){return e.renderDomItem(t)}(tt.props(["tagName","domAttributes","data","template"],t)),this.combineDomItems(t.attachData),{action:"RENDERED_AND_ATTACHED_TO_DOM",el:t.attachData.el.el,$dir:this.$dirs.CI}},e.onSinkSubscribe=function(t){var e=this,n=t.action,r=tt.defaultTo(function(t){return e.extendedMethods(t)})(this.options.hashMethods[n])(t);void 0!==r&&function(t){e._source$.next(t)}(Object.freeze(r))},e.addMixins=function(){var t=r();this.createId=t.createId,this.createpropsMap=t.createpropsMap,this.convertDomStringMapToObj=a,this.ifNilThenUpdate=c},t}(),nt=n(19),rt=function(){function t(t,e){this.context=t,this.enhancersMap=new Map,this.enhancersArr=e,this.initMap(),this.addAllEnhancerMethods()}var e=t.prototype;return e.initMap=function(){this.enhancersMap.set("ALL",[]);var t=function(t,e){void 0===t&&(t=void 0),void 0===e&&(e=[]);e=o.concat(["length","name","prototype","constructor"],e);var n=o.compose(o.without(e),o.uniq),r=n(Object.getOwnPropertyNames(t.constructor.prototype)),i=n(function(t,e){return void 0===t&&(t=void 0),void 0===e&&(e=[]),Object.getOwnPropertyNames(t)}(t.constructor));return{methods:r,staticMethods:i,allMethods:o.concat(r,i)}}(this.context).allMethods;this.updateMap("LOCAL",t)},e.getEnhancersMap=function(){return this.enhancersMap},e.updateMap=function(t,e){var n=nt.concat(this.enhancersMap.get("ALL"),e);this.enhancersMap.set(t,e),this.enhancersMap.set("ALL",n)},e.getMethodsArr=function(t){return this.enhancersMap.get(t)},e.createEnhancerMethodsObj=function(t){var e=this,n=function(t){return console.error('Spyne Error: The following enhancer method, "'+t+'", already exists and cannot be added to the '+r.name+" Enhancer!")},r=new t(this.context),o=r.getEnhancerMethods(),i=function(t){var r=nt.contains(nt.__,e.getMethodsArr("ALL")),o=nt.filter(r,t);return o.forEach(n),o}(o.allMethods),a=nt.dropWhile(nt.contains(nt.__,i));return o=nt.map(a,o),this.updateMap(r.name,o.allMethods),o.enhancer=r,o.name=r.name,o},e.addAllEnhancerMethods=function(){var t=this;nt.forEach(function(e){var n=t.createEnhancerMethodsObj(e);n.enhancer.bindParentViewStream(n,t.context)},this.enhancersArr)},t}(),ot=n(19),it=function(){function t(t,e){this.addMixins(),this.props=t,this.broadcastFn=e,this.broadcaster(this.broadcastFn)}var e=t.prototype;return e.addDblClickEvt=function(t){var e=M.a.fromEvent(t,"click");return e.buffer(e.debounceTime(250)).filter(function(t){return 2===t.length}).map(function(t){var e=ot.clone(t[0]);return e.typeOverRide="dblclick",e})},e.broadcast=function(t){var e,n=this,r={UI:this.sendUIPayload,ROUTE:this.sendRoutePayload},o=t[0],i=t[1],s=t[2],c=this.props.el.querySelectorAll(o);if(c.length<=0){var u=this.props.el,d=function(t){t===u&&(c=[t])};!function(){var t=u.parentElement.querySelectorAll(o);t.forEach=Array.prototype.forEach,t.forEach(d)}()}var l=void 0!==s;void 0===c||c.length<=0?console.warn("Spyne Warning: The item "+o+", does not appear to exist!"):(c.forEach=Array.prototype.forEach,c.forEach(function(t){var o="dblClick"!==i?M.a.fromEvent(t,i):n.addDblClickEvt(t);e=t.dataset.channel;var s={};s.payload=a(t.dataset),s.payload=ot.omit(["channel"],s.payload),s.channel=e,s.srcElement={},s.srcElement.cid=n.props.id,s.srcElement.isLocalEvent=l,s.srcElement.viewName=n.props.name,s.srcElement.event=i,s.srcElement.el=t,(void 0!==e?r[e]:r.UI)(o,s)}))},e.broadcaster=function(t){var e=this;t().forEach(function(t){return e.broadcast(t)})},e.addMixins=function(){var t=k();this.sendUIPayload=t.sendUIPayload,this.sendRoutePayload=t.sendRoutePayload,this.createLifeStreamPayload=t.createLifeStreamPayload},t}();function at(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var st=n(19),ct=function(){function t(e,n){this.el=void 0!==n?e.querySelectorAll(n):e,this.queryStr=n,1===this.el.length?this.el=st.head(this.el):"NodeList"===this.el.constructor.name&&(this.el=t.createArrayFromNodeList(this.el)),this.cList=this.el.classList,this.elProps=new Map,this.createMethods()}t.createArrayFromNodeList=function(t){return st.reduce(function(t,e){return t.push(e),t},[],t)};var e=t.prototype;return e.createMethods=function(){this.addClass=this.mapToValue(function(t,e){void 0!==t&&void 0!==t.classList&&void 0!==e&&t.classList.add(e)}),this.removeClass=this.mapToValue(function(t,e){void 0!==t&&void 0!==t.classList&&void 0!==e&&t.classList.remove(e)}),this.setClass=this.mapToValue(function(t,e){return t.classList.value=e,t}),this.inlineCss=this.mapToValue(function(t,e){return t.style.cssText=e,t}),this.toggleClass=this.mapToValue(function(t,e,n){return void 0===n&&(n=!0),t.classList.toggle(e,n),t})},e.mapMethod=function(t){var e=this;return function(n){return e.elArr.map(t),e}},e.addAnimClass=function(t){var e=this,n=function(){return e.addClass(t)};return requestAnimationFrame(function(){setTimeout(n,0)}),this},e.mapToValue=function(t){var e=this;return function(n){for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return e.elArr.map(function(e){return t.apply(void 0,[e,n].concat(o))}),e}},e.setClassOnBool=function(t,e){return void 0===t&&(t=""),void 0===e&&(e=!0),e?this.addClass(t):this.removeClass(t),this},e.setActiveItem=function(t,e){var n=document.querySelector(this.queryStr+t),r=st.ifElse(function(t){return t===n},function(t){void 0!==t&&t.classList.add(e)},function(t){void 0!==t&&t.classList.remove(e)});this.elArr.map(r)},e.query=function(e){if(null!==this.el.querySelector(e))return new t(this.el,e);var n=this.el.getAttribute("id");console.warn('Spyne Warning: the element, "'+e+'" does not exist in this element, "'+n+'"!')},e.getEl=function(){return this.el},e.unmount=function(){this.el=void 0,this.cList=void 0,this.inline=void 0},function(t,e,n){e&&at(t.prototype,e),n&&at(t,n)}(t,[{key:"elArr",get:function(){return"NodeList"===this.el.constructor.name?t.createArrayFromNodeList(this.el):[].concat(this.el)}}]),t}();function ut(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var dt=n(19),lt=function(){function t(t){var e=this;void 0===t&&(t={}),this.checker=Math.random(),this.addMixins(),this.defaults=function(){var n=e.createId(),r=t.id?t.id:n;return{cid:n,id:r,tagName:"div",el:void 0,data:void 0,animateIn:!1,animateInTime:.5,animateOut:!1,animateOutTime:.5,hashId:"#"+r,viewClass:et,extendedSourcesHashMethods:{},debug:!1,template:void 0,node:document.createDocumentFragment(),name:i(e)}},this._state={},this.$dirs=J.createDirectionalFiltersObject(),this.addDefaultDirection=J.addDefaultDir,this.addDownInternalDir=J.addDownInternalDir,this.props=F(this.defaults(),t);var n=["id","class","dataset"];this.props.domAttributes=dt.pick(n,this.props),this.loadEnhancers(),this.loadAllMethods(),this.props.action="LOADED",this.sink$=new Q.b;var r=this.props.viewClass;this.view=new r(this.sink$,{},this.props.cid,this.constructor.name),this.sourceStreams=this.view.sourceStreams,this._rawSource$=this.view.getSourceStream(),this._rawSource$.viewName=this.props.name,this.sendEventsDownStream=this.sendEventsDownStreamFn,this.initViewStream(),this.checkIfElementAlreadyExists()}var e=t.prototype;return e.checkIfElementAlreadyExists=function(){dt.propSatisfies(dt.allPass([function(t){return document.body.contains(t)},function(t){return void 0!==t&&void 0!==t.tagName}]),"el")(this.props)&&this.postRender()},e.loadEnhancers=function(t){void 0===t&&(t=[]);var e=new rt(this,t);this.props.enhancersMap=e.getEnhancersMap(),e=void 0},e.loadAllMethods=function(){var t=this,e=dt.curry(this.onChannelMethodCall.bind(this));this.addActionListeners().forEach(function(n){var r=n[0],o=n[1],i=n[2],a=dt.defaultTo("LOCAL");t.props.extendedSourcesHashMethods[r]=e(o,a(i))}),this.props.hashSourceMethods=this.setSourceHashMethods(this.props.extendedSourcesHashMethods)},e.addActionListeners=function(){return[]},e.onChannelMethodCall=function(t,e,n){if(void 0!==n.$dir&&n.$dir.includes("child")&&!0!==this.deleted){var r=F({},n);r.$dir=this.$dirs.C,this.sourceStreams.raw$.next(r)}var o=this.props.enhancersMap.get(e);!1===dt.contains(t,o)?console.warn('Spyne Warning: The method, "'+t+'", does not appear to exist in '+e+" file! "):this[t](n)},e.setSourceHashMethods=function(t){var e=this;void 0===t&&(t={});var n={DISPOSING:function(t){return e.checkParentDispose(t)},DISPOSE:function(t){return e.onDispose(t)},RENDERED:function(t){return e.onRendered(t)},RENDERED_AND_ATTACHED_TO_DOM:function(t){return e.onRendered(t)},RENDERED_AND_ATTACHED_TO_PARENT:function(t){return e.onRendered(t)},READY_FOR_GC:function(t){return e.onReadyToGC(t)},NOTHING:function(){return{}}};return F.all([{},n,t])},e.initViewStream=function(){var t=this;this._source$=this._rawSource$.map(function(e){return t.onMapViewSource(e)}).takeWhile(this.notGCSTATE),this.initAutoMergeSourceStreams(),this.updateSourceSubscription(this._source$,!0)},e.notGCSTATE=function(t){return!t.action.includes("READY_FOR_GC")},e.eqGCSTATE=function(t){return!t.action.includes("READY_FOR_GC")},e.notCOMPLETED=function(t){return!t.action.includes("COMPLETED")},e.notGCCOMPLETE=function(t){return!t.action.includes("GC_COMPLETE")},e.testVal=function(t){console.log("TESTING VALL IS ",t)},e.addParentStream=function(t,e){var n=this;this.parent$=t.filter(function(t){return void 0!==t&&void 0!==t.action}).map(function(t){var e=F({},t);return"DISPOSE_AND_READY_FOR_GC"===e.action&&(n.onDispose(e),e.action="READY_FOR_GC"),e}).takeWhile(this.notGCCOMPLETE),this.updateSourceSubscription(this.parent$,!1,"PARENT"),this.renderAndAttachToParent(e)},e.addChildStream=function(t){var e=this,n=t.filter(function(t){return void 0!==t&&void 0!==t.action}).do(function(t){return e.tracer("addChildStraem do ",t)}).map(function(t){return t}).finally(function(t){return e.onChildCompleted(n.source)});this.updateSourceSubscription(n,!0,"CHILD")},e.onChildDisposed=function(t){},e.onChildCompleted=function(t){var e=function(t){return dt.pick(["viewName","cid"],function t(e){for(;void 0!==e.destination;)e=t(e.destination);return e}(t))}(t);return this.tracer("onChildCompleted ",this.checker,t),this.onChildDisposed(e,t),e},e.initAutoMergeSourceStreams=function(){var t=this,e={next:this.onSubscribeToSourcesNext.bind(this),error:this.onSubscribeToSourcesError.bind(this),complete:this.onSubscribeToSourcesComplete.bind(this)},n=function(){0===(r-=1)&&(t.props.el$.unmount(),t.uberSource$.complete(),t.autoSubscriber$.complete(),t.sink$.complete(),t.props=void 0,t.deleted=!0,t.tracer("completeAll",t.deleted,t.props))},r=0;this.uberSource$=new Q.b;this.autoMergeSubject$=this.uberSource$.mergeMap(function(e){var o=e.observable.filter(function(t){return void 0!==t&&void 0!==t.action}).map(function(e){var n=F({},e);return n.action=e.action,t.tracer("autoMergeSubject$",n),n});return!1===e.autoClosesBool?o:(r+=1,o.finally(n))}),this.autoSubscriber$=this.autoMergeSubject$.filter(function(t){return void 0!==t&&void 0!==t.action}).subscribe(e)},e.updateSourceSubscription=function(t,e,n){void 0===e&&(e=!1);var r={observable:t,autoClosesBool:e,rel:n};this.tracer("updateSourceSubscription ",this.checker,r),this.uberSource$.next(r)},e.onSubscribeToSourcesNext=function(t){var e=this;void 0===t&&(t={});var n=dt.defaultTo(function(t){return e.sendExtendedStreams(t)}),r=function(t,e){if(void 0!==t[e])return e;return o.compose(o.head,o.filter(o.compose(o.test(o.__,e),function(t){return new RegExp(t)})))(o.keys(t))}(this.props.hashSourceMethods,t.action);n(this.props.hashSourceMethods[r])(t),this.tracer("onSubscribeToSourcesNext",{payload:t})},e.onSubscribeToSourcesError=function(t){void 0===t&&(t=""),console.log("ALL ERROR  ",this.constructor.name,t)},e.onSubscribeToSourcesComplete=function(){this.tracer("onSubscribeToSourcesComplete","GARBAGE_COLLECT"),this.openSpigot("GARBAGE_COLLECT")},e.sendExtendedStreams=function(t){this.tracer("sendExtendedStreams",t),this.openSpigot(t.action,t)},e.renderAndAttachToParent=function(t){this.openSpigot("RENDER_AND_ATTACH_TO_PARENT",t)},e.renderView=function(){this.openSpigot("RENDER")},e.renderViewAndAttachToDom=function(t,e,n){var r={node:t,type:e,attachType:n};this.openSpigot("RENDER_AND_ATTACH_TO_DOM",{attachData:r})},e.attachChildToView=function(t){},e.checkParentDispose=function(t){"parent"===t.from$&&this.onDispose(t)},e.onBeforeDispose=function(){},e.onDispose=function(t){this.onBeforeDispose(),this.openSpigot("DISPOSE")},e.onChildDispose=function(t){},e.onParentDisposing=function(t){this.openSpigot("DISPOSE")},e.onReadyToGC=function(t){var e=void 0!==t.from$&&"internal"===t.from$;this.tracer("onReadyToGC",e,t)},e.sendEventsDownStreamFn=function(t,e){void 0===e&&(e={});var n=F({action:e},t);n.$dir=this.$dirs.C,this.sourceStreams.raw$.next(n)},e.openSpigot=function(t,e){if(void 0===e&&(e={}),void 0!==this.props){this.props.action=t;var n=dt.merge(this.props,e);this.sink$.next(Object.freeze(n))}},e.setAttachData=function(t,e){return{node:this.props.el,type:"ViewToDomMediator",attachType:t,query:this.props.el.querySelector(e)}},e.getParentEls=function(t,e){for(var n=function(t){return t.parentElement},r=0,o=t;r<e;)o=n(o),r++;return o},e.setAttachParentData=function(t,e,n){return{node:this.getParentEls(this.props.el,n),type:"ViewToDomMediator",attachType:t,query:this.props.el.parentElement.querySelector(e)}},e.onMapViewSource=function(t){return void 0===t&&(t={}),this.props=dt.merge(this.props,t),t},e.exchangeViewsWithChild=function(t,e){this.addChildStream(t.sourceStreams.toParent$),t.addParentStream(this.sourceStreams.toChild$,e)},e.appendToDom=function(t){this.renderViewAndAttachToDom(t,"dom","appendChild")},e.prependToDom=function(t){this.renderViewAndAttachToDom(t,"dom","prependChild")},e.appendView=function(t,e){this.exchangeViewsWithChild(t,this.setAttachData("appendChild",e))},e.appendViewToParent=function(t,e,n){void 0===n&&(n=1),this.exchangeViewsWithChild(t,this.setAttachParentData("appendChild",e,n))},e.prependViewToParent=function(t,e,n){void 0===n&&(n=1),this.exchangeViewsWithChild(t,this.setAttachParentData("prependChild",e,n))},e.prependView=function(t,e){this.exchangeViewsWithChild(t,this.setAttachData("prependChild",e))},e.appendToNull=function(){var t=document.getElementById("spyne-null-views");this.renderViewAndAttachToDom(t,"dom","appendChild")},e.onRendered=function(t){"internal"===t.from$&&this.postRender()},e.postRender=function(){this.beforeAfterRender(),this.afterRender(),this.viewsStreamBroadcaster=new it(this.props,this.broadcastEvents)},e.beforeAfterRender=function(){this.props.el$=new ct(this.props.el)},e.downStream=function(){},e.afterRender=function(){},e.broadcastEvents=function(){return[]},e.getChannel=function(t){var e=this;return dt.ifElse(function(t){return h().includes(t)},function(t){return window.Spyne.channels.getStream(t).observer.takeWhile(function(t){return!0!==e.deleted})},function(t){return console.warn("channel name "+t+" is not within "+h)})(t)},e.addChannel=function(t,e,n){var r=this;void 0===e&&(e=!1),void 0===n&&(n=!1);var o=!0===e?this.$dirs.CI:this.$dirs.I,i=dt.path(["srcElement","isLocalEvent"]),a=dt.path(["srcElement","cid"]),s=this.getChannel(t).map(function(t){var e=dt.defaultTo({},dt.clone(t));return F({$dir:o},e)}).filter(function(t){var e=a(t);return!0!==i(t)||e===r.props.cid});this.updateSourceSubscription(s,!1)},e.sendChannelPayload=function(t,e,n){void 0===e&&(e={}),void 0===n&&(n="VIEWSTREAM_EVENT");var r={payload:e,action:n,srcElement:{}};r.srcElement.cid=this.props.id,r.srcElement.isLocalEvent=!1,r.srcElement.viewName=this.props.name;var o=M.a.of(r);return new P(t,o,r)},e.tracer=function(){},e.isLocalEvent=function(t){return void 0!==dt.path(["srcElement","el"],t)&&this.props.el.contains(t.srcElement.el)},e.addMixins=function(){var t=r();this.createId=t.createId,this.createpropsMap=t.createpropsMap,this.convertDomStringMapToObj=a,this.ifNilThenUpdate=c;var e=k();this.sendUIPayload=e.sendUIPayload,this.sendRoutePayload=e.sendRoutePayload,this.createLifeStreamPayload=e.createLifeStreamPayload},function(t,e,n){e&&ut(t.prototype,e),n&&ut(t,n)}(t,[{key:"source$",get:function(){return this._source$}}]),t}();var pt=function(t){function e(e){return void 0===e&&(e={}),e.id="page-control",e.className="null-view",t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addActionListeners=function(){return[]},n.broadcastEvents=function(){return[]},n.afterRender=function(){},e}(lt);var ht=function(t){function e(e){return void 0===e&&(e={}),e.tagName="article",e.class="photogs-view",e.template=n(363),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var r=e.prototype;return r.addActionListeners=function(){return[]},r.broadcastEvents=function(){return[["dl","click"]]},r.afterRender=function(){},e}(lt);var ft=n(49),Et=function(t){function e(e){return void 0===e&&(e={}),e.tagName="section",e.class="page-content",e.id="photogs-container",t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addActionListeners=function(){return[]},n.broadcastEvents=function(){return[]},n.loadImages=function(t){var e=this;this.props.data=ft.prop("channelPayload",t);this.userData=this.props.data.map(function(t){return t.user}),this.userData=function(t,e){return t.filter(function(t,n,r){return r.map(function(t){return t[e]}).indexOf(t[e])===n})}(this.userData,"id"),this.userData.forEach(function(t){e.appendView(new ht({data:t}))})},n.afterRender=function(){this.getChannel("ChannelData500px").take(1).subscribe(this.loadImages.bind(this))},e}(lt),mt=n(121);var vt=function(t){function e(e){return void 0===e&&(e={}),e.tagName="article",e.template=n(362),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var r=e.prototype;return r.addActionListeners=function(){return[["CHANNEL_ROUTE_CHANGE_EVENT","onRouteChangeEvent"]]},r.broadcastEvents=function(){return[["article dl","click"]]},r.onRouteChangeEvent=function(t){},r.onAnimate=function(t){var e=this;this.props.el$.addClass("expand");var n=this.props.el.offsetTop+45,r=document.querySelector("html"),o=window.pageYOffset;!function(){e.hideOverflow(!0),window.pageYOffset=0;var t="top:"+-1*o+"px;";r.style.cssText=t,console.log({elHtml:r,styleStr:t,topNum:n})}(),mt.a.to(r,.3,{top:-1*n,ease:Sine.easeInOut})},r.hideOverflow=function(t){void 0===t&&(t=!0),document.querySelector("html").classList.toggle("expand",t)},r.afterRender=function(){var t=this;!function(){var e=t.props.el$.query("img").el;t.hideOverflow(!1);e.onload=function(n){void 0!==t&&void 0!==t.props?(e.classList.add("reveal"),t.props.el$.query("aside").el.remove(),e.onload=function(){},e=void 0):(e.onload=function(){},e=void 0)}}(),t.addChannel("ROUTE")},e}(lt);var Nt=function(t){function e(e){return void 0===e&&(e={}),e.tagName="section",e.class="page-content",e.id="images-container",t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addActionListeners=function(){return[["CHANNEL_VIDEO_SYNC_EVENT","onSyncScrollEvent"]]},n.broadcastEvents=function(){return[]},n.syncScroll=function(t){var e=document.querySelector(t);TweenMax.to(window,1,{scrollTo:{y:e,offsetY:70,autoKill:!1,ease:Power3.easeInOut}})},n.onSyncScrollEvent=function(t){var e=t.channelPayload,n=e.label;this.syncScroll(n),console.log("item to scroll is ",e)},n.addAnimation=function(){var t=document.querySelectorAll("section article"),e=new TimelineMax;t.forEach(function(t){e.to(window,2,{scrollTo:{y:t,offsetY:70,autoKill:!1,ease:Power1.easeInOut}},"+=1")})},n.loadImages=function(t){var e=this;this.photosData=t.channelPayload;this.photosData.forEach(function(t,n){t.indexNum=n+1,e.appendView(new vt({id:"img-"+1*n,data:t}))})},n.afterRender2=function(){},n.afterRender=function(){this.addChannel("CHANNEL_VIDEO");this.getChannel("ChannelData500px").take(1).subscribe(this.loadImages.bind(this))},e}(lt);var _t=function(t){function e(e){return void 0===e&&(e={}),e.tagName="section",e.class="empty",e.template=n(360),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var r=e.prototype;return r.addActionListeners=function(){return[["CHANNEL_UI_CLICK_EVENT","onClicked"]]},r.onClicked=function(t){console.log("item is clicked "),this.props.el$.query("article").setActiveItem("article","test1")},r.broadcastEvents=function(){return[["button#testbtn","click"]]},r.afterRender=function(){this.addChannel("UI")},e}(lt);var gt=n(49),At=function(t){function e(e){var n;return void 0===e&&(e={}),e.class="page-view",e.pageId=e.routeInfo.keywords.pageId,(n=t.call(this,e)||this).disposeReady=!1,n}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.getPageType=function(t){return{home:_t,gallery:Nt,photographers:Et}[t]||_t},n.addActionListeners=function(){return[["CHANNEL_ROUTE_CHANGE_EVENT","onRouteChangeEvent"]]},n.broadcastEvents=function(){return[]},n.onRouteChangeEvent=function(t){var e=gt.path(["channelPayload","keywords","pageId"],t),n=this.props.pageId===e;!1===n&&(console.log("dispose is ready",t,{routePageId:e,isNotCurrentPageId:n}),this.onDispose()),this.disposeReady=!0},n.getLocationVal=function(){var t=window.location.pathname;if(t.length>1){t=t.replace(/^\//g,"")}return t},n.afterRender=function(){console.log("page view route info ",this.props.routeInfo);this.props.routeInfo.keywords.pageId,this.getPageType(this.props.pageId);this.appendView(new Nt),this.addChannel("ROUTE")},e}(lt);n(49);var bt=function(t){function e(e){return void 0===e&&(e={}),e.id="pages-holder",e.class="stage",t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addActionListeners=function(){return[["CHANNEL_ROUTE.*","onRouteChangeEvent"],["CHANNEL_UI.*","onUIEvent"],["CHANNEL_WINDOW.*","onDomChannel"]]},n.broadcastEvents=function(){return[]},n.onUIEvent=function(t){this.isLocalEvent(t)?console.log("LCOAL EVENT ",t):console.log("GLOBAL EVENT ",t)},n.onDomChannel=function(t){console.log("CHANNEL WINDOW ",this.isLocalEvent(t))},n.onRouteDeepLink=function(t){console.log("route deep link ",t,this.isLocalEvent(t))},n.onRouteChangeEvent=function(t){var e=t.channelPayload;console.log("route info ",e);e.pageId;this.appendView(new At({routeInfo:e}))},n.afterRender=function(){(new pt).appendToNull(),this.addChannel("ROUTE"),this.addChannel("UI"),this.addChannel("WINDOW")},e}(lt);n(49);var yt=function(t){function e(e){return void 0===e&&(e={}),e.tagName="section",e.id="menu",e.template=n(359),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var r=e.prototype;return r.addActionListeners=function(){return[["SCROLL_EVENT","onScrollEvent"]]},r.broadcastEvents=function(){return[]},r.onScrollEvent=function(t){console.log("scroll event is ",t);var e=t.scrollY>=45;this.props.el.classList.toggle("hide",e)},r.afterRender=function(){},e}(lt);var St=function(t){function e(e){return void 0===e&&(e={}),e.id="audio-player",e.template=n(364),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var r=e.prototype;return r.addActionListeners=function(){return[]},r.broadcastEvents=function(){return[]},r.onTimeUpdate=function(t){console.log("time update is ",t.target.currentTime)},r.afterRender=function(){this.props.player=this.props.el$.query("audio").el;var t="CHANNEL_VIDEO_INITIALIZED_EVENT",e={action:t,video:this.props.player};this.sendChannelPayload("CHANNEL_VIDEO",e,t)},e}(lt);n(120);var Ct=n(49),Tt=function(t){function e(e){return void 0===e&&(e={}),e.id="gatekeeper",e.template=n(358),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var r=e.prototype;return r.addActionListeners=function(){return[["CHANNEL_GATEWAY_PASSWORD_INCORRECT_EVENT","onPasswordIncorrect"],["CHANNEL_GATEWAY_LOCALSTORAGE_PASSWORD_INCORRECT_EVENT","onLocalStorageIncorrect"],["CHANNEL_GATEWAY_LOCALSTORAGE_PASSWORD_CORRECT_EVENT","onlocalStorageGatewayCompleted"],["CHANNEL_GATEWAY_PASSWORD_CORRECT_EVENT","onGatewayCompleted"],["CHANNEL_UI","onUIEvent"]]},r.onUIEvent=function(t){},r.onLocalStorageIncorrect=function(){this.props.el$.addClass("show")},r.onPasswordIncorrect=function(t){t.channelPayload;this.props.errorMsg.addClass("reveal")},r.onlocalStorageGatewayCompleted=function(t){this.onDispose()},r.onGatewayCompleted=function(t){var e=Ct.path(["channelPayload","passwordVal"],t);this.checkLocalStorage(e),this.onDispose()},r.broadcastEvents=function(){return[]},r.resetForm=function(){this.props.errorMsg.removeClass("reveal"),this.props.input.value=""},r.onInput=function(t){this.resetForm()},r.onSubmit=function(t){var e=this.props.input.value;t.preventDefault();var n=e,r="CHANNEL_GATEWAY_CHECK_CREDENTIALS_EVENT";this.props.input.blur(),this.sendChannelPayload("CHANNEL_GATEWAY",{password:n,action:r},r)},r.checkLocalStorage=function(t){void 0===t&&(t="");var e=Spyne.config.appName+"_GateVal";this.props.passwordKey=e;var n=""!==t?"CHANNEL_LOCALSTORAGE_SET_EVENT":"CHANNEL_LOCALSTORAGE_GET_EVENT",r={key:e,action:n,val:t};this.sendChannelPayload("CHANNEL_LOCALSTORAGE",r,n)},r.onBeforeDispose=function(){this.props.btn.removeEventListener("click",this.onSubmit.bind(this),!1),this.props.input.removeEventListener("focus",this.onInput.bind(this),!1)},r.afterRender=function(){this.props.spyneName=Spyne.config.appName,this.props.btn=this.props.el$.query("#submit").el,this.props.input=this.props.el$.query("#password-dw").el,this.props.errorMsg=this.props.el$.query("#error-msg"),this.props.btn.addEventListener("click",this.onSubmit.bind(this),!1),this.props.input.addEventListener("focus",this.onInput.bind(this),!1),this.checkLocalStorage(),this.addChannel("UI"),this.addChannel("CHANNEL_GATEWAY")},e}(lt);var Ot=function(t){function e(e){return void 0===e&&(e={}),t.call(this,e)||this}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addActionListeners=function(){return[["CHANNEL_ROUTE_*","onChannelRouteEvent"],["CHANNEL_GATEWAY.*PASSWORD_CORRECT_EVENT","onGatewayCompleted"]]},n.broadcastEvents=function(){return[[".nav-btn","click"],[".nav-btn-ui","click"]]},n.onChannelRouteEvent=function(t){console.log("route event ",t)},n.testSendPayload=function(){},n.afterRender=function(){this.appendView(new Tt),this.addChannel("CHANNEL_GATEWAY")},n.onGatewayCompleted=function(){this.appendView(new yt),this.appendView(new bt),this.appendView(new St),this.testSendPayload(),this.addChannel("ROUTE"),this.getChannel("WINDOW").subscribe(function(t){console.log("window event  ",t.action,t)}),this.getChannel("ChannelData500px").subscribe(function(t){console.log("data ",t)})},e}(lt),wt=n(19),It=function(){function t(e,n,r,o,i){var a=e,s={channel:a,action:n,channelPayload:r,srcElement:o,event:i},c=window.Spyne.getChannelActions(a);return t.validateAction(n,a,c),"ROUTE"===a&&(s.location=t.getLocationData()),s}return t.validateAction=function(t,e,n){var r=wt.contains(t,n);return!1===r&&void 0!==window.Spyne&&console.warn("warning: Action: '"+t+"' is not registered within the "+e+" channel!"),r},t.getLocationData=function(){return wt.pickAll(["href","origin","protocol","host","hostname","port","pathname","search","hash"],window.location)},t.getStreamItem=function(){},t.getMouseEventKeys=function(){return["altKey","bubbles","cancelBubble","cancelable","clientX","clientY","composed","ctrlKey","currentTarget","defaultPrevented","detail","eventPhase","fromElement","isTrusted","layerX","layerY","metaKey","movementX","movementY","offsetX","offsetY","pageX","pageY","path","relatedTarget","returnValue","screenX","screenY","shiftKey","sourceCapabilities","srcElement","target","timeStamp","toElement","type","view","which","x","y"]},t}();function Dt(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Lt=n(19),Rt=function(){function t(t){var e=this;void 0===t&&(t={}),this.addMixins(),this.addRegisteredActions.bind(this),this.createChannelActionsObj();var n=new Q.b;this.props=F({name:"observer"},t),this.observer$=this.props.observer=n,this.streamsController=window.Spyne.channels,this.streamsController.getStream("DISPATCHER").subscribe(function(t){return e.onIncomingObservable(t)})}var e=t.prototype;return e.onStreamInitialized=function(){},e.initializeStream=function(){this.onStreamInitialized()},e.setTrace=function(t){},e.createChannelActionsObj=function(){var t=this.addRegisteredActions(),e=Lt.mergeAll(Lt.chain(function(t){return Lt.objOf(t,t)},t));this.channelActions=e},e.addRegisteredActions=function(){return[]},e.onIncomingObservable=function(t){var e=this,n=function(e){return{observableData:t.data,observableEvent:e}};return!0===Lt.equals(t.name,this.props.name)?function(t){return t.observable.map(n).subscribe(e.onIncomingObserverableData.bind(e))}(t):void 0},e.onIncomingObserverableData=function(t){},e.sendStreamItem=function(t,e,n,r,o){void 0===o&&(o=this.observer$);var i=new It(this.props.name,t,e,n,r);o.next(i)},e.getChannel=function(t){var e=this;return Lt.ifElse(function(t){return h().includes(t)},function(t){return e.streamsController.getStream(t).observer},function(t){return console.warn("channel name "+t+" is not within "+h)})(t)},e.addMixins=function(){},function(t,e,n){e&&Dt(t.prototype,e),n&&Dt(t,n)}(t,[{key:"observer",get:function(){return this.observer$}}]),t}(),Pt=n(19),Vt=function(){function t(){this.checkIfObjIsNotEmptyOrNil=t.checkIfObjIsNotEmptyOrNil.bind(this)}return t.checkIfObjIsNotEmptyOrNil=function(t){var e=Pt.compose(Pt.complement(Pt.isEmpty),Pt.head,Pt.values),n=Pt.compose(Pt.complement(Pt.isNil),Pt.head,Pt.values);return Pt.allPass([e,n])(t)},t.checkIfParamValueMatchesRegex=function(t,e){var n=Pt.reject(Pt.equals("keyword")),r=Pt.compose(n,Pt.keys),o=Pt.compose(Pt.find(function(e){return Pt.test(new RegExp(e),t)}),r)(e);return Pt.is(String,o)&&(e=Pt.assoc(t,Pt.prop(o,e),e)),e},t.getLocationStrByType=function(t,e){void 0===e&&(e=!1);var n={slash:"pathname",query:"search",hash:"hash"}[!0===e?"hash":t];return Pt.prop(n,window.location).replace(/^(\/)?(#)?(\/)?(.*)$/,"$4")},t.createRouteArrayFromParams=function(t,e,n,r){var o=this;void 0===n&&(n="slash");var i=[];return function e(n){var a={},s=n.keyword,c=void 0!==t[s]?t[s]:Pt.prop(s,r),u=typeof n[c];"string"===u?c=n[c]:"undefined"===u&&(n=o.checkIfParamValueMatchesRegex(c,n)),a[s]=c,o.checkIfObjIsNotEmptyOrNil(a)&&i.push(a);var d=Pt.is(Object,n),l=Pt.has(c,n),p=Pt.has("route",n);if(!0===(l&&d)){var h=n[c];Pt.has("route",h)&&e(h.route)}else!0===p&&void 0!==c&&e(n.route)}(e),i},t.createSlashString=function(t){var e=Pt.reject(Pt.isNil),n=Pt.when(Pt.complement(Pt.isNil,Pt.__),Pt.join("/"));return Pt.compose(n,e,Pt.flatten,Pt.map(Pt.values))(t)},t.createQueryString=function(t){var e=Pt.reject(Pt.isNil),n=this.checkIfObjIsNotEmptyOrNil,r=Pt.compose(Pt.join("="),Pt.flatten,Pt.toPairs),o=Pt.ifElse(n,r,Pt.always(void 0)),i=Pt.map(o),a=Pt.when(Pt.complement(Pt.isEmpty),Pt.concat("?"));return Pt.compose(a,Pt.join("&"),e,i)(t)},t.convertParamsToRoute=function(t,e,n,r){void 0===e&&(e=window.Spyne.config.channels.ROUTE);var o=void 0!==n?n:e.type,i=e.isHash,a=e.routes.route,s=void 0!==r?r:this.getLocationStrByType(o,i),c=this.convertRouteToParams(s,e,o).keywords,u=this.createRouteArrayFromParams(t,a,o,c);return"query"===o?this.createQueryString(u):this.createSlashString(u)},t.checkIfValueShouldMapToParam=function(t,e){var n=Pt.invert(t),r=Pt.compose(Pt.is(String),Pt.head,Pt.defaultTo([]),Pt.prop(e)),o=Pt.compose(Pt.head,Pt.prop(e));return Pt.ifElse(r,o,Pt.always(e))(n)},t.createArrFromSlashStr=function(t){return t.replace(/^([/])?(.*)$/,"$2").split("/")},t.convertSlashRouteStrToParamsObj=function(t,e){var n=this,r=e,o=this.createArrFromSlashStr(e),i=[],a=[],s=t;Pt.reduce(function(t,e){var r=n.checkIfValueShouldMapToParam(s,e);void 0!==(s=n.checkIfParamValueMatchesRegex(e,s))&&(i.push(s.keyword),a.push(r));var o=[e,"route"],c=Pt.path(o,s),u=Pt.path(["route"],s);void 0!==c?s=c:void 0!==u&&(s=u)},0,o);var c=Pt.zipObj(i,a),u=this.getLastArrVal(i);return{routeKeywordsArr:i,routeKeyword:u,keywords:c,routeValue:r}},t.getLastArrVal=function(t){return function(t){return void 0!==Pt.last(t)?Pt.last(t):""}(t)},t.createDefaultParamFromEmptyStr=function(t,e){var n={};return n[t.keyword]=this.checkIfValueShouldMapToParam(t,e),n},t.convertQueryStrToParams=function(t,e){var n=e,r=e.replace(/^([?])?(.*)$/,"$2"),o=Pt.compose(Pt.map(Pt.split("=")),Pt.split("&"))(r),i=Pt.fromPairs(o),a=Pt.map(Pt.head,o);return!0===Pt.isEmpty(e)&&(i=this.createDefaultParamFromEmptyStr(t,e),a=Pt.keys(i)),{routeKeywordsArr:a,routeKeyword:this.getLastArrVal(a),keywords:i,routeValue:n}},t.convertRouteToParams=function(t,e,n){if(void 0===e)return{};var r=void 0!==n?n:e.type,o=e.routes.route;return"query"===r?this.convertQueryStrToParams(o,t):this.convertSlashRouteStrToParamsObj(o,t)},t}(),Ht=n(19),Mt=function(){function t(){this.createPopStateStream=t.createPopStateStream.bind(this)}return t.createPopStateStream=function(t){M.a.fromEventPattern(function(t){window.onpopstate=t},function(){window.onpopstate=function(){}}).subscribe(t)},t.getLastArrVal=function(t){return function(t){return void 0!==Ht.last(t)?Ht.last(t):""}(t)},t.getRouteArrData=function(e,n){var r=Ht.filter(Ht.contains(Ht.__,e),n);return{routeKeywordsArr:r,routeKeyword:t.getLastArrVal(r)}},t.flattenConfigObject=function(t){return Ht.values(Ht.fromPairs(function t(e){return Ht.chain(function(e){var n=e[0],r=e[1];return"[object Object]"===Object.prototype.toString.call(r)?Ht.map(function(t){var e=t[0],r=t[1];return[n+"."+e,r]},t(r)):[[n,r]]},Ht.toPairs(e))}(t)))},t.getLocationData=function(){return Ht.pickAll(["href","origin","protocol","host","hostname","port","pathname","search","hash"],window.location)},t}(),Wt=n(80);var kt=n(19),Ut=function(t){function e(){var e;return(e=t.call(this)||this).createChannelActionsObj(),e.props.name="ROUTE",e.routeConfigJson=e.getRouteConfig(),e.bindStaticMethods(),e.navToStream$=new Wt.a,e.observer$=e.navToStream$.map(function(t){return e.onMapNext(t)}),e}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.initializeStream=function(){this.initStream()},n.createChannelActionsObj=function(){var t=this.addRegisteredActions(),e=kt.mergeAll(kt.chain(function(t){return kt.objOf(t,t)},t));this.channelActions=e},n.addRegisteredActions=function(){return["CHANNEL_ROUTE_DEEPLINK_EVENT","CHANNEL_ROUTE_CHANGE_EVENT"]},n.getRouteConfig=function(){var t=window.Spyne.config,e=kt.path(["channels","ROUTE"],t);"query"===e.type&&(e.isHash=!1);var n=Mt.flattenConfigObject(e.routes);return e.paramsArr=n,e},n.initStream=function(){this.firstLoadStream$=new Wt.a(this.onIncomingDomEvent(void 0,this.routeConfigJson,"CHANNEL_ROUTE_DEEPLINK_EVENT")),Mt.createPopStateStream(this.onIncomingDomEvent.bind(this)),this.observer$=M.a.merge(this.firstLoadStream$,this.navToStream$)},n.onMapNext=function(t,e){return void 0===e&&(e=!1),t.action="CHANNEL_ROUTE_CHANGE_EVENT",t},e.onIncomingDomEvent=function(t,e,n){void 0===e&&(e=this.routeConfigJson);var r=void 0!==n?n:this.channelActions.CHANNEL_ROUTE_CHANGE_EVENT,o=this.getDataFromString(e);this.sendStreamItem(r,o,void 0,void 0,this.navToStream$)},n.onIncomingObserverableData=function(t){var e=this.channelActions.CHANNEL_ROUTE_CHANGE_EVENT,n=this.getDataFromParams(t),r=kt.path(["observableData","srcElement"],t),o=t.observableEvent,i=!n.isHidden;this.sendRouteStream(n,i),this.sendStreamItem(e,n,r,o,this.navToStream$)},n.sendRouteStream=function(t,e){void 0===e&&(e=!0),!0===e&&this.setWindowLocation(t)},e.getRouteState=function(t){return"CHANNEL_ROUTE_CHANGE_EVENT"},e.getIsDeepLinkBool=function(){return 0===this._routeCount},e.getRouteCount=function(){return void 0===this._routeCount?(this._routeCount=0,this._routeCount):(this._routeCount+=1,this._routeCount)},e.getExtraPayloadParams=function(t){return void 0===t&&(t=this.routeConfigJson),{routeCount:this.getRouteCount(),isDeepLink:this.getIsDeepLinkBool(),isHash:t.isHash,isHidden:t.isHidden,routeType:t.type}},e.getDataFromParams=function(t,e){void 0===e&&(e=this.routeConfigJson);var n=kt.path(["observableData","payload"],t),r=this.getRouteStrFromParams(n,e),o=this.getDataFromLocationStr(),i=o.routeKeyword,a=o.routeKeywordsArr;n=kt.merge(o.keywords,n);var s=this.getExtraPayloadParams(e),c=s.routeCount;return{isDeepLink:s.isDeepLink,routeCount:c,routeKeyword:i,routeKeywordsArr:a,keywords:n,routeValue:r,isHash:s.isHash,isHidden:s.isHidden,routeType:s.routeType}},e.getDataFromString=function(t,n){void 0===t&&(t=this.routeConfigJson);var r=t.type,o=!0===t.isHash,i=Vt.getLocationStrByType(r,o),a=e.getParamsFromRouteStr(i,t,r),s=a.routeKeywordsArr,c=a.routeKeyword,u=a.keywords,d=a.routeValue,l=this.getExtraPayloadParams(t),p=l.routeCount,h=l.isDeepLink,f=l.isHash,E=l.routeType;return{isDeepLink:h,routeCount:p,routeKeyword:c,routeKeywordsArr:s,keywords:u,routeValue:d,isHash:f,isHidden:l.isHidden,routeType:E}},e.getDataFromLocationStr=function(t){void 0===t&&(t="slash");var e=void 0!==this.routeConfigJson?this.routeConfigJson.type:t,n=Vt.getLocationStrByType(e),r=this.getParamsFromRouteStr(n,this.routeConfigJson,e);return{routeKeywordsArr:r.routeKeywordsArr,routeKeyword:r.routeKeyword,keywords:r.keywords,routeValue:r.routeValue,action:this.getRouteState()}},e.getLocationData=function(){return kt.pickAll(["href","origin","protocol","host","hostname","port","pathname","search","hash"],window.location)},e.getRouteStrFromParams=function(t,e,n){var r=void 0!==n?n:e.type;return Vt.convertParamsToRoute(t,e,r)},e.getParamsFromRouteStr=function(t,e,n){var r=void 0!==n?n:e.type;return Vt.convertRouteToParams(t,e,r)},n.checkEmptyRouteStr=function(t,e){void 0===e&&(e=!1);var n=kt.isEmpty(t);return!0===(!0===n&&!1===e)||!0===(!0===n&&!0===e)?"/":!0===(!1===n&&!0===e)?kt.concat("#",t):t},e.removeLastSlash=function(t){return t.replace(/^(.*)(\/)$/,"$1")},n.setWindowLocation=function(t){var n=t.isHash,r=t.routeValue;if(r=this.checkEmptyRouteStr(r,n),!0===n){r=e.removeLastSlash(window.location.pathname)+r,window.history.pushState({},"",r)}else{var o=kt.when(kt.compose(kt.complement(kt.equals("/")),kt.head),kt.concat("/",kt.__));window.history.pushState({},"",o(r))}},n.getWindowLocation=function(){return window.location.pathname},n.bindStaticMethods=function(){this.getIsDeepLinkBool=e.getIsDeepLinkBool.bind(this),this.getDataFromLocationStr=e.getDataFromLocationStr.bind(this),this.onIncomingDomEvent=e.onIncomingDomEvent.bind(this),this.getDataFromString=e.getDataFromString.bind(this),this.getParamsFromRouteStr=e.getParamsFromRouteStr.bind(this),this.getLocationData=e.getLocationData.bind(this),this.getRouteState=e.getRouteState.bind(this),this.getDataFromParams=e.getDataFromParams.bind(this),this.getRouteCount=e.getRouteCount.bind(this),this.getExtraPayloadParams=e.getExtraPayloadParams.bind(this);var t=kt.curryN(3,e.getRouteStrFromParams);this.getRouteStrFromParams=t(kt.__,this.routeConfigJson,this.routeConfigJson.type)},e}(Rt);var $t=n(19),xt=function(t){function e(){var e;return(e=t.call(this)||this).props.name="UI",e.keyEventsLoaded=!1,e.keyCodeArr=[],e}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addRegisteredActions=function(){return["CHANNEL_UI_EVENT","CHANNEL_UI_BLUR_EVENT","CHANNEL_UI_CLICK_EVENT","CHANNEL_UI_CHANGE_EVENT","CHANNEL_UI_CHANGE_EVENT","CHANNEL_UI_DBLCLICK_EVENT","CHANNEL_UI_FOCUS_EVENT","CHANNEL_UI_FOCUSIN_EVENT","CHANNEL_UI_FOCUSOUT_EVENT","CHANNEL_UI_INPUT_EVENT","CHANNEL_UI_KEYDOWN_EVENT","CHANNEL_UI_KEYPRESS_EVENT","CHANNEL_UI_KEYUP_EVENT","CHANNEL_UI_MOUSEDOWN_EVENT","CHANNEL_UI_MOUSEENTER_EVENT","CHANNEL_UI_MOUSELEAVE_EVENT","CHANNEL_UI_MOUSEMOVE_EVENT","CHANNEL_UI_MOUSEOUT_EVENT","CHANNEL_UI_MOUSEOVER_EVENT","CHANNEL_UI_MOUSEUP_EVENT","CHANNEL_UI_SELECT_EVENT"]},n.loadKeyStream=function(){var t=this,e=M.a.fromEvent(document,"keyup");this.keyPresses$=e.groupBy(function(t){return t.keyCode}).mergeAll().filter(function(e){return t.keyCodeArr.indexOf(e.keyCode)>=0}).repeat().subscribe(this.onKeyPressed.bind(this))},n.addKeyEvent=function(t){!1===this.keyEventsLoaded&&this.loadKeyStream(),this.keyEventsLoaded=!0,this.registerKey(t)},n.registerKey=function(t){this.keyCodeArr.push(t)},n.onKeyPressed=function(t){console.log("key is ",t)},n.onIncomingObservable=function(t){var e=this,n=function(e){return{observableData:t.data,uiEvent:e}};return!0===$t.equals(t.name,this.props.name)?function(t){return t.observable.map(n).subscribe(e.onUIEvent.bind(e))}(t):void 0},n.getActionState=function(t){var e=$t.path(["uiEvent","type"]),n=$t.path(["uiEvent","typeOverRide"]),r=$t.compose($t.toUpper,$t.either(n,e))(t);return void 0!==r?"CHANNEL_UI_"+r+"_EVENT":"CHANNEL_UI"},n.onUIEvent=function(t){t.action=this.getActionState(t);var e=t.action,n=t.observableData,r=n.payload,o=n.srcElement,i=t.uiEvent;this.sendStreamItem(e,r,o,i)},e}(Rt),Ft=n(19),jt=function(){function t(){this.createDomObservableFromEvent=t.createDomObservableFromEvent.bind(this)}return t.createDomObservableFromEvent=function(t,e,n){void 0===n&&(n=!0);return e=void 0===e?function(t){return t}:e,M.a.fromEventPattern(function(e){return window.addEventListener(t,e,{passive:n})},function(){window[t]=function(t){return t}}).map(e)},t.createMediaQuery=function(t){var e=window.matchMedia(t);return this.checkIfValidMediaQuery(e,t),e},t.checkIfValidMediaQuery=function(t,e){var n=function(t){return t.replace(/\s+/gm,"")},r="MediaQueryList"===t.constructor.name&&n(t.media)===n(e);return!1===r&&function(e){console.warn('Spyne Warning: the following query string, "'+e+'", does not match "'+t.media+'" and may not be a valid Media Query item!')}(e),r},t.createMediaQueryHandler=function(t,e){var n=function(t){return function(e){return e.mediaQueryName=t,e}}(e),r=function(t){return{addHandler:function(e){t.onchange=e},removeHandler:function(e){t.onchange=function(){}}}}(t);return new M.a.fromEventPattern(r.addHandler,r.removeHandler).map(n)},t.createMergedObsFromObj=function(e){var n=e.mediqQueries,r=[];return Ft.mapObjIndexed(function(e,n,o){var i=t.createMediaQuery(e);r.push(t.createMediaQueryHandler(i,n))},n),r},t}();var Gt=n(19),Yt=function(t){function e(){var e;return(e=t.call(this)||this).bindStaticMethods(),e.observer$=new Q.b,e.props.name="WINDOW",e}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.initializeStream=function(){var t=this;this.domChannelConfig=window.Spyne.config.channels.WINDOW,this.currentScrollY=window.scrollY;var e=this.getActiveObservables();M.a.merge.apply(M.a,e).subscribe(function(e){var n=e.action,r=e.channelPayload,o=e.srcElement,i=e.event;t.sendStreamItem(n,r,o,i)})},e.getScrollMapFn=function(t){var e=this.channelActions.CHANNEL_WINDOW_SCROLL_EVENT,n=window.scrollY,r=this.currentScrollY-n,o=r>=0?"up":"down";return this.currentScrollY=n,{action:e,channelPayload:{scrollY:n,scrollDistance:r,scrollDir:o},srcElement:t.srcElement,scrollDistance:r,event:t}},e.getMouseWheelMapFn=function(t){return{action:this.channelActions.CHANNEL_WINDOW_MOUSEWHEEL_EVENT,channelPayload:{scrollDir:t.deltaY<=0?"up":"down",deltaX:t.deltaX,deltaY:t.deltaY,deltaZ:t.deltaZ},srcElement:t.srcElement,event:t}},e.createCurriedGenericEvent=function(t){var n="CHANNEL_WINDOW_"+t.toUpperCase()+"_EVENT";return Gt.curry(e.mapGenericEvent)(n)},e.mapGenericEvent=function(t,e){return console.log("map generic event ",t),{action:t,channelPayload:e,srcElement:e.srcElement,event:e}},e.getResizeMapFn=function(t){return{action:this.channelActions.CHANNEL_WINDOW_RESIZE_EVENT,channelPayload:Gt.pick(["innerWidth","innerHeight","outerWidth","outerHeight"],window),srcElement:t.srcElement,event:t}},e.getOrientationMapFn=function(t){var e=this.channelActions.CHANNEL_WINDOW_ORIENTATION_EVENT,n=window.matchMedia("(orientation: portrait)").matches,r=Gt.pick(["innerWidth","innerHeight","outerWidth","outerHeight"],window);return r.orientation=!0===n?"portrait":"landscape",{action:e,channelPayload:r,srcElement:t.srcElement,event:t}},n.getMediaQueryMapFn=function(t){return{action:this.channelActions.CHANNEL_WINDOW_MEDIA_QUERY_EVENT,channelPayload:Gt.pick(["matches","media","mediaQueryName"],t),srcElement:t.srcElement,event:t}},n.createMouseWheelObservable=function(t){var n=t.debounceMSTimeForScroll;return jt.createDomObservableFromEvent("mousewheel",e.getMouseWheelMapFn.bind(this)).debounceTime(n)},n.createScrollObservable=function(t){var n=t.debounceMSTimeForScroll;return jt.createDomObservableFromEvent("scroll",e.getScrollMapFn.bind(this)).debounceTime(n).skipWhile(function(t){return 0===t.scrollDistance})},n.createOrientationObservable=function(t){return jt.createDomObservableFromEvent("orientationchange",e.getOrientationMapFn.bind(this))},n.createResizeObservable=function(t){var n=t.debounceMSTimeForResize;return jt.createDomObservableFromEvent("resize",e.getResizeMapFn.bind(this)).debounceTime(n)},n.getEventsFromConfig=function(t){void 0===t&&(t=this.domChannelConfig);var n=t.events;return Gt.map(function(t){var n=e.createCurriedGenericEvent(t);return jt.createDomObservableFromEvent(t,n)},n)},n.getActiveObservables=function(t){void 0===t&&(t=this.domChannelConfig);var e=[];t.listenForMediaQueries=function(t){var e=o.compose(o.complement(o.isEmpty),o.head,o.values),n=o.compose(o.complement(o.isNil),o.head,o.values);return o.allPass([e,n])(t)}(t.mediqQueries);var n={listenForResize:this.createResizeObservable.bind(this),listenForOrientation:this.createOrientationObservable.bind(this),listenForScroll:this.createScrollObservable.bind(this),listenForMouseWheel:this.createMouseWheelObservable.bind(this)};Gt.mapObjIndexed(function(n,r,o){t[r]&&e.push(n(t))},n),this.checkForMediaQueries(t.listenForMediaQueries);var r=this.getEventsFromConfig(t);return e=e.concat(r)},n.checkForMediaQueries=function(t){var e=this;!0===t&&this.getMediaQueryObservable(this.domChannelConfig).subscribe(function(t){var n=t.action,r=t.channelPayload,o=t.srcElement,i=t.event;e.sendStreamItem(n,r,o,i,e.observer$)})},n.getMediaQueryObservable=function(t){var e=this.createMergedObsFromObj(t);return M.a.merge.apply(M.a,e).map(this.getMediaQueryMapFn.bind(this))},n.addRegisteredActions=function(){return["CHANNEL_WINDOW_SCROLL_EVENT","CHANNEL_WINDOW_MOUSEWHEEL_EVENT","CHANNEL_WINDOW_MEDIA_QUERY_EVENT","CHANNEL_WINDOW_RESIZE_EVENT","CHANNEL_WINDOW_ORIENTATION_EVENT","CHANNEL_WINDOW_CACHED_EVENT","CHANNEL_WINDOW_ERROR_EVENT","CHANNEL_WINDOW_ABORT_EVENT","CHANNEL_WINDOW_LOAD_EVENT","CHANNEL_WINDOW_BEFOREUNLOAD_EVENT","CHANNEL_WINDOW_UNLOAD_EVENT","CHANNEL_WINDOW_ONLINE_EVENT","CHANNEL_WINDOW_OFFLINE_EVENT","CHANNEL_WINDOW_FOCUS_EVENT","CHANNEL_WINDOW_BLUR_EVENT","CHANNEL_WINDOW_OPEN_EVENT","CHANNEL_WINDOW_MESSAGE_EVENT","CHANNEL_WINDOW_ERROR_EVENT","CHANNEL_WINDOW_CLOSE_EVENT","CHANNEL_WINDOW_PAGEHIDE_EVENT","CHANNEL_WINDOW_PAGESHOW_EVENT","CHANNEL_WINDOW_POPSTATE_EVENT","CHANNEL_WINDOW_ANIMATIONSTART_EVENT","CHANNEL_WINDOW_ANIMATIONEND_EVENT","CHANNEL_WINDOW_ANIMATIONITERATION_EVENT","CHANNEL_WINDOW_TRANSITIONSTART_EVENT","CHANNEL_WINDOW_TRANSITIONCANCEL_EVENT","CHANNEL_WINDOW_TRANSITIONEND_EVENT","CHANNEL_WINDOW_TRANSITIONRUN_EVENT","CHANNEL_WINDOW_RESET_EVENT","CHANNEL_WINDOW_SUBMIT_EVENT","CHANNEL_WINDOW_BEFOREPRINT_EVENT","CHANNEL_WINDOW_AFTERPRINT_EVENT","CHANNEL_WINDOW_COMPOSITIONSTART_EVENT","CHANNEL_WINDOW_COMPOSITIONUPDATE_EVENT","CHANNEL_WINDOW_COMPOSITIONEND_EVENT","CHANNEL_WINDOW_FULLSCREENCHANGE_EVENT","CHANNEL_WINDOW_FULLSCREENERROR_EVENT","CHANNEL_WINDOW_CUT_EVENT","CHANNEL_WINDOW_WHEEL_EVENT","CHANNEL_WINDOW_COPY_EVENT"]},n.bindStaticMethods=function(){this.createMediaQueryHandler=jt.createMediaQueryHandler.bind(this),this.createMergedObsFromObj=jt.createMergedObsFromObj.bind(this)},e}(Rt),Kt=function(){function t(t){this.addMixins(),this.map=new Map,this.map.set("DISPATCHER",new Q.b)}var e=t.prototype;return e.init=function(){this.createMainStreams()},e.createObserver=function(t){D(t.validations,t.init),this.map.set(t.init.name,t.init.observable())},e.createMainStreams=function(){this.routeValueeam=new Ut,this.map.set("ROUTE",this.routeValueeam),this.uiStream=new xt,this.map.set("UI",this.uiStream),this.domStream=new Yt,this.map.set("WINDOW",this.domStream),this.routeValueeam.initializeStream(),this.domStream.initializeStream()},e.addKeyEvent=function(t){this.map.get("UI").addKeyEvent(t)},e.registerStream=function(t,e){this.map.set(t,e),e.initializeStream()},e.getChannelActions=function(t){return this.map.get(t).addRegisteredActions()},e.getStream=function(t){if(void 0!==this.map.get(t))return this.map.get(t);console.warn('Spyne Warning: The Channel named "'+t+'" does not appear to be registered!')},e.addMixins=function(){},t}(),qt=function(){function t(t){var e=this;void 0===t&&(t={}),this.channels=new Kt,this.VERSION="0.8.19",this.ViewStream=lt,this.BasicView=et,this.DomItem=q,this.ViewStreamBroadcaster=it,this.ChannelsPayload=P,this.ChannelsBaseController=Kt,this.ChannelsBase=Rt,this.ChannelStreamItem=It,window.Spyne=this;void 0!==t&&(window.Spyne.config=F({channels:{WINDOW:{mediqQueries:{},events:[],listenForResize:!0,listenForOrientation:!0,listenForScroll:!0,listenForMouseWheel:!1,debounceMSTimeForResize:200,debounceMSTimeForScroll:150},ROUTE:{type:"slash",isHash:!1,isHidden:!1,routes:{route:{keyword:"change"}}}}},t)),this.getChannelActions=function(t){return window.Spyne.channels.getChannelActions(t)},this.registerChannel=function(t,n){return e.channels.registerStream(t,n)},this.registerDataChannel=function(t){return e.channels.registerStream(t.props.name,t)};var n=new lt({id:"spyne-null-views"});n.appendToDom(document.body),n.props.el.style.cssText="display:none; opacity:0; pointer-events:none;",this.channels.init()}return t.getChannelActions=function(t){return window.Spyne.channels.getChannelActions(t)},t.registerChannel=function(t,e){if(void 0!==window.Spyne)return window.Spyne.channels.registerStream(t,e);console.warn("Spyne has not been initialized")},t}();window.Spyne=qt;var Bt=n(118),Qt=n(38);var zt=n(49),Jt=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).props.name="CHANNEL_VIDEO",n.observer$=new Bt.a,n}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addRegisteredActions=function(){return["CHANNEL_VIDEO_INITIALIZED_EVENT","CHANNEL_VIDEO_SYNC_EVENT","CHANNEL_VIDEO_PROGRESS_EVENT","CHANNEL_VIDEO_NEW_VIDEO_EVENT","CHANNEL_VIDEO_COMPLETE_EVENT","CHANNEL_VIDEO_FREEWHEEL_STARTED_EVENT","CHANNEL_VIDEO_FREEWHEEL_ENDED_EVENT"]},n.initVideoEvents=function(t){this.videoEl=t.video;new Qt.a.fromEvent(this.videoEl,"timeupdate").map(function(t){var e=t.target,n=e.currentTime,r=!1===e.paused,o=e.dataset,i=e.duration,a=1*Number(n/i).toFixed(2),s=100*a%25==0,c="",u=[1,7,13,20,25,30,35,39,44,50],d=Math.floor(n),l=d%15==0&&0!==d,p=zt.contains(d,u),h=0===a,f=1===a;return!0===p&&(c="#img-"+zt.indexOf(d,u)),{target:e,label:c,time:n,isPlaying:r,dataSet:o,duration:i,pct:a,isQuarter:s,isElapsed15:l,isThreshold:p,start:h,isComplete:f}}).distinctUntilChanged(function(t,e){return t.label===e.label}).filter(function(t){return""!==t.label}).subscribe(this.onSendVideoEvent.bind(this))},n.onSendVideoEvent=function(t){var e=this.channelActions.CHANNEL_VIDEO_SYNC_EVENT,n=t,r={},o={};console.log("time update in event ",n.label,n.isThreshold,{action:e,payload:n,srcElement:r,event:o}),this.sendStreamItem(e,n,r,o)},n.onIncomingObserverableData=function(t){var e=t.observableData,n=zt.path(["payload","action"],e),r=this.channelActions[n];if(void 0!==r){var o=e.payload,i=e.srcElement;"CHANNEL_VIDEO_INITIALIZED_EVENT"===r&&this.initVideoEvents(e.payload),this.sendStreamItem(r,o,i,{})}else console.warn("not a valid video channel action")},n.onSendEvent=function(t,e){void 0===e&&(e={});var n=this.channelActions[t];this.sendStreamItem(n,e,{},void 0)},e}(Rt),Xt=n(369),Zt=n(366),te=n(371),ee=n(357),ne=n(372);var re=n(49),oe=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).props.name="ChannelData500px",n.observer$=new Xt.a,n.fetchData(),n}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addRegisteredActions=function(){return["CHANNEL_DATA_EVENT"]},n.fetchData=function(){var t=this;Object(Zt.a)(fetch(this.props.dataUrl)).pipe(Object(te.a)(function(t){return Qt.a.fromPromise(t.json())}),Object(ee.a)(function(t){var e=/^(https:)(.*)$/;return console.log("DATA IS ",t),t.photos=re.map(function(t){return t.description=null===t.description?"untitled":t.description,t.description=function(t){return t.replace(/(\w)(.*)/gm,function(t,e,n){return String(e.toUpperCase())+n+"."})}(t.description),console.log(t.description),t.perpsectiveNum=String(t.height/t.width*100+"%"),t.image_url=t.urls.small,t.user.userpic_url=String(t.user.profile_image.large).replace(e,"$2"),t},t.results),t.photos}),Object(ee.a)(function(e){return new It(t.props.name,"CHANNEL_DATA_EVENT",e)}),Object(ne.a)(this.observer$)).connect()},e}(Rt);var ie=n(49),ae=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).props.name="CHANNEL_LOCALSTORAGE",n.props.localStorageKey=Spyne.config.appName+"_storage",n.observer$=new Bt.a,n}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addRegisteredActions=function(){return["CHANNEL_LOCALSTORAGE_GET_EVENT","CHANNEL_LOCALSTORAGE_SET_EVENT","CHANNEL_LOCALSTORAGE_UPDATE_EVENT"]},n.onIncomingObserverableData=function(t){var e=t.observableData.payload,n=e.action,r=void 0!==e.key,o=void 0!==e.val,i="CHANNEL_LOCALSTORAGE_GET_EVENT"===n,a="CHANNEL_LOCALSTORAGE_SET_EVENT"===n,s="CHANNEL_LOCALSTORAGE_UPDATE_EVENT"===n,c=ie.equals(!0),u={runGetEvent:ie.all(c,[i,r]),runSetEvent:ie.all(c,[a,r,o]),runUpdateEvent:ie.all(c,[s,r,o])},d=ie.compose(ie.head,ie.keys,ie.filter(c))(u);void 0!==d&&this[d].bind(this)(e)},n.runGetEvent=function(t){var e=t.key,n=(t.val,t.action,this.getStorageItem(e));t.localStorageVal=""!==n?n:void 0,t[e]=t.localStorageVal,this.onSendEvent(t.action,t)},n.runSetEvent=function(t){var e=t.key,n=t.val;t.action;t.localStorageVal=this.setStorageItem(e,n),t[e]=t.localStorageVal,this.onSendEvent(t.action,t)},n.runUpdateEvent=function(t){console.log("run update event ",t),this.onSendEvent(t.action,t)},n.onSendEvent=function(t,e){void 0===e&&(e={});var n=this.channelActions[t];this.sendStreamItem(n,e,{},void 0)},n.getStorageItem=function(t,e){return void 0===t&&(t=""),void 0===e&&(e=""),localStorage.getItem(t)||this.setStorageItem(e)},n.setStorageItem=function(t,e){return void 0===t&&(t=""),void 0===e&&(e=""),localStorage.setItem(t,e),e},e}(Rt),se=n(370);var ce=function(t){function e(e){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).props.name="CHANNEL_GATEWAY",n.observer$=new Bt.a,n.props.gatekeeperLoginsUrl="https://logins.spynejs.com/dev/spyne",n.props.spyneName=Spyne.config.appName,n.props.passwordKey=Spyne.config.appName+"_GateVal",n.initLocalStorageCheck(),n}!function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}(e,t);var n=e.prototype;return n.addRegisteredActions=function(){return["CHANNEL_GATEWAY_LOCALSTORAGE_DATA_EVENT","CHANNEL_GATEWAY_LOCALSTORAGE_PASSWORD_CORRECT_EVENT","CHANNEL_GATEWAY_LOCALSTORAGE_PASSWORD_INCORRECT_EVENT","CHANNEL_GATEWAY_PASSWORD_CORRECT_EVENT","CHANNEL_GATEWAY_PASSWORD_INCORRECT_EVENT","CHANNEL_GATEWAY__DATA_EVENT","CHANNEL_GATEWAY_CHECK_CREDENTIALS_EVENT"]},n.getAction=function(t,e){return"CHANNEL_GATEWAY_"+(!0===t?"LOCALSTORAGE_":"")+"PASSWORD_"+(!0===e?"CORRECT_":"INCORRECT_")+"EVENT"},n.onIncomingObserverableData=function(t){var e=t.observableData;if("CHANNEL_GATEWAY_CHECK_CREDENTIALS_EVENT"===e.action){var n=this.props.spyneName,r=e.payload.password;this.fetchData(n,r)}},n.initLocalStorageCheck=function(){var t=this;this.localStorage$=this.getChannel("CHANNEL_LOCALSTORAGE"),this.localStorage$.pipe(Object(se.a)(function(t){return"CHANNEL_LOCALSTORAGE_GET_EVENT"===t.action})).subscribe(function(e){var n=e.channelPayload,r=n.key,o=n.localStorageVal;!0==(r===t.props.passwordKey)&&t.fetchData(t.props.spyneName,o,!0)})},n.fetchData=function(t,e,n){var r=this;void 0===t&&(t=""),void 0===e&&(e=""),void 0===n&&(n=!1);var o=this.props.gatekeeperLoginsUrl,i={spyneName:t,password:e};Object(Zt.a)(fetch(o,{method:"POST",mode:"cors",cache:"no-cache",headers:{"Content-Type":"application/json; charset=utf-8"},body:JSON.stringify(i)})).pipe(Object(te.a)(function(t){return Object(Zt.a)(t.json())}),Object(ee.a)(function(t){return t.isLocalStorage=n,t.passwordKey=i.spyneName,t.passwordVal=i.password,t}),Object(ee.a)(function(t){var e=r.getAction(n,t.passwordIsValid),o=r.props.name;return new It(o,e,t)})).subscribe(this.onSendFetchEvent.bind(this))},n.onSendFetchEvent=function(t){this.sendStreamItem(t.action,t.channelPayload)},n.onSendEvent=function(t,e){void 0===e&&(e={});var n=this.channelActions[t];this.sendStreamItem(n,e,{},void 0)},e}(Rt),ue=n(49),de=(n(525),{appName:"autoscroll",channels:{WINDOW:{mediqQueries:{test:"screen and (max-width:500px)",newTest:"screen and (max-width:800px)"}},ROUTE1:{type:"slash",isHash:!1,isHidden:!1,routes:{route:{keyword:"pageId",home:"",images:{route:{keyword:"imageNum",route:{keyword:"author"}}},photographers:{route:{keyword:"photogNum"}},"page-.*":{route:{keyword:"randomNum"}}}}}}});window.onStartApp=function(){var t=new qt(de),e=/^(https:)(.*)$/,n={dataUrl:"https://api.unsplash.com/search/photos/?client_id=68f7ee84bd1d1bbcecf2692172b48c28704e2108c23d7d1d9fc7049a7ece12ae&page=1&query=landscape",name:"ChannelData500px",map:function(t){return t.photos=ue.map(function(t){return t.description=null===t.description?"untitled":t.description,t.description=function(t){return t.replace(/(\w)(.*)/gm,function(t,e,n){return String(e.toUpperCase())+n+"."})}(t.description),console.log(t.description),t.perpsectiveNum=String(t.height/t.width*100+"%"),t.image_url=t.urls.small,t.user.userpic_url=String(t.user.profile_image.large).replace(e,"$2"),t},t.results),t.photos}};t.registerDataChannel(new oe(n)),t.registerDataChannel(new Jt),t.registerChannel("CHANNEL_LOCALSTORAGE",new ae),t.registerChannel("CHANNEL_GATEWAY",new ce);new Ot({el:document.getElementById("example-app")});console.log("Spyne: ",Spyne.VERSION)};onStartApp()},525:function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,